class PMMonsterBase : Actor abstract
{                      
	enum BeamAttackFlags
	{
		BAF_EXPLICITANGLE = 1,
		BAF_ABSOLUTEANGLE = 2
	}

	enum ChargeParticlesFlags
	{
		CPF_NOACTORPITCH = 1
	}

	enum SpawnBoltFlags
	{
		SBF_NOADD = 1,
		SBF_ALLOWREPLACE = 2,
		SBF_NOSCALEDENSITY = 4
	}

	int pm_attackloop;
	int pm_projangle;
	int user_numbullets;
	transient CVar StealthOption;

	// [Ace] If there is enough space, monsters will readjust their height so the collision box matches their sprite.
	// However, the initial size needs to be small so monsters placed in wall holes (e.g. Cacodemons on Tricks and Traps) can leave.
	protected meta int RealHeight;
	property RealHeight: RealHeight;
	
	int ForgetThreshold;
	property ForgetThreshold: ForgetThreshold; // [Ace] The higher this number, the slower it'll take for an enemy to give up on you, provided you've jammed yourself in a mousehole.

	double AlwaysSeeDistance;
	property AlwaysSeeDistance: AlwaysSeeDistance;

	double MaxSeeDistance;
	property MaxSeeDistance: MaxSeeDistance;

	double MaxHearDistance;
	property MaxHearDistance: MaxHearDistance;

	meta class<PMMonsterBase> SinBaseClass;
	property SinBaseClass: SinBaseClass;

	meta string SinName, SinColor;
	property Sin: SinName, SinColor;

	meta string CodexLore;
	property CodexLore: CodexLore;

	Default
	{
		PMMonsterBase.ForgetThreshold 200;
		PMMonsterBase.AlwaysSeeDistance 256;
		PMMonsterBase.MaxSeeDistance 6144;
		PMMonsterBase.MaxHearDistance 6144;
		Monster;
		+FLOORCLIP;
		DamageFactor "PM_BulletHellDamage", 0;
		TeleFogDestType "PM_DemonicTeleportFog";
		TeleFogSourceType "PM_SmallDemonicTeleportFog";
		PMMonsterBase.CodexLore "";
	}

	// This code was initially written by MajorCooke
	state PM_LeapTo(Actor to, int maxdist = 200, StateLabel fallback = "See") {
		StateLabel next = null;
		if (target && Distance3D(target) <= maxdist)
		{
			if (A_JumpIfHigherOrLower("Null",null)) //Target is below
			{
				A_FaceTarget(0,0,0,0,FAF_TOP,-4);
			}
			else if (A_JumpIfHigherOrLower(null,"Null")) //Target is above
			{
				A_FaceTarget(0,0,0,0,FAF_TOP,10 + Distance3D(target)/5.0);
			}
			else //Target's on (near) equal z
			{
				A_FaceTarget(0,0,0,0,FAF_TOP,Distance3D(target)/5.0);
			}
			if(Distance3D(target) > maxdist) {
				return ResolveState(fallback);
			}
			A_ChangeVelocity(cos(pitch)*(Distance3D(to)/25) ,0, -sin(pitch)*(Distance3D(to)/11)  ,CVF_RELATIVE|CVF_REPLACE);
		}
		else next = fallback;
		return ResolveState(next);
	}

	//Deimos:
	//based on the Source SDK's calcThrowVelocity method
	//This function is mostly based on the arcSize
	//	Larger arc - slower travel speed
	//	Smaller arc - faster travel speed
	//	Set it to 1.0 for a fun time
	//NEVER set arcSize to zero or negative

	//Example:
	//let p = A_SpawnProjectile("PM_FeralImpIreball",32,0,0);
	//p.vel = CalcThrowVector(pos, target.pos, p.gravity, 105.5);
	vector3 CalcThrowVector(vector3 startPos, vector3 endPos, float pGravity = 1.0, float arcSize = 105.0)
	{
		if(arcSize <= 0) {
			console.printf("bruh this shit is NaN");
			return (0,0,0);
		}
		//height needed to hit the target
		float stepHeight = endPos.z - startPos.z;
		if(pmd_math_throw_debug) console.printf("CalcThrowVector(): height need to get to goal position: %f", stepHeight);
		float throwHeight = 0;

		//calculate a distance to a point that is between the current and final position.
		//(basically the apex of the arc) (the apex is the highest point btw)
		Vector2 targetDir = (endPos.xy - startPos.xy);
		if(pmd_math_throw_debug) console.printf("CalcThrowVector(): Unnormalized direction: x:%f, y:%f", targetDir.x, targetDir.y);

		float distance = targetDir.length(); // normalized distance between the positions
		if(pmd_math_throw_debug) console.printf("CalcThrowVector(): Distance between points A and B: %f", distance);
		vector2 normDir = targetDir.unit(); // normalized director to end point
		if(pmd_math_throw_debug) console.printf("CalcThrowVector(): Normalized direction: x:%f, y:%f", normDir.x, normDir.y);

		// If jumping up we want to throw a bit higher than the height diff	
		if (stepHeight > 0) 
		{
			throwHeight = stepHeight + arcSize;	
		}	
		else
		{
			throwHeight = arcSize;
		}
		// Make sure that I at least catch some air
		if (throwHeight < arcSize)
		{
			throwHeight = arcSize;
		}

		// the fun part, actually calculating the throw velocities
		float verticalVel = (float)(sqrt(2.0 * pGravity * throwHeight));

		float divisor = verticalVel + sqrt((2.0 *(-pGravity) * (stepHeight - throwHeight)));
		// divisor += (float)();

		float zVel = (distance * pGravity) / divisor;

		// create horizontal throw vector and add vertical component
		Vector3 throwVel = (normDir.x * zVel, normDir.y * zVel, 0);
		throwVel.z = verticalVel;
		if(pmd_math_throw_debug) console.printf("CalcThrowVector(): Final Throw Velocity: x:%f, y:%f z:%f", throwVel.x, throwVel.y, throwVel.z);

		return throwVel;
	}

	static clearscope Vector2 GetLeadAngles(Actor caller, Actor target, double projVel)
	{
		double ticsToTarget = caller.Distance2D(target) / projVel;
		Vector3 destVector = Level.Vec3Offset(caller.Vec3To(target), target.Vel * ticsToTarget);

		return (VectorAngle(destVector.X, destVector.Y), -VectorAngle(destVector.XY.Length(), destVector.Z));
	}

	// [Ace] If origin is the same as offset, there will be no angle compensation. This is useful for firing the weapon from the side but having the same hit point as if it were fired from the center.
	static void PM_BeamAttack(Actor shooter, int dmg, class<PM_BeamSegment> segmentClass, class<PM_BeamPuff> puffClass, int flags = 0, Vector2 spread = (0, 0), Vector3 origin = (0, 0, 0), Vector3 offset = (0, 0, 0), double range = 1024 * 8, double sparsity = 10.0)
	{
		FLineTraceData data;
		
		Vector2 shootAngles = (shooter.Angle, shooter.Pitch);

		if (flags & BAF_EXPLICITANGLE)
		{
			shootAngles += spread;
		}
		else if (flags & BAF_ABSOLUTEANGLE)
		{
			shootAngles = spread;
		}
		else
		{
			shootAngles += spread * frandom(-1.0, 1.0);
		}

		// [Ace] Do a test trace to get the delta angle/pitch between the tracer fired from the origin and the tracer fired from the real offset.
		shooter.LineTrace(shootAngles.X, range, shootAngles.Y, TRF_THRUACTORS, offset.Z, offset.X, offset.Y, data);
		Vector3 diff = Level.Vec3Diff(shooter.Vec3Offset(origin.X * cos(shooter.Angle), origin.Y * sin(shooter.Angle), origin.Z), data.HitLocation);
		shootAngles -= (DeltaAngle(shooter.Angle, VectorAngle(diff.X, diff.Y)), DeltaAngle(shooter.Pitch, -VectorAngle(diff.XY.Length(), diff.Z)));

		bool hit = shooter.LineTrace(shootAngles.X, range, shootAngles.Y, TRF_SOLIDACTORS, offset.Z, offset.X, offset.Y, data);
		if (hit)
		{
			for (double i = 0; i < data.Distance - sparsity; i += sparsity)
			{
				Actor a = Spawn(segmentClass, Level.Vec3Offset(data.HitLocation, data.HitDir * -i));
				a.Angle = shootAngles.X;
				a.Pitch = shootAngles.Y;
				a.Target = shooter;
			}

			PM_BeamPuff puff = null;
			if (puffClass)
			{
				let def = GetDefaultByType(puffClass);
				if (def.bALWAYSPUFF && !data.HitActor || data.HitActor && def.bPUFFONACTORS)
				{
					puff = PM_BeamPuff(Spawn(puffClass, data.HitLocation));
					if (puff.bPUFFGETSOWNER)
					{
						puff.Target = shooter;
					}
					puff.Angle = shootAngles.X;
					puff.Pitch = shootAngles.Y;
					puff.A_SprayDecal(puff.Decal, 10, offset: -data.HitDir);
					puff.Tracer = data.HitActor; // [Ace] Do not fuck with Crash states and all that shit. Leave it up to the modder to decide what to do.
				}
			}

			if (data.HitActor)
			{
				data.HitActor.DamageMobj(puff ? Actor(puff) : shooter, shooter, dmg, puff ? puff.DamageType : 'None');
			}
		}
	}

	static void PM_ChargeParticles(Actor caller, int count, double dist, Vector3 offset, TextureID tex, Color col = 0xDFFF66, int flags = 0)
	{
		double p = flags & CPF_NOACTORPITCH ? 0 : caller.Pitch;
		for (int i = 0; i < count; ++i)
		{
			double cp = cos(p + frandom(-15, 15));
			double sp = -sin(p + frandom(-15, 15));
			caller.A_SpawnParticleEx(col, tex, STYLE_Add, SPF_RELPOS | SPF_RELVEL | SPF_RELACCEL | SPF_FULLBRIGHT | SPF_NOTIMEFREEZE, 30, frandom(4, 8), caller.Angle + frandom(-180, 180), offset.X + dist * cp, offset.Y, offset.Z + dist * sp, 0, 0, 0, -0.10 * cp, 0, -0.10 * sp);
		}
	}

	// [Ace] maxDiff reaches its peak roughly around 16, I think.
	PM_Bolt AimLaser;
	VisualThinker part;
	void PM_SpawnBolt(Actor spawner, Vector3 endPos, Color col, TextureID tex, double maxDiff = 16.0, double scale = 1.0, Vector3 offset = (0, 0, 0), int flags = 0, int baseTime = 35, int fadeTime = 20, double alpha = 0.4)
	{
		Vector3 diff = Level.Vec3Diff(spawner.Vec3Offset(offset.X, offset.Y, offset.Z), endPos);

		Vector3 partDiff = (0, 0, 0);
		double dist = diff.Length();
		flinetracedata Lbeam;
		double PitchDes=atan2(-diff.z,diff.xy.length());
		double AngleDes=atan2(diff.xy);
		
		spawner.linetrace(
			AngleDes,
			int.max,
			PitchDes,
			flags:TRF_NOSKY|TRF_ABSOFFSET,
			offsetz:offset.z,
			offsetforward:offset.x,
			offsetside:offset.y,
			data:Lbeam
		);
		if(!AimLaser){
		AimLaser = PM_Bolt(self.spawn("PM_Bolt",(Lbeam.hitlocation),ALLOW_REPLACE));
		
		}
		
		if(AimLaser){
		AimLaser.setorigin(Lbeam.hitlocation,true);
		Aimlaser.alpha=alpha;
		AimLaser.scale.y=-lbeam.Distance;
		AimLaser.scale.x=scale;
		AimLaser.pitch=PitchDes-90;
		AimLaser.angle=AngleDes;
		AimLaser.SetShade(col);
		//Setting it to 1 gets it deleted
		AimLaser.tics=1+baseTime;
		PM_Bolt(Aimlaser).fade=Alpha/max(1,fadeTime);
		}
		
		//Someone please try to make this look less ass
		if(!part)part=PM_BoltPart.spawn("PM_Boltpart",tex,Lbeam.hitlocation,(0,0,0));
		if(part){
			part.SetRenderStyle(flags & SBF_NOADD ? STYLE_Normal : STYLE_Add);
			part.Texture=tex;
			PM_BoltPart(part).movepoint=Lbeam.hitlocation;
			PM_BoltPart(part).Thealpha=1;
			PM_BoltPart(part).fade=1/max(1,fadeTime);
			part.scolor=col;
			part.scale = (1,1)*scale*1.5;
		}
		
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();

		Health = StartHealth = 
		int(ceil(Default.Health * pm_healthfactor *
		(SinName != "" ? 
		CVar.GetCVar("pm_healthfactor_"..SinName).GetFloat() : 1.0)));
	}

	override void Tick()
	{
	    if (!StealthOption) { StealthOption = CVar.GetCVar('pm_forgetcheck'); }
		
		if (Height != RealHeight && RealHeight > 0)
		{
			A_SetSize(-1, RealHeight, true);
		}

		if (!bNOCLIP && GetAge() % 35 == 0 && StealthOption.GetInt() > 1)
		{
			if (Target && Health > 0)
			{
				double dist, adjDist;
				[dist, adjDist] = GetAdjustedSeeDistance();
				//Console.Printf("\c[DarkGray]Distance:\c- %.2f, \c[DarkGray]Adj. See Distance:\c- %.2f", dist, adjDist);
				if (dist > AlwaysSeeDistance) // [Ace] I was considering adding a CheckSight to this, but it made me think that it'd be more immersive to have to hide in a dark corner than to just go AROUND a corner.
				{
					ForgetThreshold -= int(1000 / max(10, adjDist));
					if (ForgetThreshold <= 0)
					{
						A_ClearTarget();
						SetState(SpawnState);
					}
				}
			}
			else
			{
				ForgetThreshold = default.ForgetThreshold;
			}
		}

		// [Ace] If you load DS before PM, you can use the helper stuff from DS for debugging. Just don't forget to comment out the code later.
		//DSCore.DrawCollisionBox(self);
		Super.Tick();
	}

	void PM_LeadTarget(double projSpeed)
	{
		if (!Target)
		{
			return;
		}

		Vector2 aimAngles = GetLeadAngles(self, Target, projSpeed);
		Angle = aimAngles.X;
		Pitch = aimAngles.Y;
	}

	double, double GetAdjustedSeeDistance()
	{
		if (!Target || !Target.CurSector)
		{
			return 0, MaxSeeDistance;
		}

		double dist = Distance3D(Target);
		double distRedFac = (Target.CurSector.lightlevel / 144.0) * (0.5 + Target.Vel.Length() / 8.0) * (Target.Player ? Target.Player.crouchfactor : 1.0) * (Target.bSHADOW ? 0.35 : 1.0);

		return dist, MaxSeeDistance * distRedFac;
	}
		
	void PM_Look(double fov = 140, int flags = LOF_NOSEESOUND)
	{
		// Guard: never run look logic when dead
		if (Health <= 0 || bCORPSE) { return; }

		// [Ace] Simplify things for friendly monsters. Just attack.
		if (!StealthOption || StealthOption.GetInt() == 0 || bFRIENDLY || Target && (!Target.Player || !Target.CurSector))
		{
			A_LookEx(flags, label: "Look");
			return;
		}
        
		A_LookEx(flags | LOF_NOJUMP, maxseedist: MaxSeeDistance, MaxHearDistance, fov);
		if (Target && !LastHeard && Health > 0)
		{
			double dist, adjDist;
			[dist, adjDist] = GetAdjustedSeeDistance();
			if (dist > AlwaysSeeDistance && (dist > adjDist || random(0, 10)))
			{
				A_ClearTarget();
			}
		}
		if (Target && Health > 0 && (!bAMBUSH || CheckSight(Target)))
		{
			SetStateLabel('Look');
		}
	}

	virtual void PM_Gib()
	{
	 for(int i=0; i<2; i++){
	 A_SpawnItemEx("PM_NormalBloodyCloud",0,0,20,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION|SXF_ABSOLUTEVELOCITY);
	 for(int gib=0; gib<5; gib++){A_SpawnItemEx("PM_NormalMeatChunkLauncher",0,0,random(10,30),0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION|SXF_ABSOLUTEVELOCITY);}
	 A_SpawnItemEx("PM_NormalInstestinGib",0,0,32,random(-10,10),random(-10,10),random(-10,10),frandom(0,360),SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION|SXF_ABSOLUTEVELOCITY);
	  }
	  A_StartSound("ArachExpGore",CHAN_6,CHANF_DEFAULT,0.65);
	  A_StartSound("GBloodSplashBig",CHAN_7,CHANF_DEFAULT,0.75);
	}

	virtual void PM_LookingForPlayer()
	{
		A_Chase(null, "Spotted", CHF_NOPLAYACTIVE);
	}

	void PM_AlertSound()
	{
		A_StartSound(SeeSound, 555, attenuation: (!bBOSS) ? 1 : 0);
	}

	virtual void PM_Scream()
	{
		A_StopSound(555);
		A_StartSound(DeathSound, 556, attenuation: (!bBOSS) ? 1 : 0);
	}
}

Class PM_Bolt : Actor
{
	Double Fade;
	Default
	{
		+FORCEXYBILLBOARD;
		RenderStyle "Addstencil";
		+NOINTERACTION
		+NOBLOCKMAP
		+BRIGHT
		+INTERPOLATEANGLES
		StencilColor "ff2424";
		Alpha 0.4;
	}
	Override Void Tick(){
	super.Tick();
		if(alpha<=0||fade<0)destroy();
	}

	States
	{
		Spawn:
			ZAZA A 2;
		Fadeloop:
			ZAZA A 1 {alpha-=fade;}
			Loop;
	}
}
Class PM_BoltPart : VisualThinker
{
	Vector3 Movepoint;
	double fade;
	double thealpha;
			
	override void Tick()
	{
		Super.Tick();
		Pos=movepoint;
		
		//This shit is so ass :brokenheart:
		alpha -= fade;
		alpha = thealpha;
		thealpha=0;
		
		if(alpha<=0)Destroy();
		
	}
}
//Check PM_ZTrooperFragGrenade for example
Class PM_Trailer : actor abstract
{
	static vector3 Trail(Actor owner,vector3 OtherPos,Color col,vector3 offset = (0,0,0), double scale = 1,double alpha = 0.3,int fadetics = 1){
		actor las;
		vector3 newPos = owner.pos+(RotateVector(offset.xy,owner.angle),offset.z);
		las = spawn("PM_bolt",newpos,ALLOW_REPLACE);
		if(las){
			vector3 substitute = (OtherPos-newPos);
			las.alpha = alpha;
			las.SetShade(col);
			las.scale.x = scale;
			las.scale.y = (substitute).length();
			las.angle = atan2(substitute.xy);
			las.pitch = atan2(-(substitute.z),(substitute.xy).length())-90;
			PM_bolt(las).fade = alpha/fadetics;	
		}
		return newpos;
		
	}
}
class PM_BeamSegment : Actor abstract
{
	protected virtual void SpawnRayParticles()
	{
		for (int i = 0; i < 1; ++i)
		{
			A_SpawnParticleEx(fillcolor, Tex, STYLE_Add, SPF_RELATIVE | SPF_FULLBRIGHT | SPF_NOTIMEFREEZE, random(100, 200), frandom(1.5, 3.0), 0,random(-10, 10), 0, 0,
				frandom(-0.10, 0.10), frandom(-0.10, 0.10), frandom(-0.10, 0.10),
				frandom(-0.005, 0.005), frandom(-0.005, 0.005), frandom(-0.005, 0.005));
		}
	}

	override void PostBeginPlay()
	{
		if (Target)
		{
			double dist = Distance3D(Target);
			alpha += FadeSpeed * dist;
		}
		SpawnRayParticles();

		Super.PostBeginPlay();
	}

	protected TextureID Tex; // [Ace] Set this in PostBeginPlay, not SpawnRayParticles or Tick. Constantly setting something that's only ever used once just eats VM time for no reason.
	protected meta double FadeSpeed;
	property FadeSpeed: FadeSpeed;

	Default
	{
		PM_BeamSegment.FadeSpeed 0.002;
		RenderStyle "Add";
		StencilColor "FFFFFF"; // [Ace] Used for the particles.
		+NOINTERACTION
		+NOBLOCKMAP
		+BRIGHT
		+NOTIMEFREEZE
		Alpha 1.0;
	}
}

class PM_BeamPuff : Actor abstract
{
	meta string Decal;
	property Decal: Decal;

	Default
	{
		Height 1;
		+NOINTERACTION
		+ROLLSPRITE
		+ROLLCENTER
		+PUFFGETSOWNER
		+HITTRACER
		+NODAMAGETHRUST
		+FORCERADIUSDMG
		+BLOODSPLATTER
		+FORCEDECAL
		+NOTIMEFREEZE
		Scale 0.4;
	}
}

//[Ace] Example only. Put these where they belong.
class TyrantBeamSegment : PM_BeamSegment
{
	Default
	{
		StencilColor "FF3333";
	}
	States
	{
		Spawn:
			TYRB A 1 A_FadeOut(0.05);
			Loop;
	}
}

Class PMMonsterDummy : PMMonsterBase
{
 Default
 {
  Health 15;
  GibHealth 20;
  Radius 18;
  Height 56;
  Speed 0;
  PainChance 256;
  SeeSound "";
  PainSound "ZombieFodder/Pain";
  DeathSound "ZombieFodder/Death";
  Obituary "how the fuck did you die to this guy";
  Species "Horrorspawn";
  Tag "ULTRA MEGA GOD HORRORSPAWN +1";
  Monster;
  Bloodtype "PM_NormalBloodBase";
  MeleeRange 70;
  XScale 0.84;
  YScale 0.91;
  +INVULNERABLE
 }
 States
 {
  Spawn:
	ZFOD AAAAAAAAA 10 A_Look;
	Loop;
  See:
	ZFOD AABB 4 A_Chase();
	ZFOD CCDD 4 A_Chase();
	Loop;
 }
}

Class PMFodderMonsterBase : PMMonsterBase abstract
{
 Default
 {
 -COUNTKILL
  PMMonsterBase.Sin "Fodder", "Red";
  TeleFogSourceType "PM_SmallDemonicTeleportFog";
  TeleFogDestType "PM_SmallDemonicTeleportFog";
 }
 
 override void PM_Gib()
 {
  for(int gib=0;gib<5;gib++)
 { A_SpawnItemEx("PM_NormalMeatChunkLauncher",0,0,random(10,30),0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION|SXF_ABSOLUTEVELOCITY); }
  for(int a=0;a<3;a++)
 { A_SpawnItemEx("PM_NormalBloodMulti",0,0,32,random(-1,1),random(-1,1),random(-1,1),frandom(0,360),SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION|SXF_ABSOLUTEVELOCITY); }
 A_SpawnItemEx("PM_NormalBloodMist",0,0,32,random(-1,1),random(-1,1),random(-1,1),frandom(0,360),SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION|SXF_ABSOLUTEVELOCITY);
   A_StartSound("GBloodSplashBig",CHAN_7,CHANF_DEFAULT,0.75);
 }
}

Class PMUnaffMonsterBase : PMMonsterBase abstract
{
 Default
 {
  PMMonsterBase.Sin "Unaffiliated", "Red";
 }
}

Class PMBossMonsterBase : PMMonsterBase abstract
{
 Default
 {
  PMMonsterBase.Sin "Boss", "Red";
 }
}

//TIERS OF SIN
Class PMLustMonsterBase : PMMonsterBase abstract
{
 Default
 {
  PMMonsterBase.Sin "Lust", "Purple";
  TeleFogDestType "PM_LustTeleportFog";
  TeleFogSourceType "PM_SmallDemonicTeleportFog";
 }
}

Class PMGluttonyMonsterBase : PMMonsterBase abstract
{
 Default
 {
  PMMonsterBase.Sin "Gluttony", "Red";
  TeleFogDestType "PM_GluttonyTeleportFog";
  TeleFogSourceType "PM_SmallDemonicTeleportFog";
 }
}

Class PMGreedMonsterBase : PMMonsterBase abstract
{
 Default
 {
  PMMonsterBase.Sin "Greed", "Green";
 }
}

Class PMWrathMonsterBase : PMMonsterBase abstract
{
  int pm_irecount;
  bool ire;
  
  Default
  {
  PMMonsterBase.Sin "Wrath", "Orange";
   PainChance "Fire", 0;
  }

 override void PM_Gib()
 {
  for(int i=random(4,5);i>0;i--)
  A_SpawnItemEx("PM_LavaMeatChunkLauncher",0,random(-20,20),random(10,15),0,0,0,0,SXF_NOCHECKPOSITION|SXF_ABSOLUTEVELOCITY);
  for(int i=random(3,5);i>0;i--)
  A_SpawnItemEx("PM_LavaBloodMulti",0,0,32,random(-1,1),random(-1,1),random(-1,1),frandom(0,360),SXF_NOCHECKPOSITION|SXF_ABSOLUTEVELOCITY);
 A_SpawnItemEx("PM_LavaBloodMist",0,0,32,random(-1,1),random(-1,1),random(-1,1),frandom(0,360),SXF_NOCHECKPOSITION|SXF_ABSOLUTEVELOCITY);
   A_StartSound("GBloodSplashBig",CHAN_7,CHANF_DEFAULT,0.75);
 }

 override void PM_Scream()
 {
  Super.PM_Scream();
  A_StopSound(19);
 }
   void PM_IreStartSound()
   {
	A_StartSound("Wrath/Ire",20,CHANF_DEFAULT,0.95,ATTN_NORM,frandom(-0.35,1));
	A_StartSound("Wrath/IreLoop",19,CHANF_LOOP);
   }
}

Class PMSlothMonsterBase : PMMonsterBase abstract
{
 Default
 {
  PMMonsterBase.Sin "Sloth", "Olive";
 }
}

Class PMEnvyMonsterBase : PMMonsterBase abstract
{
 Default
 {
  PMMonsterBase.Sin "Envy", "DarkGreen";
 }
}

Class PMPrideMonsterBase : PMMonsterBase abstract
{
 Default
 {
  PMMonsterBase.Sin "Pride", "DarkRed";
 }
}

//TIERS OF THE APOCALYPSE
Class PMPestilenceMonsterBase : PMMonsterBase abstract
{
 Default
 {
  PMMonsterBase.Sin "Pestilence", "DarkGreen";
 }

 override void PM_Gib()
 {
  for(int i=random(4,5);i>0;i--)
  A_SpawnItemEx("PM_PestilenceMeatChunkLauncher",0,random(-20,20),random(10,15),0,0,0,0,SXF_NOCHECKPOSITION|SXF_ABSOLUTEVELOCITY);
  for(int i=random(3,5);i>0;i--)
  A_SpawnItemEx("PM_PestilenceBloodMulti",0,0,32,random(-1,1),random(-1,1),random(-1,1),frandom(0,360),SXF_NOCHECKPOSITION|SXF_ABSOLUTEVELOCITY);
 A_SpawnItemEx("PM_PestilenceBloodMist",0,0,32,random(-1,1),random(-1,1),random(-1,1),frandom(0,360),SXF_NOCHECKPOSITION|SXF_ABSOLUTEVELOCITY);
   A_StartSound("GBloodSplashBig",CHAN_7,CHANF_DEFAULT,0.75);
 }
 
}

Class PMFamineMonsterBase : PMMonsterBase abstract
{
 Default
 {
  PMMonsterBase.Sin "Famine", "Tan";
 }
 
	void HandleEating(int maxHealth = 350)
	{
		if(Health > 0 && !isFrozen())
		{
			Actor a = GetCorpse(47, maxHealth);

			if(a && !eaten && !(GetAge() & random(10, 20)))
			{
				int victimbasehp = (int(ceil((a.SpawnHealth() * 0.65))));
				int newhp = self.health + victimbasehp;
					self.health = newhp;
				
				for(int i=0; i<2; i++){
				a.A_SpawnItemEx("PM_NormalBloodyCloud",0,0,20,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION|SXF_ABSOLUTEVELOCITY);
				 for(int gib=0; gib<5; gib++){a.A_SpawnItemEx("PM_NormalMeatChunkLauncher",0,0,random(10,30),0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION|SXF_ABSOLUTEVELOCITY);}
				 a.A_SpawnItemEx("PM_NormalInstestinGib",0,0,32,random(-10,10),random(-10,10),random(-10,10),frandom(0,360),SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION|SXF_ABSOLUTEVELOCITY);
				  }
				  a.A_StartSound("ArachExpGore",CHAN_6,CHANF_DEFAULT,0.65);
				  a.A_StartSound("GBloodSplashBig",CHAN_7,CHANF_DEFAULT,0.75);
				  
				a.A_Remove(AAPTR_DEFAULT);
				eaten = true;
				bNOPAIN = true;
				if (self.health > 0) SetStateLabel("Eat");
			}
		}
	}
	
	virtual Actor GetCorpse(int range, int maxHealth = 350)
	{
		BlockThingsIterator ti = BlockThingsIterator.Create(self, range);
		
		while (ti.Next())
		{
			let next = ti.Thing;

			if(next && self && next.Health <= 0 && next.GetMaxHealth() <= maxhealth && next.bISMONSTER && next != self &&
			self.CheckSight(next) && self.Distance3D(next) < range)
			{
				return next;
			}
		}

		return null;
	}
	
	bool eaten;
}

Class PMWarMonsterBase : PMMonsterBase abstract
{
 Default
 {
  PMMonsterBase.Sin "War", "Grey";
 }
}

Class PMDeathMonsterBase : PMMonsterBase abstract
{
 Default
 {
  PMMonsterBase.Sin "Death", "Sapphire";
 }
}

//ENDGAME
Class PMUmbralMonsterBase : PMMonsterBase abstract
{
 Default
 {
  PMMonsterBase.Sin "Umbral", "Black";
  PainChance "Ice", 0;
  DamageFactor "Ice", 0.1;
 }
}

Class PMVoidMonsterBase : PMMonsterBase abstract
{
 Default
 {
  -COUNTKILL
  +NOCLIP
  +NOBLOODDECALS
  +NOICEDEATH
  PMMonsterBase.ForgetThreshold 9999; //[NERU] they'll always remember you <3
  PMMonsterBase.Sin "Void", "Black";
 }
}