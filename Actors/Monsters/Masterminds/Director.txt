Class PM_Director : PMBossMonsterBase
{
    int misangle2;
    int misangle;
    int attackmode;
	int changecooldown;
	int uraniumcooldown;
	int rushcooldown;
	int summonocooldown;
	int stormcooldown;
	int buffcooldown;
	bool psi;
	//0 = Bullet
	//1 = Plasma
	//2 = Psychic
	Default
	{
		PMMonsterBase.CodexLore
		"Directors are the masterminds behind the invasion of Earth, embodying the humans' tactical and logical thinking in order to conduct every possible method of warfare to slam the resistance with until they are reduced to the small pockets they are now. Directors are concertmasters, and the legions of Hell are their orchestra.
		 When forced to engage in battle, however, they are not to be messed with despite their armor being slightly weaker than a Tyrant's. Their energy has not been tainted once since aging unlike its smaller brethren, and its large chariot has an arsenal that would put the Tyrant's to shame, were it not attached to a lousy platform.
		 
		 Their MO is overwhelming the player with their wider arsenal, usually lasting far longer than a typical Tyrant attack, but leaving it wide open as a consequence.";
		Health 3000;
		Radius 128;
		Height 100;
		Mass 2000;
		Speed 16;
		PainChance 1;
		Monster;
		Scale 1.1;
		+DONTHARMSPECIES
		+DONTHARMCLASS
		+NOFEAR
		+DONTRIP
		+BOSS
		+MissileMore
		+MISSILEevenMORE
		+FLOORCLIP
		+NORADIUSDMG
		+DONTMORPH
		+BOSSDEATH
		-QUICKTORETALIATE
		SeeSound "Director/Sight";
		AttackSound "Director/Attack";
		PainSound "Director/Pain";
		DeathSound "Director/Death";
		Obituary "%o was utterly liquidated by the Director's arsenal.";
		Tag "Director";
		Species "Mastermind";
		+DONTHARMSPECIES
		+DONTHARMCLASS
		Scale 1.1;
		MeleeRange 400;
		BloodType "PM_NormalTyrantBloodBase";
		TeleFogSourceType "PM_SmallDemonicTeleportFog";
		TeleFogDestType "PM_DemonicTeleportFog";
		StencilColor "3e2182";
	}
	
	override void PostbeginPlay()
	{
	 Super.PostBeginPlay();
	 tex[0] = TexMan.CheckForTexture("LENYA0",TexMan.Type_Sprite);
	 tex[1] = TexMan.CheckForTexture("GNSMK0",TexMan.Type_Sprite);
	 tex[2] = TexMan.CheckForTexture("DTPRR0",TexMan.Type_Sprite);
	 tex[3] = TexMan.CheckForTexture("REDLA0",TexMan.Type_Sprite);
	 tex[4] = TexMan.CheckForTexture("SPKRA0",TexMan.Type_Sprite);
	}
	
	TextureID tex[5];
	
	void PM_DirectorGAUSound()
	{
		A_StartSound("Director/GunStart",130);
		A_StartSound("Director/WindLoop",134,CHANF_LOOPING,pitch:0.85);
		A_StartSound("Bulltubus/IreWindLoop1",131,CHANF_LOOPING,0.75,attenuation:.7,pitch:1.85);
		A_StartSound("Bulltubus/IreWindLoop2",132,CHANF_LOOPING,0.75,attenuation:.7,pitch:1.25);
		A_StartSound("Bulltubus/IreGun",133,CHANF_LOOPING,1,.5,pitch:1.25);
	}
	
	void PM_DirectorUraniumGAUSound()
	{
		A_StartSound("Director/WindLoop",134,CHANF_LOOPING,attenuation:0.9,pitch:1.3);
		A_StartSound("Bulltubus/IreWindLoop1",131,CHANF_LOOPING,0.75,attenuation:.6,pitch:2.35);
		A_StartSound("Bulltubus/IreWindLoop2",132,CHANF_LOOPING,0.75,attenuation:.5,pitch:1.5);
		A_StartSound("Bulltubus/IreGun",133,CHANF_LOOPING|CHANF_OVERLAP,1,.35,pitch:1.75);
		A_StartSound("DComm/GunLoop",133,CHANF_LOOPING|CHANF_OVERLAP,1,.45,pitch:1.25);
		A_StartSound("Director/UraniumGun",133,CHANF_LOOPING|CHANF_OVERLAP,1,.45);
	}
	
	void PM_DirectorWarning()
	{
		FLineTraceData d;
		LineTrace(angle, 8192, pitch, TRF_NOSKY, 50, 0, 0, d);
	
		for (int i = 0; i < d.distance - 15; i += 15)
		{
			actor y = Actor(Spawn("PM_DirectorWarning", Level.Vec3Offset(d.HitLocation, d.HitDir * -i)));
			if (y && y.distance3D(self) < 55) { y.destroy(); return; }
		}
	}
  
	void PM_DirectorPlasmaSound()
	{
	 A_StartSound("Director/WindLoop",134,CHANF_LOOPING,pitch:0.85);
	 A_StartSound("Bulltubus/IreWindLoop1",131,CHANF_LOOPING,0.75,attenuation:.7,pitch:1.85);
	 A_StartSound("Bulltubus/IreWindLoop2",132,CHANF_LOOPING,0.75,attenuation:.7,pitch:1.25);
	}
	
	void PM_DirectorBulletCooldown()
	{
		A_SpawnParticleEx( "", tex[0], style: STYLE_Add, flags: SPF_RELATIVE|SPF_FULLBRIGHT,lifetime: 2, size: 130.0, xoff: 10, zoff: 50, startalphaf: 0.7 );
		A_SpawnParticleEx("8a8a8a",tex[1], style: STYLE_Normal, flags: SPF_RELATIVE|SPF_ROLL,lifetime: random(20,100), size: frandom(80,150), xoff: random(16,20),yoff: random(-5,5), zoff: 50, velx: frandom(-0.8,4), vely: frandom(-0.8,0.8), velz: frandom(-0.8,0.8),startalphaf: 0.3
		, fadestepf: -1, sizestep: 0.2, startroll: random(-180,180) );
		A_SpawnParticleEx("C8C8C8",tex[1], style: STYLE_Normal, flags: SPF_RELATIVE|SPF_ROLL,lifetime: random(80,160), size: 6, xoff: 10, yoff: random(-5,5), zoff: 50,vely: frandom(16,22), velz: frandom(-0.2,0.3), accely: -0.4, startalphaf: 0.5
		,fadestepf: -1, sizestep: 5, startroll: random(-180,180) );
		A_SpawnParticleEx("C8C8C8",tex[1], style: STYLE_Normal, flags: SPF_RELATIVE|SPF_ROLL,lifetime: random(80,160), size: 6, xoff: 10, yoff: random(-5,5), zoff: 50,vely: frandom(-16,-22), velz: frandom(-0.2,0.3), accely: 0.4, startalphaf: 0.5
		, fadestepf: -1,sizestep: 5, startroll: random(-180,180) );
	}
	
	void PM_DirectorBigPlasmaCharge()
	{
	   A_SpawnParticleEx( "", tex[2], style: STYLE_Add, flags: SPF_RELATIVE|SPF_ROLL|SPF_FULLBRIGHT,lifetime: random(20,100), size: frandom(80,150), xoff: random(16,20),yoff: random(-5,5), zoff: 50, velx: frandom(-0.10,0.10), vely: frandom(-0.10,0.10), velz: frandom(-0.10,0.10),startalphaf: 0.55
	   , fadestepf: -1, sizestep: 0.2, startroll: random(-180,180) );
	  if(random(1,3) == 1)
	   { A_SpawnParticleEx( "", tex[3], style: STYLE_Add, flags: SPF_FULLBRIGHT|SPF_RELATIVE|SPF_ROLL,lifetime: random(35,80), size: frandom(85,150), xoff: 10, yoff: random(-5,5), zoff: 50,velx: frandom(-0.1,0.1), vely: frandom(0.1,0.1), velz: frandom(-0.1,0.1), startalphaf: frandom(0.5,0.95)
	   ,fadestepf: -1, sizestep: -2.55, startroll: random(-180,180), rollvel: random(-30,30)); }
	}
	
	void PM_DirectorLaserCharge()
	{
	  A_SpawnParticleEx( "", tex[4], style: STYLE_Add, flags: SPF_RELATIVE|SPF_ROLL|SPF_FULLBRIGHT,lifetime: 200, size: 750, xoff: 20, zoff: 50, velx: frandom(-0.10,0.10), vely: frandom(-0.10,0.10), velz: frandom(-0.10,0.10),startalphaf: 1
	  , fadestepf: -1.85, sizestep: -8.55, startroll: random(-180,180), rollvel: 5, rollacc: 1.65 );
	  A_SpawnParticleEx( "", tex[2], style: STYLE_Add, flags: SPF_RELATIVE|SPF_ROLL|SPF_FULLBRIGHT,lifetime: 250, size: 800, xoff: random(16,20),yoff: random(-5,5), zoff: 50, velx: frandom(-0.10,0.10), vely: frandom(-0.10,0.10), velz: frandom(-0.10,0.10),startalphaf: 0.95
	  , fadestepf: -1.85, sizestep: -9.95, startroll: random(-180,180), rollvel: -5, rollacc: -0.65 );
	  A_SpawnParticleEx( "", tex[2], style: STYLE_Add, flags: SPF_RELATIVE|SPF_ROLL|SPF_FULLBRIGHT,lifetime: 100, size: 150, xoff: random(16,20),yoff: random(-5,5), zoff: 50, velx: frandom(-0.10,0.10), vely: frandom(-0.10,0.10), velz: frandom(-0.10,0.10),startalphaf: 0.95
	  , fadestepf: -1.85, sizestep: 12.95, startroll: random(-180,180), rollvel: -5, rollacc: -0.65 );
	}

	void PM_DirectorBFGCharge()
	{
	  A_SpawnParticleEx( "", tex[4], style: STYLE_Add, flags: SPF_RELATIVE|SPF_ROLL|SPF_FULLBRIGHT,lifetime: 100, size: 450, xoff: 20, zoff: 50, velx: frandom(-0.10,0.10), vely: frandom(-0.10,0.10), velz: frandom(-0.10,0.10),startalphaf: 1
	  , fadestepf: -1.85, sizestep: -12.55, startroll: random(-180,180), rollvel: 6, rollacc: 1.65 );
	  A_SpawnParticleEx( "", tex[2], style: STYLE_Add, flags: SPF_RELATIVE|SPF_ROLL|SPF_FULLBRIGHT,lifetime: 50, size: 500, xoff: random(16,20),yoff: random(-5,5), zoff: 50, velx: frandom(-0.10,0.10), vely: frandom(-0.10,0.10), velz: frandom(-0.10,0.10),startalphaf: 0.95
	  , fadestepf: -1.85, sizestep: -12.95, startroll: random(-180,180), rollvel: -5, rollacc: -0.65 );
	}
	
	
	void PM_DirectorPsiFX()
	{
		if (!random(0, 1)) A_SpawnParticleEx("2f1085", tex[1], STYLE_Add, SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL, random(100, 400), random(40,200), xoff: frandom(-100, 100), yoff: frandom(-100, 100), zoff: 50 + frandom(-20, 20), velx: frandom(-1, 1), vely: frandom(-1, 1), velz: frandom(-.51, .51), startalphaf: frandom(0.4, 0.6), sizestep: frandom(0, 2), startroll: random(-180,180), rollvel: frandom(-4, 4));
		if (!random(0, 3)) A_SpawnParticleEx("", TexMan.CheckForTexture("PURLA0"), style: STYLE_Add, flags: SPF_ROLL|SPF_RELATIVE|SPF_FULLBRIGHT, lifetime: random(1,25), size: frandom(1,300), xoff: frandom(-60,60), yoff: frandom(-60,60), zoff: frandom(40,110), velx: random(-1,1), vely: random(-1,1), velz: random(-1,1), startalphaf:frandom(0.1, 0.5)
		, fadestepf: -1, sizestep: frandom(-5,5), startroll: random(-180,180), rollvel: frandom(-2,2));
	}
	
	void PM_DirectorPsiCast()
	{
		A_SpawnParticleEx("351c6b", tex[1], STYLE_Add, SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL, random(300, 700), random(40,200), xoff: frandom(-100, 100), yoff: frandom(-100, 100), zoff: 30 + frandom(-20, 20), velx: frandom(-1, 1), vely: frandom(-1, 1), velz: frandom(-.51, .51), startalphaf: frandom(0.4, 0.6), sizestep: frandom(0, 2), startroll: random(-180,180), rollvel: frandom(-4, 4));
		A_SpawnParticleEx("", TexMan.CheckForTexture("PURLA0"), style: STYLE_Add, flags: SPF_ROLL|SPF_RELATIVE|SPF_FULLBRIGHT, lifetime: random(1,25), size: frandom(1,300), xoff: frandom(-60,60), yoff: frandom(-60,60), zoff: frandom(40,110), velx: random(-1,1), vely: random(-1,1), velz: random(-1,1), startalphaf:frandom(0.1, 0.5)
		, fadestepf: -1, sizestep: frandom(-5,5), startroll: random(-180,180), rollvel: frandom(-2,2));
	}
	
	void PM_DirectorPsiRise()
	{
		A_SpawnParticleEx("351c6b", tex[1], STYLE_Add, SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL, random(100, 80), random(20,100), xoff: 30 + random(-15, 15), yoff: frandom(-15, 15), velx: frandom(-1, 1), vely: frandom(-1, 1), velz: frandom(0.1, 2), startalphaf: frandom(0.5, 1), sizestep: frandom(0, 1), startroll: random(-180,180), rollvel: frandom(-4, 4));
		A_SpawnParticleEx("", TexMan.CheckForTexture("R0K_B0"), STYLE_Normal, SPF_RELATIVE|SPF_ROLL, random(40, 80), random(5,25), xoff: 110 + random(-35, 35), yoff: frandom(-35, 35), velx: frandom(-2, 2), vely: frandom(-2, 2), velz: frandom(0.1, 5), accelz: -0.08, startalphaf: frandom(0.5, 1), sizestep: -.1, startroll: random(-180,180), rollvel: frandom(-4, 4));
		A_SpawnParticleEx("", TexMan.CheckForTexture("PURLA0"), style: STYLE_Add, flags: SPF_ROLL|SPF_RELATIVE|SPF_FULLBRIGHT, lifetime: random(1,25), size: frandom(1,300), xoff: frandom(-60,60), yoff: frandom(-60,60), zoff: frandom(40,110), velx: random(-1,1), vely: random(-1,1), velz: random(-1,1), startalphaf:frandom(0.1, 0.5)
		, fadestepf: -1, sizestep: frandom(-5,5), startroll: random(-180,180), rollvel: frandom(-2,2));
	}
	
	void PM_DirectorBuff()
	{
		PM_DirectorPsiCast();
		A_SpawnParticleEx("2f1085", tex[1], STYLE_Add, SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL, random(100, 400), random(40,200), xoff: frandom(-700, 700), yoff: frandom(-700, 700), velx: frandom(-1, 1), vely: frandom(-1, 1), velz: frandom(-.51, .51), startalphaf: frandom(0.4, 0.6), sizestep: frandom(0, 2), startroll: random(-180,180), rollvel: frandom(-4, 4));
		A_SpawnParticleEx("", TexMan.CheckForTexture("SPKPA0"), STYLE_Add, SPF_RELATIVE|SPF_ROLL, random(55, 110), random(5,25), xoff: random(-735, 735), yoff: frandom(-735, 735), velx: frandom(-1, 1), vely: frandom(-1, 1), velz: frandom(0.1, 5), accelz: 0.08, sizestep: -.5, startroll: random(-180,180), rollvel: frandom(-4, 4));
		if (!(GetAge() % 9)) A_SpawnParticleEx("", TexMan.CheckForTexture("SPKPA0"), STYLE_Add, SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL, 30, 100, xoff: 30, zoff: 80, sizestep: 12);
	}
	
	override void Tick()
	{
		super.Tick();
		if (attackmode == 1 && health > 0 && !level.isFrozen() && psi) PM_DirectorPsiFX();
		if (uraniumcooldown >= 0) uraniumcooldown--;
		if (rushcooldown >= 0) rushcooldown--;
		if (summonocooldown >= 0) summonocooldown--;
		if (stormcooldown >= 0) stormcooldown--;
		if (buffcooldown >= 0) buffcooldown--;
	}
	
	States
	{
	Spawn:
	    DIRE A 0 NoDelay { 
	    	attackmode = 0;
			if (attackmode == 1) psi = true;
	    	changecooldown = 210; 
	    }
	Idle:
		DIRE A 10
		{
			A_StopSounds(129, 560);
			A_Look();
		}
		Loop;
	See:
		TNT1 A 0;
		TNT1 A 0 { if (attackmode == 1) SetStateLabel("SeePsy"); }
		DIRE A 0 { A_StopSounds(52, 135); bNOPAIN = false; }
		DIRE A 7 A_Chase(flags:CHF_DONTMOVE);
		DIRE A 0 A_StartSound("Director/Servo",CHAN_5,CHANF_OVERLAP);
		DIRE ABBCC 4 { A_Chase(); if(changecooldown) changecooldown--; if(psi) A_SpawnProjectile("PM_DirectorPsiDischarge",random(50,200),random(-180,180),frandom(-180,180),CMF_AIMDIRECTION|CMF_OFFSETPITCH,frandom(-90,90)); }
		DIRE A 0 A_Quake(2, 4, 0, 412);
		DIRE A 0 A_StartSound("Director/Step",CHAN_5,CHANF_OVERLAP);
		DIRE A 0 A_StartSound("Director/Stomp",25,CHANF_OVERLAP);
		DIRE D 7 A_Chase(flags:CHF_DONTMOVE);
		DIRE D 0 A_StartSound("Director/Servo",CHAN_5,CHANF_OVERLAP);
		DIRE DEEFF 4 { A_Chase(); if(changecooldown) changecooldown--; if(psi) A_SpawnProjectile("PM_DirectorPsiDischarge",random(50,200),random(-180,180),frandom(-180,180),CMF_AIMDIRECTION|CMF_OFFSETPITCH,frandom(-90,90)); }
		DIRE A 0 A_Quake(2, 4, 0, 412);
		DIRE A 0 A_StartSound("Director/Step",CHAN_5,CHANF_OVERLAP);
		DIRE A 0 A_StartSound("Director/Stomp",25,CHANF_OVERLAP);
		//TNT1 A 0 A_Jump(85,"ModeCheck");
		TNT1 A 0 { if (attackmode == 1 && !random(0, 4) && rushcooldown <= 0) SetStateLabel("PsychicRush"); }
		Loop;
	SeePsy:
		DIRE A 0 { A_StopSounds(52, 135); bNOPAIN = false; }
		DIRE A 3 A_Chase(flags:CHF_DONTMOVE);
		//DIRE A 0 A_StartSound("Director/Servo",CHAN_5,CHANF_OVERLAP);
		DIRE ABBCC 3 { if (!random(0, 10)) A_SpawnProjectile("PM_DirectorPsychicLightning", 10, 0, frandom(0, 360), CMF_AIMDIRECTION); A_SpawnItemEx("PM_GenericPhaseGhost",flags:SXF_TRANSFERSTENCILCOL|SXF_TRANSFERALPHA|SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERSCALE); A_Chase(); if(changecooldown) changecooldown--; if(psi) A_SpawnProjectile("PM_DirectorPsiDischarge",random(50,200),random(-180,180),frandom(-180,180),CMF_AIMDIRECTION|CMF_OFFSETPITCH,frandom(-90,90)); }
		DIRE A 0 A_Quake(2, 4, 0, 412);
		//DIRE A 0 A_StartSound("Director/Step",CHAN_5,CHANF_OVERLAP);
		DIRE A 0 A_StartSound("Director/Stomp",25,CHANF_OVERLAP,pitch:1.2);
		DIRE D 3 A_Chase(flags:CHF_DONTMOVE);
		//DIRE D 0 A_StartSound("Director/Servo",CHAN_5,CHANF_OVERLAP);
		DIRE DEEFF 3 { if (!random(0, 10)) A_SpawnProjectile("PM_DirectorPsychicLightning", 10, 0, frandom(0, 360), CMF_AIMDIRECTION); A_SpawnItemEx("PM_GenericPhaseGhost",flags:SXF_TRANSFERSTENCILCOL|SXF_TRANSFERALPHA|SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERSCALE); A_Chase(); if(changecooldown) changecooldown--; if(psi) A_SpawnProjectile("PM_DirectorPsiDischarge",random(50,200),random(-180,180),frandom(-180,180),CMF_AIMDIRECTION|CMF_OFFSETPITCH,frandom(-90,90)); }
		DIRE A 0 A_Quake(2, 4, 0, 412);
		//DIRE A 0 A_StartSound("Director/Step",CHAN_5,CHANF_OVERLAP);
		DIRE A 0 A_StartSound("Director/Stomp",25,CHANF_OVERLAP,pitch:1.2);
		TNT1 A 0 { if (attackmode == 1 && !random(0, 4) && rushcooldown <= 0) SetStateLabel("PsychicRush"); }
		Loop;
    ModeCheck:
	    TNT1 A 0;
	    TNT1 A 0 { 
		if(changecooldown)
		SetStateLabel("See");
		bNOPAIN = true; }
	ModeChange:
	    TNT1 A 0 A_StartSound("Director/ModeChange",45);
	    DIRE G 100 {
		switch(attackmode)
		{
			case 0: attackmode = 1; break;
			case 1: attackmode = 0; break;
		}
		A_FaceTarget(); psi = false; }
		TNT1 A 0
		{
		 switch(attackmode)
		 {
			case 0: A_StartSound("Director/ModeBullet",46); A_StopSound(48); break;
			case 1: A_StartSound("Director/ModePsychic",46); psi = true; A_StartSound("SoulReaver/Amb1", 48, CHANF_LOOPING|CHANF_OVERLAP); break;
		 }
		 
		 changecooldown = 500;
		}
		DIRE G 55 A_FaceTarget();
		TNT1 A 0 { bNOPAIN = false; 
		if(target && CheckSight(target) && random(1,3) == 1)
		SetStateLabel("Missile");
		}
		Goto See;
	Missile:
	    TNT1 A 0 
		{
		 if(changecooldown <= 0 && !random(0, 1)) { bNOPAIN = true; SetStateLabel("ModeChange"); }
		}
		TNT1 A 0
		{
		 switch(attackmode)
		 {
			case 0: SetStateLabel("BulletMissile"); break;
			case 1: SetStateLabel("PsiMissile"); break;
		 }
		}
		Goto See;
	BulletMissile:
		TNT1 A 0 A_Jump(80,"UraniumA10","Autocannon");
	    TNT1 A 0 A_Jump(56,"ARM","BigPlasmaGun"); //All-Radial Missile
	    TNT1 A 0 A_Jump(95,"AirStrike","Gigalaser");
		TNT1 A 0 A_Jump(256,"GAU8","PlasmaGun","Autocannon");
		Goto See;
	PsiMissile:
		TNT1 A 0 A_Jump(20,"HeavyStorm");
		TNT1 A 0 A_Jump(56, "PsychicRush", "BuffCheck");
		TNT1 A 0 A_Jump(75, "Hallucinations","PsiChasers");
		//TNT1 A 0 A_Jump(95, "PsychicBeam");
		Goto RockThrow;
	Autocannon:
		DIRE G 1 A_FaceTarget();
		DIRE G 0
		{
			pm_attackloop = random(3,12);
			A_StartSound("Nailgunner/Charge",CHAN_WEAPON, pitch: 0.9);
		}
		DIRE GGGGGG 5 A_FaceTarget();
		DIRE G 1
		{
		A_SetAngle(angle+random(-20,20));
	    A_SetPitch(pitch+random(-10,10));
		}
		TNT1 A 0 { changecooldown -= random(10, 60); }
	AutocannonLoop:
		DIRE H 2 Light("TyrantFire")
		{
			pm_attackloop--;
			A_FaceTarget(12, 90);
			A_Quake(random(1, 3), 10, 0, 1000);
			A_StartSound("Sybarite/Autocannon",11);
			A_StartSound("GunnerRifleDistant",12,CHANF_OVERLAP);
			A_SpawnProjectile("PM_DirectorAutocannonracer",55,0,frandom(-2,2),CMF_AIMDIRECTION|CMF_OFFSETPITCH,pitch+frandom(-2,2));
			if (pm_attackloop <= 0) SetStateLabel("See");
			if (target && (!CheckSight(target) || target.Health <= 0)) SetStateLabel("See");
		}
		DIRE G 8;
		Loop;
	Melee:
		DIRE G 0 A_StartSound("Nailgunner/Charge",CHAN_WEAPON, pitch: 0.9);
		DIRE G 1 A_FaceTarget();
		DIRE G 18;
		DIRE H 2 Light("TyrantFire")
		{
			pm_attackloop--;
			A_FaceTarget(12, 90);
			A_Quake(random(1, 3), 10, 0, 1000);
			A_StartSound("Sybarite/Autocannon",11,CHANF_OVERLAP,pitch:0.8);
			A_StartSound("Bulltubus/Shotgun",15,CHANF_OVERLAP,pitch:0.8);
			A_StartSound("GunnerRifleDistant",12,CHANF_OVERLAP,pitch:0.8);
			A_RadiusThrust(7000,350);
			A_SpawnProjectile("PM_DirectorAutocannonracer",55,0,frandom(-10,1),CMF_AIMDIRECTION|CMF_OFFSETPITCH,pitch+frandom(-10,10));
			A_SpawnProjectile("PM_DirectorAutocannonracer",55,0,frandom(-10,1),CMF_AIMDIRECTION|CMF_OFFSETPITCH,pitch+frandom(-10,10));
			A_SpawnProjectile("PM_DirectorAutocannonracer",55,0,frandom(-10,1),CMF_AIMDIRECTION|CMF_OFFSETPITCH,pitch+frandom(-10,10));
			A_SpawnProjectile("PM_DirectorAutocannonracer",55,0,frandom(-10,1),CMF_AIMDIRECTION|CMF_OFFSETPITCH,pitch+frandom(-10,10));
			A_SpawnProjectile("PM_DirectorAutocannonracer",55,0,frandom(-10,1),CMF_AIMDIRECTION|CMF_OFFSETPITCH,pitch+frandom(-10,10));
			A_SpawnProjectile("PM_DirectorAutocannonracer",55,0,frandom(-10,1),CMF_AIMDIRECTION|CMF_OFFSETPITCH,pitch+frandom(-10,10));
			A_SpawnProjectile("PM_DirectorAutocannonracer",55,0,frandom(-10,1),CMF_AIMDIRECTION|CMF_OFFSETPITCH,pitch+frandom(-10,10));
		}
		DIRE G 8;
		Goto See;
	ARM:
	    TNT1 A 0 { misangle = 15; pm_attackloop = 30; }
		DIRE G 0 
		{
		A_StartSound("Tyrant/ShellLoad",23);
		A_StartSound("Director/ASPodExtend",24);
		}
	    DIRE GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG 1 Light("TyrantFire") A_FaceTarget();
	ArmLoop:
	    DIRE G 3 Light("TyrantFire")
		{
		 if(pm_attackloop <= 0)
		 SetStateLabel("AttackEnd");
		 A_StartSound("Fiend/HomingFire",28);
		 A_SpawnProjectile("PM_DirectorMissile",56,0,-misangle,CMF_AIMDIRECTION|CMF_OFFSETPITCH,10);
		 misangle += 20;
		 pm_attackloop--;
		}
		Loop;
	AirStrike:
	    TNT1 A 0 { pm_attackloop = random(5,13); }
		DIRE G 0 A_StartSound("Director/ASPodExtend",24);
		DIRE GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG 1 Light("TyrantFire") A_FaceTarget();
	ASLoop:
	    DIRE G random(1,15) Light("TyrantFire")
		{
		 if(pm_attackloop <= 0)
		 SetStateLabel("AttackEnd");
		 A_FaceTarget(2,2);
		 A_StartSound("Director/AStrikeShot",20,CHANF_OVERLAP);
		 A_SpawnProjectile("PM_DirectorAStrikeShotTell",45,-25,frandom(40,60),CMF_AIMDIRECTION|CMF_OFFSETPITCH,frandom(-30,-55));
		}
		DIRE G random(1,15) Light("TyrantFire")
		{
		A_StartSound("Director/AStrikeShot",20,CHANF_OVERLAP);
		A_SpawnProjectile("PM_DirectorAStrikeShotTell",45,25,frandom(-40,-60),CMF_AIMDIRECTION|CMF_OFFSETPITCH,frandom(-30,-55));
		pm_attackloop--;
		}
		Loop;
	AttackEnd:
		TNT1 A 0 { changecooldown -= random(10, 80); }
	    DIRE G random(45,65) A_FaceTarget(2,2);
		Goto See;
	GAU8:
	    TNT1 A 0;
	    TNT1 A 0 A_Jump(85,"GAUBurst");
		DIRE G 0 A_StartSound("Director/Screech",CHAN_VOICE);
		DIRE G 1 
		{
		A_SetAngle(angle+random(-30,30));
	    A_SetPitch(pitch+random(-15,30));
		}
		DIRE GGGGGGGGGGGGGGGGGGGGG 1 A_FaceTarget();
		DIRE G 0 A_StartSound("Director/WindUp",50,CHAN_OVERLAP,1);
		DIRE GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG 1 Light("TyrantFire") A_FaceTarget();
		DIRE G 0 Light("TyrantFire")
		{
			pm_attackloop = random(200, 300);
			PM_DirectorGAUSound();
		}
		DIRE HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH 2 Light("TyrantFire")
		{
			A_FaceTarget(2,2);
			A_Quake(random(1, 3), 10, 0, 1000);
			A_SpawnProjectile("PM_DirectorTracer",55,0,frandom(-2,2),CMF_AIMDIRECTION|CMF_OFFSETPITCH,pitch+frandom(-2,2));
		}
		DIRE G 0 Light("TyrantFire") A_StartSound("Director/GunLoop",134,CHANF_LOOPING);
		Goto GAULoop;
	GAULoop:
		DIRE H 2 Light("TyrantFire")
		{
			pm_attackloop--;
			A_FaceTarget(2, 2);
			A_Quake(random(1, 3), 10, 0, 1000);
			A_SpawnProjectile("PM_DirectorTracer",55,0,frandom(-2,2),CMF_AIMDIRECTION|CMF_OFFSETPITCH,pitch+frandom(-2,2));
			if (pm_attackloop <= 0) SetStateLabel("Cooldown");
			if (target && (!CheckSight(target) || target.Health <= 0)) SetStateLabel("Cooldown");
		}
		Loop;
	GAUBurst:
		DIRE G 0 A_StartSound("Director/Screech",CHAN_VOICE);
		DIRE G 1 
		{
		  A_SetAngle(angle+random(-30,30));
	      A_SetPitch(pitch+random(-15,30));
		}
		DIRE GGGGGGGGGGGG 1 A_FaceTarget();
		DIRE G 0 A_StartSound("Director/WindUp",50,CHAN_OVERLAP,1);
		DIRE GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG 1 Light("TyrantFire") A_FaceTarget();
		DIRE G 0 Light("TyrantFire") PM_DirectorGAUSound();
		DIRE HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH 2 Light("TyrantFire")
		{
			A_FaceTarget(2,2);
			A_Quake(random(1, 3), 10, 0, 1000);
			A_SpawnProjectile("PM_DirectorTracer",55,0,frandom(-2,2),CMF_AIMDIRECTION|CMF_OFFSETPITCH,pitch+frandom(-2,2));
		}
		Goto Cooldown;
	Cooldown:
		TNT1 A 0 A_StartSound("Director/GunStop",20);
		DIRE A 1 A_StopSounds(129, 135);
		TNT1 A 0 A_StartSound("PM/ArachnoCooldown",21,attenuation:0.6,pitch:0.45);
		TNT1 A 0 { changecooldown -= random(10, 60); }
		DIRE GGGGGGGGGGGGGGGGGGGGGGGGGGGG 1 PM_DirectorBulletCooldown();
		Goto See;
	UraniumA10:
	    TNT1 A 0;
		TNT1 A 0 { if (uraniumcooldown > 0) SetStateLabel("GAU8"); }
		DIRE G 0
		{
			bNOPAIN = true;
			 A_FaceTarget();
			 A_StartSound("Director/WindUp",50,CHANF_OVERLAP,pitch:0.74);
			 A_StartSound("Director/UraniumWarn",50,CHANF_OVERLAP);
		}
		DIRE GG 1 A_FaceTarget();
		DIRE GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG 1 Light("TyrantFire") PM_DirectorWarning();
		DIRE G 0 Light("TyrantFire")
		{
			pm_attackloop = random(30,50);
			A_StopSound(50);
			PM_DirectorUraniumGAUSound();
		}
		Goto A10Loop;
	A10Loop:
		DIRE H 1 Light("TyrantFire")
		{
			A_Quake(8, 10, 0, 500);
			A_Quake(4, 10, 0, 1500);
			A_SpawnProjectile("PM_DirectorUraniumTracer",55,frandom(-5,5),frandom(-4,4),CMF_AIMDIRECTION|CMF_OFFSETPITCH,pitch+frandom(-4,4));
			A_SpawnProjectile("PM_DirectorUraniumTracer",55,frandom(-5,5),frandom(-4,4),CMF_AIMDIRECTION|CMF_OFFSETPITCH,pitch+frandom(-4,4));
			A_SpawnProjectile("PM_DirectorUraniumTracer",55,frandom(-5,5),frandom(-4,4),CMF_AIMDIRECTION|CMF_OFFSETPITCH,pitch+frandom(-4,4));
			A_SpawnProjectile("PM_DirectorUraniumTracer",55,frandom(-5,5),frandom(-4,4),CMF_AIMDIRECTION|CMF_OFFSETPITCH,pitch+frandom(-4,4));
			pm_attackloop--;
			
			if (pm_attackloop <= 0) SetStateLabel("A10Cooldown");
		}
		Loop;
	A10Cooldown:
		TNT1 A 0 A_StartSound("Director/UraniumGunStop",20);
		DIRE A 1 A_StopSounds(129, 135);
		TNT1 A 0 A_StartSound("PM/ArachnoCooldown",21,attenuation:0.6,pitch:0.4);
		TNT1 A 0 { changecooldown -= random(20, 90); }
		DIRE GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG 1 PM_DirectorBulletCooldown();
		DIRE G 0 { bNOPAIN = false; uraniumcooldown = random(1000, 2000); }
		Goto See;
	Gigalaser:
	    TNT1 A 0;
		TNT1 A 0 A_Jump(80,"UraniumA10","Autocannon","GAU8","PlasmaGun");
		DIRE G 0 A_StartSound("Director/GLaserCharge",61);
		DIRE T 1 { A_FaceTarget(); PM_DirectorLaserCharge(); }
		DIRE TTTTTTTTTTTTTT 1 Light("ShadowBall2");
		DIRE G 0 { pm_attackloop = random(300,400); }
		DIRE TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT 1 Light("ShadowBall3") 
		{
		  A_FaceTarget(0.85,0.85);
		  PM_DirectorBigPlasmaCharge();
		}
		DIRE G 0 
		{
	      A_SetPitch(pitch+random(-15,30));
		}
		TNT1 A 0 {
	    A_StartSound("Director/GLaserLoopStart",52); 
		A_StartSound("Director/WindLoop",54,CHANF_LOOPING,pitch:0.85);
		A_StartSound("Bulltubus/IreWindLoop1",55,CHANF_LOOPING,0.75,attenuation:.7,pitch:1.85);
		A_StartSound("Bulltubus/IreWindLoop2",56,CHANF_LOOPING,0.75,attenuation:.7,pitch:1.25);}
		DIRE UUUUUUUUUUUUUUUUUUUUUUUUUUUUU 1 Light("ShadowBall3")
		{
			A_FaceTarget(0.1,0.1);
			A_QuakeEx(3,3,3,10,0,700,"",QF_RELATIVE|QF_SCALEDOWN|QF_3D,rollintensity:0.8,rollwave:0.8);
			A_SpawnProjectile("PM_DirectorPlasmaLaser",55,0,0,CMF_AIMDIRECTION|CMF_OFFSETPITCH,pitch+frandom(-0.1,0.1));
		}
		DIRE G 0 Light("TyrantFire") A_StartSound("Director/GLaserLoop",53,CHANF_LOOPING);
		Goto GigalaserLoop;
	GigaLaserLoop:
		DIRE U 1 Light("ShadowBall3")
		{
		    pm_attackloop--;
			A_FaceTarget(0.4,0.25);
			A_QuakeEx(3,3,3,10,0,900,"",QF_RELATIVE|QF_SCALEDOWN|QF_3D,rollintensity:0.8,rollwave:0.8);
			A_SpawnProjectile("PM_DirectorPlasmaLaser",55,0,0,CMF_AIMDIRECTION|CMF_OFFSETPITCH,pitch+frandom(-0.1,0.1));
			if (pm_attackloop <= 0) SetStateLabel("GLCooldown");
			if (target && !CheckSight(target)) SetStateLabel("GigaLaserWait");
			if (target && target.health <= 0) SetStateLabel("GLCooldown");
		}
		Loop;
	GigaLaserWait:
	    TNT1 A 0 { A_StopSound(53); A_StartSound("Director/GLaserLoop",53,CHANF_LOOPING,volume:0.3); }
		DIRE TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT 1 Light("ShadowBall3") 
		{
		pm_attackloop--;
		A_FaceTarget(0.85,0.85);
		if (pm_attackloop <= 0) SetStateLabel("GLCooldown");
		if (target && target.health <= 0) SetStateLabel("GLCooldown");
		}
		TNT1 A 0 A_StartSound("Director/GLaserBeep",56);
        TNT1 A 0 A_JumpIfTargetInLOS("GigaLaserRestart",80,JLOSF_DEADNOJUMP);
		Goto GigaLaserWait+1;
	GigaLaserRestart:
	    DIRE A 0 { A_StopSound(50); A_StartSound("Director/GLaserRestart",61); }
		DIRE TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT 1 Light("ShadowBall3") 
		{
		  A_FaceTarget(0,0);
		  PM_DirectorBigPlasmaCharge();
		  A_SpawnParticleEx("ef2929",tex[1], style: STYLE_Add, flags: SPF_FULLBRIGHT|SPF_RELATIVE|SPF_ROLL,lifetime: random(20,120), size: frandom(80,150), xoff: random(16,20),yoff: random(-5,5), zoff: 50, velx: frandom(10,25), vely: frandom(-0.8,0.8), velz: frandom(-0.8,0.8),startalphaf: 0.3
		  , fadestepf: -1, sizestep: 0.2, startroll: random(-180,180) );
		}
		TNT1 A 0 { A_StopSound(53); A_StartSound("Director/GLaserLoop",53,CHANF_LOOPING); }
		DIRE G 0 
		{
		A_SetAngle(angle+random(-30,30));
		}
		DIRE UUUUUUUUUUUUUUUUUUUU 1 Light("ShadowBall3")
		{
			A_FaceTarget(0.1,0.1);
			A_QuakeEx(3,3,3,10,0,900,"",QF_RELATIVE|QF_SCALEDOWN|QF_3D,rollintensity:0.8,rollwave:0.8);
			A_SpawnProjectile("PM_DirectorPlasmaLaser",55,0,0,CMF_AIMDIRECTION|CMF_OFFSETPITCH,pitch+frandom(-0.1,0.1));
		}
		Goto GigalaserLoop;
	GLCooldown:
	    TNT1 A 0 A_StopSounds(52,56);
		TNT1 A 0 A_StartSound("Director/GLaserEnd",20);
		TNT1 A 0 A_StartSound("PM/ArachnoCooldown",21,attenuation:0.6,pitch:0.45);
		TNT1 A 0 { changecooldown -= random(10, 60); }
		DIRE GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG 1
		{
			A_SpawnParticleEx( "", tex[2], style: STYLE_Add, flags: SPF_RELATIVE|SPF_FULLBRIGHT,lifetime: 2, size: 130.0, xoff: 10, zoff: 50, startalphaf: 0.8 );
			A_SpawnParticleEx("ef2929",tex[1], style: STYLE_Add, flags: SPF_FULLBRIGHT|SPF_RELATIVE|SPF_ROLL,lifetime: random(20,120), size: frandom(80,150), xoff: random(16,20),yoff: random(-5,5), zoff: 50, velx: frandom(1,8), vely: frandom(-0.8,0.8), velz: frandom(-0.8,0.8),startalphaf: 0.3
			, fadestepf: -1, sizestep: 0.2, startroll: random(-180,180) );
		}
		Goto See;
	BigPlasmaGun:
	    TNT1 A 0;
		DIRE G 0 A_StartSound("Director/Screech",CHAN_VOICE);
		DIRE T 1 
		{
		  A_SetAngle(angle+random(-30,30));
	      A_SetPitch(pitch+random(-10,-5));
		}
		DIRE TTTTTTTTTTTTTTTTTTTTTTTT 1 A_FaceTarget();
		DIRE G 0 
		{
		  pm_attackloop = random(1,2);
		  A_StartSound("Draugr/GunAim",50,CHAN_OVERLAP,1,pitch:0.75);
		  A_StartSound("Plasmatron/MortarCharge",51,pitch:0.85);
		}
		DIRE TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT 1 Light("ShadowBall3") 
		{
		  A_FaceTarget();
		  PM_DirectorBigPlasmaCharge();
		}
		DIRE T 40 Light("ShadowBall4")
		{
		  A_FaceTarget();
		  PM_DirectorBFGCharge();
		  A_StartSound("PM/BigElectricCharge",25,pitch:0.75);
		}
	BPGLoop:
		DIRE U 15 Light("ShadowBall4")
		{
			pm_attackloop--;
			A_FaceTarget(2.7,2.7);
			A_Quake(random(1, 3), 10, 0, 1000);
			A_StartSound("Director/BigPlasma",25,pitch:frandom(0.95,1.15));
			A_SpawnProjectile("PM_DirectorBFGBall",55,0,frandom(-2,2),CMF_AIMDIRECTION|CMF_OFFSETPITCH,pitch+frandom(-0.25,-0.5));
			if (pm_attackloop <= 0) SetStateLabel("AttackEnd");
			if (target && (!CheckSight(target) || target.Health <= 0)) SetStateLabel("AttackEnd");
		}
		TNT1 A 0 A_StartSound("Plasmatron/MortarCharge",51,pitch:0.85);
		DIRE UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU 1 Light("ShadowBall4")
		{
		  A_FaceTarget(2,2);
		  PM_DirectorBigPlasmaCharge();
		}
		DIRE U 40 Light("ShadowBall4")
		{
		  PM_DirectorBFGCharge();
		  A_StartSound("PM/BigElectricCharge",25,pitch:0.75);
		}
		Loop;
	PlasmaGun:
	    TNT1 A 0;
		DIRE G 0 A_StartSound("Director/Screech",CHAN_VOICE);
		DIRE T 1 
		{
		  A_SetAngle(angle+random(-30,30));
	      A_SetPitch(pitch+random(-15,30));
		}
		DIRE TTTTTT 1 A_FaceTarget();
		DIRE G 0 
		{
		  pm_attackloop = random(45,100);
		  A_StartSound("Director/WindUp",50,CHAN_OVERLAP,1);
		}
		DIRE TTTTTTTTTTTTTTTTTTTTTTTTTTT 1 Light("ShadowBall3")
		{
		  A_FaceTarget();
		  PM_DirectorBigPlasmaCharge();
		}
		DIRE UUUUUU 3 Light("ShadowBall4")
		{
			PM_LeadTarget(40);
			A_Quake(random(1, 3), 10, 0, 1000);
			A_StartSound("Director/Plasma",25,CHANF_OVERLAP);
			A_SpawnProjectile("PM_DirectorPlasmaShot",55,0,frandom(-2,2),CMF_AIMDIRECTION|CMF_OFFSETPITCH,pitch+frandom(-2,2));
		}
	PGLoop:
		DIRE U 3 Light("ShadowBall4")
		{
			pm_attackloop--;
			PM_LeadTarget(40);
			A_Quake(random(1, 3), 10, 0, 1000);
			A_StartSound("Director/Plasma",25,CHANF_OVERLAP);
			A_SpawnProjectile("PM_DirectorPlasmaShot",55,0,frandom(-2,2),CMF_AIMDIRECTION|CMF_OFFSETPITCH,pitch+frandom(-2,2));
			if (pm_attackloop <= 0) SetStateLabel("Cooldown");
			if (target && (!CheckSight(target) || target.Health <= 0)) SetStateLabel("Cooldown");
		}
		Loop;
	RockThrow:
		TNT1 A 0;
		TNT1 A 0 A_Jump(125,"PsiOrbs","PsiChasers");
		TNT1 A 0 A_Jump(120,"RockThrowBigger");
		DIRE TTTTTTTTTTTTTTTT 1
		{
		A_FaceTarget();
		if (!random(0, 8)) A_SpawnProjectile("PM_DirectorPsychicLightning");
		A_SpawnProjectile("PM_DirectorPsiDischarge",random(50,200),frandom(-180,180),frandom(-180,180),CMF_AIMDIRECTION|CMF_OFFSETPITCH,frandom(-90,90));
		}
		DIRE G 0  A_StartSound("Director/Rise",50,CHAN_OVERLAP,1);
		DIRE TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT 1 Light("PM_DirectorPsychicLight") { A_FaceTarget(); PM_DirectorPsiRise(); }
		DIRE T 0
		{
			A_QuakeEx(2, 2, 2, 10, 0, 1200, "", QF_SCALEDOWN|QF_3D);
			for (int i = random(15, 25); i > 0; i--) A_SpawnParticleEx("", TexMan.CheckForTexture("R0K_B0"), STYLE_Normal, SPF_RELATIVE|SPF_ROLL, random(40, 80), random(5,25), xoff: 110 + random(-35, 35), yoff: frandom(-35, 35), velx: frandom(-4, 4), vely: frandom(-4, 4), velz: frandom(0.1, 10), accelz: -0.08, startalphaf: frandom(0.5, 1), sizestep: -.1, startroll: random(-180,180), rollvel: frandom(-4, 4));
			A_FaceTarget();
			A_StartSound("Director/Rock", 20);
			A_SpawnItemEx("PM_DirectorControlledRock", 120, 0, 1, zvel: 8, flags: SXF_SETMASTER);
		}
		DIRE TTTTTTTT 1 Light("PM_DirectorPsychicLight") A_FaceTarget();
		DIRE T 20;
		TNT1 A 0 { changecooldown -= random(0, 10); }
		Goto See;
	RockThrowBigger:
		TNT1 A 0;
		DIRE G 0 A_StartSound("Director/Screech",CHAN_VOICE);
		DIRE TTTTTTTTTTTTTTTT 1
		{
		A_FaceTarget();
		A_SpawnProjectile("PM_DirectorPsiDischarge",random(50,200),frandom(-180,180),frandom(-180,180),CMF_AIMDIRECTION|CMF_OFFSETPITCH,frandom(-90,90));
		}
		DIRE G 0  A_StartSound("Director/Rise",50,CHAN_OVERLAP,1);
		DIRE TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT 1 Light("PM_DirectorPsychicLight") { A_FaceTarget(); PM_DirectorPsiRise(); }
		DIRE TTTTT random(0,20)
		{
			A_QuakeEx(2, 2, 2, 10, 0, 1200, "", QF_SCALEDOWN|QF_3D);
			for (int i = random(15, 25); i > 0; i--) A_SpawnParticleEx("", TexMan.CheckForTexture("R0K_B0"), STYLE_Normal, SPF_RELATIVE|SPF_ROLL, random(40, 80), random(5,25), xoff: 110 + random(-35, 35), yoff: frandom(-200, 200), velx: frandom(-4, 4), vely: frandom(-4, 4), velz: frandom(0.1, 10), accelz: -0.08, startalphaf: frandom(0.5, 1), sizestep: -.1, startroll: random(-180,180), rollvel: frandom(-4, 4));
			A_FaceTarget();
			A_StartSound("Director/Rock", 20);
			A_SpawnItemEx("PM_DirectorControlledRock", random(120,300), random(-300,300), 1, zvel: random(6,12), flags: SXF_SETMASTER);
		}
		DIRE TTTTTTTT 1 Light("PM_DirectorPsychicLight") A_FaceTarget();
		DIRE T 20;
		TNT1 A 0 { changecooldown -= random(0, 10); }
		Goto See;
	Pain:
		DIRE I 5 A_StopSounds(52, 560);
		DIRE I 5 A_Pain();
		TNT1 A 0 { pm_attackloop--; }
		DIRE I 0 { if (attackmode == 1 && !random(0, 3)) { bNOPAIN = true; SetStateLabel("PsychicRush"); } }
		Goto See;
	PsychicRush:
		DIRE I 0 { if (rushcooldown > 0) SetStateLabel("See"); }
		DIRE A 20 A_FaceTarget();
		DIRE I 0 A_StartSound("GenericChargeHeavy", 22);
		DIRE IIIIIIIIIIIIIIIIIII 2 A_SpawnItemEx("PM_GenericPhaseGhost",xvel:frandom(-10, 10), yvel:frandom(-10,10),flags:SXF_TRANSFERSTENCILCOL|SXF_TRANSFERALPHA|SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERSCALE);
		DIRE I 0
		{
			bTHRUACTORS = true;
			bFRIGHTENED = randompick(true, false);
			A_StartSound("Director/PsychicThunder", 22, pitch: frandom(1.2, 1.7));
			A_StartSound("Director/PsychicTeleport", 23);
			A_QuakeEx(2, 2, 2, 10, 0, 1200, "", QF_SCALEDOWN|QF_3D);
		}
		DIRE I 0
		{
			for (int i = random(40, 80); i > 0; i--)
			{
				PM_DirectorPsiFX();
				A_Chase(null, null);
				A_SpawnItemEx("PM_GenericPhaseGhost",flags:SXF_TRANSFERSTENCILCOL|SXF_TRANSFERALPHA|SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERSCALE);
			}
		}
		DIRE I 0
		{
			if (bNOPAIN) { bNOPAIN = false; } rushcooldown = random(250, 500);
			
			BlockThingsIterator ti = BlockThingsIterator.Create(self, 450);
			actor a;
			
			while(ti.Next())
			{
				a = ti.thing;
				double rad = abs((500 - Distance3D(a)) / 2);
				if (a && a.Health > 0 && a.bSHOOTABLE && !a.bINVULNERABLE && !a.bDORMANT && !a.bNODAMAGE && CheckSight(a) && distance3D(a) < 450 && !a.bDONTTHRUST)
				{
					if (a != self && a.species != "Cyberdemon" && a.species != "Mastermind" && a.species != "PM_VoidElder")
					{
						a.VelFromAngle((rad / 2.65), self.AngleTo(a));
						if (!(a is "PlayerPawn")) { a.vel.z += (rad / 5) / ((a.Mass > 600) ? 2.5 : 1);
						a.vel.z = clamp(a.vel.z, -25, 25); }
					}
				}
			}
			
			for (int i = 2; i > 0; i--) A_SpawnParticleEx("", TexMan.CheckForTexture("SPKPA0"), STYLE_Add, SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL, 30, 500, zoff: 80, sizestep: 30, rollvel: frandom(-5, 5));
			for (int i = random(15, 25); i > 0; i--) A_SpawnItemEx("PM_GenericPhaseGhost",xvel:frandom(-20, 20), yvel:frandom(-20,20),flags:SXF_TRANSFERSTENCILCOL|SXF_TRANSFERALPHA|SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERSCALE);
		}
		DIRE I 5 { bFRIGHTENED = false; }
		DIRE I 15 { bTHRUACTORS = false; }
		DIRE A 20;
		Goto See;
	Hallucinations:
		DIRE I 0 { if (summonocooldown > 0) SetStateLabel("RockThrow"); }
		TNT1 A 0 A_StartSound("Director/Taunt", 140);
		DIRE G 0 A_StartSound("Director/Screech",CHAN_VOICE);
		DIRE TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT 1 Light("PM_DirectorPsychicLight") A_FaceTarget();
		DIRE G 0  A_StartSound("Director/TK",50,CHAN_OVERLAP,1);
		DIRE TTTTTTTTTTTTTTTTTTTTTTTTTTTT 1 Light("PM_DirectorPsychicLight") { A_FaceTarget(); PM_DirectorPsiCast(); A_SpawnProjectile("PM_DirectorPsiDischarge",random(50,200),random(-180,180),frandom(-180,180),CMF_AIMDIRECTION|CMF_OFFSETPITCH,frandom(-90,90)); A_QuakeEx(2, 2, 2, 10, 0, 1200, "", QF_SCALEDOWN|QF_3D); }
		DIRE TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT 1 Light("PM_DirectorPsychicLight")
		{
			A_FaceTarget(); PM_DirectorPsiCast(); A_QuakeEx(2, 2, 2, 10, 0, 1200, "", QF_SCALEDOWN|QF_3D); A_SpawnProjectile("PM_DirectorPsiDischarge",random(50,200),random(-180,180),frandom(-180,180),CMF_AIMDIRECTION|CMF_OFFSETPITCH,frandom(-90,90));
			if (!(getAge() % random(5, 7))) A_SpawnProjectile("PM_DirectorHallucinationSummon", 20, 0, frandom(-90, 90), CMF_AIMDIRECTION);
			if (!random(0, 15)) A_SpawnProjectile("PM_DirectorPsychicLightning");
		}
		DIRE TTTTTTTTTTTTTTTT 1 Light("PM_DirectorPsychicLight") A_FaceTarget();
		DIRE T 60 { summonocooldown = random(100, 350); }
		TNT1 A 0 { changecooldown -= random(10, 60); }
		Goto See;
	BuffCheck:
		DIRE TT 5 A_CheckProximity("Buff", "PMMonsterBase", 750, 3, CPXF_ANCESTOR|CPXF_CHECKSIGHT);
		Goto RockThrow;
	Buff:
		TNT1 A 0 A_StartSound("Director/Taunt", 140);
		DIRE I 0 { if (buffcooldown > 0) SetStateLabel("RockThrow"); else A_StartSound("Director/PsychicStart",24); }
		DIRE TTTTTTTTTTTTTTTTTTTTTTTT 1 A_FaceTarget();
		DIRE G 0  A_StartSound("Director/TK",50,CHAN_OVERLAP,1);
		DIRE TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT 1 Light("PM_DirectorPsychicLight") PM_DirectorBuff();
		DIRE TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT 1 Light("PM_DirectorPsychicLight")
		{
			PM_DirectorBuff();
			if (!random(0, 15)) A_SpawnProjectile("PM_DirectorPsychicLightning");
			A_RadiusGive("PM_DirectorResistanceGiver", 765, RGF_MONSTERS|RGF_CUBE|RGF_NOSIGHT);
		}
		DIRE T 70 { A_StartSound("Director/PsychicStop",24); buffcooldown = random(250, 700); }
		TNT1 A 0 { changecooldown -= random(15, 40); }
		Goto See;
	PsiChasers:
		DIRE I 0 { A_StartSound("Grievance/Charge",24,attenuation: 0.35,pitch:1.2); A_SpawnParticleEx("", TexMan.CheckForTexture("SPKPA0"), STYLE_Add, SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL, 30, 100, xoff: 30, zoff: 80, sizestep: 12); }
		DIRE TTTTTTTTTTTTTTTTTTTTTTTTTTTT 1 Light("PM_DirectorPsychicLight")
		{
		PM_DirectorPsiCast();
		if (!random(0, 15)) A_SpawnProjectile("PM_DirectorPsychicLightning");
		A_SpawnItemEx("PM_DirectorMindPower", 20, 0, 78,0,0,0,0,0,200);
		A_FaceTarget();
		A_SpawnProjectile("PM_DirectorPsiDischarge",random(50,200),random(-180,180),frandom(-180,180),CMF_AIMDIRECTION|CMF_OFFSETPITCH,frandom(-90,90));
		}
		DIRE T 0 A_SpawnProjectile("PM_DirectorPsiChaser",90,0,90,CMF_AIMDIRECTION);
		DIRE T 0 A_SpawnProjectile("PM_DirectorPsiChaser",90,0,-90,CMF_AIMDIRECTION);
		TNT1 A 0 { changecooldown -= random(0, 10); }
		DIRE T 5;
		Goto See;
	PsiOrbs:
		DIRE I 0 { A_StartSound("Exalt/BHShot",24); A_SpawnParticleEx("", TexMan.CheckForTexture("SPKPA0"), STYLE_Add, SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL, 30, 100, xoff: 30, zoff: 80, sizestep: 12); }
		DIRE TTTTTTTTTTTTTTTTTT random(0,12) Light("PM_DirectorPsychicLight")
		{
		PM_DirectorPsiCast();
		if (!random(0, 15)) A_SpawnProjectile("PM_DirectorPsychicLightning");
		A_SpawnItemEx("PM_DirectorMindPower", 20, 0, 78,0,0,0,0,0,200);
		A_FaceTarget();
		A_SpawnProjectile("PM_SmallPsiOrbs",90,0,frandom(-80,80),CMF_AIMDIRECTION|CMF_OFFSETPITCH,frandom(-80,80));
		A_SpawnProjectile("PM_DirectorPsiDischarge",random(50,200),random(-180,180),frandom(-180,180),CMF_AIMDIRECTION|CMF_OFFSETPITCH,frandom(-90,90));
		}
		TNT1 A 0 { changecooldown -= random(0, 10); }
		DIRE T 5;
		Goto See;
	HeavyStorm:
		DIRE I 0 { if (stormcooldown > 0) SetStateLabel("RockThrow"); else { bNOPAIN = true; A_StartSound("Grievance/Charge",24,attenuation: 0.35,pitch:1.2); A_SpawnParticleEx("", TexMan.CheckForTexture("SPKPA0"), STYLE_Add, SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL, 30, 100, xoff: 30, zoff: 80, sizestep: 12); } }
		DIRE TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT 1 Light("PM_DirectorPsychicLight")
		{
		A_FaceTarget();
		A_SpawnProjectile("PM_DirectorPsiDischarge",random(50,200),random(-180,180),frandom(-180,180),CMF_AIMDIRECTION|CMF_OFFSETPITCH,frandom(-90,90));
		}
		DIRE T 0 { pm_attackloop = random(260, 340); A_StartSound("Director/DeathThreat", 132); A_StartSound("GenericHeavyCharge", 133, attenuation: 0.35); }
		Goto StormLoop;
	StormLoop:
		DIRE T 1
		{
			A_FaceTarget();
			A_SpawnProjectile("PM_DirectorPsiDischarge",random(50,200),random(-180,180),frandom(-180,180),CMF_AIMDIRECTION|CMF_OFFSETPITCH,frandom(-90,90));
			if (!random(0, 2)) A_SpawnProjectile("PM_DirectorPsychicLightning", 10, 0, frandom(0, 360), CMF_AIMDIRECTION);
			if (!random(0, 10)) A_SpawnProjectile("PM_DirectorSeekingLightning", 10, 0, frandom(0, 360), CMF_AIMDIRECTION);
			if (!random(0, 17) && !(GetAge() % random(2, 6))) A_SpawnProjectile("PM_DirectorPsychicHeavyLightning", 10, 0, frandom(0, 360), CMF_AIMDIRECTION);
			PM_DirectorBuff();
			if (!(GetAge() % 14)) A_SpawnItemEx("PM_DirectorMindPower", 20, 0, 78, flags: SXF_NOCHECKPOSITION);
			pm_attackloop--;
			
			if (pm_attackloop <= 0) SetStateLabel("StormCooldown");
		}
		Loop;
	StormCooldown:
		TNT1 A 0 { changecooldown -= random(15, 150); stormcooldown = random(1000, 2500); }
		DIRE TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTAAAAAAAAAA 2 PM_DirectorPsiCast();
		Goto See;
	Death:
		DIRE I 1;
		DIRE I 1 A_StopSound(48);
		DIRE I 1 A_StopSounds(52, 560);
		DIRE I 10 A_Scream();
		DIRE J 6 A_StartSound("Director/DeathServo", CHAN_BODY);
		DIRE K 7 Light("TyrantMExp");
		DIRE L 0 A_StartSound("Director/Fall", 55);
		DIRE LM 7 Light("TyrantMExp");
		TNT1 A 0 A_SpawnItemEx("PM_OFireBallExplode",random(-10,10),0,random(-10,10));
		DIRE N 3 Light("AvatarFireball4") A_SpawnItemEx("PM_OrangeEmbersSpawn",0,0,30);
		TNT1 AAAAAAA 0 A_SpawnItemEx("PM_GenericExplosionFlames",frandom(-40, 40),frandom(-40, 40),50,random(-3,3),random(-3,3),random(-2,3),0,SXF_NOCHECKPOSITION);
		TNT1 A 0
		{
            A_Explode(150,280);
			A_StartSound("ArachChassisExplode",CHAN_5,attenuation:.5,pitch:.5);
			A_Quake(6, 15, 0, 1000);
			A_Quake(3, 35, 0, 2000);
		}
		TNT1 A 0 A_SpawnItemEx("PM_OrangeEmbersSpawn",0,0,25);
		TNT1 A 0 A_SpawnItemEx("PM_OFireBallExplode",random(-10,10),0,30);
		TNT1 AAAAA 0 A_SpawnItemEx("PM_ArachnotronGenericExplosionFlames",0,0,35,random(-7,7),random(-7,7),random(0,7));
		TNT1 A 0 A_NoBlocking();
		TNT1 AAAAAA 0 A_SpawnItemEx("PM_NormalMeatChunkLauncher",0,0,random(10,30),0,0,0,0,SXF_NOCHECKPOSITION);
		TNT1 A 0 A_SpawnItemEx("PM_NormalBloodyCloudBig",0,0,20,0,0,0,0,SXF_NOCHECKPOSITION);
		TNT1 AAAAA 0 A_SpawnItemEx("PM_NormalBigMeatChunkLauncher",0,0,random(10,30),0,0,0,0,SXF_NOCHECKPOSITION);
		TNT1 FFFFFFFFFFFFFFFFFFFF 0 A_SpawnItemEX("PM_ArachExpGoreSplash", 0, 0, 32, random (4, 10), random(4,10), random (4, 15), random(0, 360));
		TNT1 A 0 A_SpawnItemEx("PM_ArachExpMist",0,0,20);
		TNT1 A 0 A_StartSound("BigExplosionDistant",5,CHANF_DEFAULT,0.7);
		TNT1 A 0 A_StartSound("ArachExpGore",CHAN_6);
		DIRE N 6 Light("TyrantExp");
		DIRE OPQRSSSSSSSSSSSSSSSS 6 Light("TyrantExp") A_SpawnItemEX("PM_ArachExpGoreSplash", 0, 0, 15, random (-3, 3), random(-3,3), random (4, 15));
		DIRE S -1 A_BossDeath();
		Stop;
	}
}

Class PM_DirectorAStrikeShotTell : Actor
{
 int timer;
 int secondtimer;
 Default
 {
 Scale 1.1;
 Speed 60;
 RenderStyle "Add";
 Projectile;
 +BRIGHT
 +SKYEXPLODE
 +SEEKERMISSILE
 +THRUACTORS
 }
 
 override void PostBeginPlay()
 {
  Super.PostBeginPlay();
  timer = random(1,5);
  tex[0] = TexMan.CheckForTexture("LENRA0",TexMan.Type_Sprite);
  tex[1] = TexMan.CheckForTexture("BLHDA0",TexMan.Type_Sprite);
  tex[2] = TexMan.CheckForTexture("DUSTC0",TexMan.Type_Sprite);
 }
 
 TextureID tex[3];

 States
 {
  Spawn:
   TNT1 A 0;
   TNT1 A 0
   {
	A_SpawnParticleEx
	    ( "", tex[0], style: STYLE_Add, flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,
	    lifetime: 8, size: 100, xoff: -10, startalphaf: 1, startroll: random(-180,180) );
	A_SpawnParticleEx
	    ( "", tex[1], style: STYLE_Add, flags: SPF_ROLL|SPF_RELATIVE|SPF_FULLBRIGHT,
	    lifetime: 20, size: 200, xoff: -10, startalphaf: 1, fadestepf: -1, sizestep: -25,
        startroll: random(-180,180) );
   }
   TRCR A 1
   {
   if(timer >= 8)
   SetStateLabel("TPAndSeek");
   timer++;
   }
   Wait;
   Crash:
   XDeath:
   Death:
   TPAndSeek:
   TNT1 A 0
   {
    A_SpawnItemEx("PM_PossessedTeleportFog",zofs:-10,flags:SXF_NOCHECKPOSITION);
	bFLOORHUGGER = true;
	bFLATSPRITE = true;
	bROLLSPRITE = true;
	A_SetScale(1.25,1.25);
	A_ScaleVelocity(0);
	A_FadeOut(1.0,FTF_CLAMP);
   }
   TNT1 A random(35,85);
   TNT1 A 0 
   { A_Warp(AAPTR_TRACER,random(-80,80),random(-80,80),0,random(0,360),WARPF_NOCHECKPOSITION);
     A_StartSound("Director/ASPreImpact",20); }
   SBLL A 1 Light("PM_TyrantFire")
   {
    if(secondtimer >= 50)
	SetStateLabel("Explode");
    A_FadeIn(0.095,FTF_CLAMP);
	A_SetRoll(random(0,360));
	A_QuakeEx(1,1,1,1,0,500,"",QF_RELATIVE|QF_SCALEDOWN|QF_3D,rollintensity:0.8,rollwave:0.8);
	A_SetScale(Scale.X+0.025,Scale.Y+0.025);
	secondtimer++;
   }
   Wait;
   Explode:
    TNT1 A 0
	{
	bFLATSPRITE = false;
	bROLLSPRITE = false;
	A_SetScale(0.17,0.17);
	A_QuakeEx(3,3,3,10,0,900,"",QF_RELATIVE|QF_SCALEDOWN|QF_3D,rollintensity:0.8,rollwave:0.8);
	A_Explode(30,200);
	A_StartSound("Noble/BombExp",21);
	A_StartSound("Noble/BombExpFar",22);
	A_StartSound("ZTrooper/FragExp",23);
	for(int i=3;i>0;i--)
	A_SpawnItemEx("PM_BigFireGlobs",0,0,0,random(-4,4),random(-4,4),random(-1,5),0,SXF_NOCHECKPOSITION);
	A_SpawnProjectile("PM_DarkExpSmoke",7,0,random(0,360),2,random(0,360));
	A_SpawnParticleEx
	    ( "", tex[0], style: STYLE_Add, flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,
	    lifetime: 8, size: 500, zoff: -15, startalphaf: 1, startroll: random(-180,180) );
	A_SpawnParticleEx
	    ( "", tex[1], style: STYLE_Add, flags: SPF_ROLL|SPF_RELATIVE|SPF_FULLBRIGHT,
	    lifetime: 20, size: 500, zoff: -15, startalphaf: 1, fadestepf: -1, sizestep: -25,
        startroll: random(-180,180) );
	for(int i=random(3,6);i>0;i--) A_SpawnParticleEx
	    ( "727272", tex[2], style: STYLE_Normal, flags: SPF_RELATIVE|SPF_ROLL,
	    lifetime: random(40,70), size: frandom(2,35), zoff: random(10,35),
	    velx: frandom(-8,8), vely: frandom(-8,8), velz: frandom(1,12),
	    accelz: frandom(-0.1,-0.9), startalphaf: 1.0, sizestep: -0.2, startroll: random(-180,180), rollvel: random(-4,4) );
	}
	DI_A AAAAAAAAAAAAAAAAAA 1
	{
	 A_FadeOut(0.3,FTF_CLAMP);
	 if(random(1,6) == 1)
	 A_SpawnProjectile("PM_DarkExpSmoke",7,0,random(0,360),2,random(0,360));
	}
	Stop;
   }
}

Class PM_DirectorMissile : PM_TyrantStreamRocket
{
 int timer;
 Default
 {
  Speed 20;
  Scale 0.45;
  DamageFunction 20;
  DamageType "ExplosiveImpact";
  SeeSound "";
  DeathSound "SmallMissileExplosion";
  +SEEKERMISSILE
 }

 States
 {
  Spawn:
   TYM3 A 1 Bright
   {
     if(timer > 30)
	 SetStateLabel("Go");
	 PM_CheckWhiz();
     A_SeekerMissile(1,5,SMF_PRECISE|SMF_CURSPEED);
	 A_SpawnParticleEx( "", tex[1], style: STYLE_None, flags: SPF_ROLL|SPF_RELATIVE,lifetime: random(20,45), size: 10.0, xoff: frandom(-2,-15), startalphaf: 0.8
	 ,fadestepf: -1, sizestep: 0.3, startroll: random(-180,180), rollvel: frandom(-0.5,0.5) );
	 A_SpawnParticleEx( "", tex[2], style: STYLE_Add, flags: SPF_RELATIVE|SPF_FULLBRIGHT,lifetime: 2, size: frandom(20,80), xoff: -10, startalphaf: 0.6 );
	 timer++;
   }
   Wait;
  Go:
   TYM3 A 1 Bright
   {
     PM_CheckWhiz();
	 A_SpawnParticleEx( "", tex[1], style: STYLE_None, flags: SPF_ROLL|SPF_RELATIVE,lifetime: random(20,45), size: 10.0, xoff: frandom(-2,-15), startalphaf: 0.8
	 ,fadestepf: -1, sizestep: 0.3, startroll: random(-180,180), rollvel: frandom(-0.5,0.5) );
	 A_SpawnParticleEx( "", tex[2], style: STYLE_Add, flags: SPF_RELATIVE|SPF_FULLBRIGHT,lifetime: 2, size: frandom(20,80), xoff: -10, startalphaf: 0.6 );
   }
   Wait;
  Death:
    TNT1 A 0 Radius_Quake (2, 54, 0, 10, 0);
	TNT1 A 0 A_SpawnItemEx("PM_OFireBallExplode");
	TNT1 AAAAA 0 A_SpawnProjectile("PM_FiendBallExplode",0,0,random(0,360),2,random(0,360));
	TNT1 A 15 BRIGHT Light("AvatarFireball5");
	Stop;
  }
}

Class PM_DirectorPlasmaShot : PMProjectileBase
{
  Default
  {
   Projectile;
   StencilColor "DarkRed";
   RenderStyle "Add";
   Speed 30;
   Scale 0.85;
   DamageFunction 15;
   DamageType "Plasma";
   Decal "PM_HellPlasmaScorch";
   SeeSound "";
   DeathSound "Director/PlasmaImpact";
   PMProjectileBase.WhizSound "PM/PlasmaWhiz";
   PMProjectileBase.WhizRangeCheck 250;
   +BRIGHT
   +SEEKERMISSILE
   +FORCEXYBILLBOARD
  }
  
  override void PostBeginPlay()
  {
   Super.PostBeginPlay();
   tex[0] = TexMan.CheckForTexture("DTPRR0",TexMan.Type_Sprite);
   tex[1] = TexMan.CheckForTexture("SPKRA0",TexMan.Type_Sprite);
   tex[2] = TexMan.CheckForTexture("SPKRC0",TexMan.Type_Sprite);
  }
  
  TextureID tex[3];
  
  override void Tick()
  {
   Super.Tick();
   if(!level.IsFrozen() &&(level.maptime % 5) == 0)
   {
	A_SpawnParticleEx( "", tex[1], style: STYLE_Add, flags: SPF_FULLBRIGHT|SPF_RELATIVE|SPF_ROLL, lifetime: random(1,100), size: random(2,15),xoff: -8, yoff: random(-8,8), zoff: random(-8,8), velx: random(-1,1), vely: random(-1,1), velz: random(-1,1),startalphaf: 0.5
	, fadestepf: -1, sizestep: 0.25, startroll: random(-180,180));
   }
  }
  
  void PM_DirectorPlasmaShotFlare()
  {
	A_SpawnParticleEx
	( "", tex[0], style: STYLE_Add, flags: SPF_FULLBRIGHT|SPF_RELATIVE,
	lifetime: 1, size: 120.0, xoff: -7, startalphaf: 0.15, fadestepf: -1, sizestep: -4);
	A_SpawnParticleEx
	( "f44336", tex[0], style: STYLE_Add, flags: SPF_FULLBRIGHT|SPF_RELATIVE|SPF_ROLL,
	lifetime: 5, size: 80.0, xoff: -10, startalphaf: 0.65, fadestepf: -1, sizestep: -5, startroll: random(-180,180));
  }
  
  States
  {
   Spawn:
    TNT1 A 0;
	TNT1 A 0
	{
	  A_SpawnParticleEx( "", tex[2], style: STYLE_Add, flags: SPF_FULLBRIGHT|SPF_RELATIVE,lifetime: random(1,7), size: random(250,400), xoff: -7, startalphaf: frandom(0.65,0.95)
	  , fadestepf: -1, sizestep: 2);
	for(int i=random(1,4);i>0;i--)
	 { A_SpawnParticleEx( "", tex[1], style: STYLE_Add, flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: random(1,50), size: random(10,20), velx: frandom(1,4.5), vely: frandom(-4,4), velz: frandom(-4,2),accelz: frandom(-0.0095,-0.0115), startalphaf: frandom(0.55,0.95)
	 , fadestepf: -1, startroll: random(-180,180) ); }
	}
   Go:
    FS03 A 1 Bright { PM_CheckWhiz(); PM_DirectorPlasmaShotFlare(); }
    Loop;
   Death:
	TNT1 A 0
	{
	A_SpawnParticleEx
	( "", tex[2], style: STYLE_Add, flags: SPF_FULLBRIGHT|SPF_RELATIVE,
	lifetime: random(1,20), size: random(100,250), xoff: -7, startalphaf: frandom(0.65,0.95), fadestepf: -1);
	for(int i=random(1,3);i>0;i--)
	 A_SpawnParticleEx
	 ( "", tex[1], style: STYLE_Add, flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,
     lifetime: random(1,25), size: random(10,20), velx: frandom(-4,4), vely: frandom(-4,4), velz: frandom(-4,4),
	 accelz: frandom(-0.0095,-0.0115), startalphaf: 0.7, fadestepf: -1, startroll: random(-180,180) );
	}
	TNT1 AAA 0 A_SpawnItemEx("HellPlasmaExp",0,0,0);
	TNT1 A 0 A_SpawnItemEx("HellPlasmaFlare",0,0,0);
	TNT1 A 13 Light("Shadowball2");
    Stop;
  }
}

Class PM_DirectorBFGBall : Actor
{
  Default
  {
   Projectile;
   Height 20;
   Radius 30;
   StencilColor "DarkRed";
   RenderStyle "Add";
   Speed 18;
   Scale 1.85;
   DamageFunction 30;
   DamageType "BFG";
   Decal "BigScorch";
   SeeSound "";
   DeathSound "";
   +BRIGHT
   +SEEKERMISSILE
   +ROLLSPRITE
   +FORCEXYBILLBOARD
  }
  
  override void PostBeginPlay()
  {
   Super.PostBeginPlay();
   tex[0] = TexMan.CheckForTexture("DTPRR0",TexMan.Type_Sprite);
   tex[1] = TexMan.CheckForTexture("SPKRA0",TexMan.Type_Sprite);
   tex[2] = TexMan.CheckForTexture("SPKRC0",TexMan.Type_Sprite);
  }
  
  TextureID tex[3];
  
  void PM_DirectorPlasmaShotFlare()
  {
	A_SpawnParticleEx
	( "", tex[0], style: STYLE_Add, flags: SPF_FULLBRIGHT|SPF_RELATIVE,
	lifetime: 1, size: 260.0, xoff: -5, startalphaf: 0.45, fadestepf: -1);
	A_SpawnParticleEx
	( "f44336", tex[0], style: STYLE_Add, flags: SPF_FULLBRIGHT|SPF_RELATIVE|SPF_ROLL,
	lifetime: 25, size: 240.0, xoff: -4, startalphaf: 0.55, fadestepf: -1, sizestep: -4, startroll: random(-180,180));
  }
  
  States
  {
   Spawn:
    TNT1 A 0;
	TNT1 A 0
	{
	A_StartSound("Plasmatron/MortarLoop",28,CHANF_LOOPING,volume:1,pitch:0.75);
	A_SpawnParticleEx
	( "", tex[2], style: STYLE_Add, flags: SPF_FULLBRIGHT|SPF_RELATIVE,
	lifetime: 35, size: 650, xoff: -7, startalphaf: frandom(0.75,0.95), fadestepf: -1, sizestep: 2);
	for(int i=random(10,15);i>0;i--)
	 A_SpawnParticleEx
	 ( "", tex[1], style: STYLE_Add, flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,
     lifetime: random(1,50), size: random(10,20), velx: frandom(1,4.5), vely: frandom(-4,4), velz: frandom(-4,2),
	 accelz: frandom(-0.0095,-0.0115), startalphaf: frandom(0.55,0.95), fadestepf: -1, startroll: random(-180,180) );
	}
   Go:
    SPKR A 1 Bright 
	{
	 PM_DirectorPlasmaShotFlare();
	 A_SetRoll(roll+10);
	}
    Loop;
   Death:
	TNT1 A 0
	{
	A_StopSound(28);
	A_StartSound("Director/BigPlasmaExp",29,pitch:frandom(0.85,1));
	A_QuakeEx(3,3,3,30,0,2000,"",QF_RELATIVE|QF_SCALEDOWN|QF_3D,rollintensity: 1.2, rollwave: 1.0);
	for(int i=15;i>0;i--)
	 { A_SpawnProjectile("PM_DirectorBigPlasmaBall",0,0,frandom(-180,180),CMF_AIMDIRECTION|CMF_TRACKOWNER,frandom(-180,180)); }
	for(int i=20;i>0;i--)
	 { A_SpawnProjectile("PM_DirectorPlasmaShot",0,0,frandom(-180,180),CMF_AIMDIRECTION|CMF_TRACKOWNER,frandom(-40,40)); }
	A_Explode(65,350,0);
	A_RadiusThrust(2000,700,RTF_NOTMISSILE|RTF_NOIMPACTDAMAGE);
	A_SpawnParticleEx
	( "", tex[2], style: STYLE_Add, flags: SPF_FULLBRIGHT|SPF_RELATIVE|SPF_ROLL,
	lifetime: 90, size: 550, xoff: -7, startalphaf: frandom(0.65,1), fadestepf: -1, sizestep: 8.20, startroll: random(-180,180));
	A_SpawnParticleEx
	( "", tex[0], style: STYLE_Add, flags: SPF_FULLBRIGHT|SPF_RELATIVE|SPF_ROLL,
	lifetime: 80, size: random(450,500), xoff: -7, startalphaf: frandom(0.95,1), fadestepf: -1, sizestep: 7, startroll: random(-180,180));
	for(int i=random(20,35);i>0;i--)
	 A_SpawnParticleEx
	 ( "", tex[1], style: STYLE_Add, flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,
     lifetime: random(50,80), size: random(10,45), xoff: frandom(-20,20), yoff:frandom(-20,20), zoff:frandom(-10,10), velx: frandom(-15,15), vely: frandom(-15,15), velz: frandom(1,9),
	 accelz: frandom(-0.0095,-0.0115), startalphaf: frandom(0.85,1), fadestepf: -1, startroll: random(-180,180) );
	}
	TNT1 A 5;
    Stop;
  }
}

Class PM_DirectorBigPlasmaBall : PM_DirectorPlasmaShot
{
   vector3 weave;
   int wait;
   Default
   {
   DamageFunction 15;
   DamageType "Plasma";
   Speed 6;
   Scale 1.55;
   BounceCount 5;
   BounceType "Doom";
   Decal "PM_RedFireScorch";
   DeathSound "Director/PlasmaImpact";
   +ROLLSPRITE
   }
   
   override void PostBeginPlay()
   {
    Super.PostBeginPlay();
	weave.x = frandom(-0.05,0.05);
	weave.y = frandom(-0.05,0.05);
	weave.z = frandom(-0.08,-0.05);
   }
   
   override void Tick()
   {
    if(level.IsFrozen()) return;
	Super.Tick();
    if((level.maptime % 3) == 0)
    {
	 A_SpawnParticleEx
	 ( "", tex[1], style: STYLE_Add, flags: SPF_FULLBRIGHT|SPF_RELATIVE|SPF_ROLL, lifetime: random(1,60), size: random(50,55),
	 xoff: -8, yoff: random(-1,1), zoff: random(-1,1), velx: frandom(-0.15,0.15), vely: frandom(-0.15,0.15), velz: frandom(-0.15,0.15),
	 startalphaf: 0.65, fadestepf: -1.25, sizestep: -3.5, startroll: random(-180,180));
    }
  }
  
  void PM_DirectorBPFlare()
  {
 	A_SpawnParticleEx
	( "", tex[0], style: STYLE_Add, flags: SPF_FULLBRIGHT|SPF_RELATIVE,
	lifetime: 1, size: 125.0, xoff: -7, startalphaf: 0.25, fadestepf: -1, sizestep: -4);
	A_SpawnParticleEx
	( "f44336", tex[0], style: STYLE_Add, flags: SPF_FULLBRIGHT|SPF_RELATIVE|SPF_ROLL,
	lifetime: 5, size: 50.0, xoff: -10, startalphaf: 0.85, fadestepf: -1, sizestep: -5, startroll: random(-180,180));
  }
  
  States
  {
   Spawn:
    RLSS A 1 Bright 
	{
	PM_DirectorBPFlare();
	A_SetRoll(random(0,356));
	if(wait > 25)
	 {
	 vel.x += weave.x;
	 vel.y += weave.y;
	 vel.z += weave.z;
	 }
	wait++;
	}
    Loop;
   Death:
	TNT1 A 0
	{
	A_SpawnParticleEx
	( "f44336", tex[0], style: STYLE_Add, flags: SPF_FULLBRIGHT|SPF_RELATIVE,
	lifetime: 65, size: random(280,300), xoff: -2, startalphaf: frandom(0.50,0.70), fadestepf: -1);
	A_SpawnParticleEx
	( "", tex[2], style: STYLE_Add, flags: SPF_FULLBRIGHT|SPF_RELATIVE,
	lifetime: 55, size: random(100,150), xoff: -2, startalphaf: frandom(0.65,0.95), fadestepf: -1);
	for(int i=8;i>0;i--)
	 A_SpawnParticleEx
	 ( "", tex[1], style: STYLE_Add, flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,
     lifetime: random(1,25), size: random(10,20), velx: frandom(-4,4), vely: frandom(-4,4), velz: frandom(-4,4),
	 accelz: frandom(-0.0095,-0.0115), startalphaf: 0.7, fadestepf: -1, startroll: random(-180,180) );
	}
    Stop;
   }
}

Class PM_DirectorPlasmaLaser : FastProjectile
{
  Default
  {
   Projectile;
   StencilColor "DarkRed";
   RenderStyle "Add";
   Speed 60;
   Scale 2;
   DamageFunction 10; //die
   DamageType "Plasma";
   Decal "PM_HellPlasmaScorch";
   SeeSound "";
   DeathSound "";
   +BRIGHT
  }
  
  override void PostBeginPlay()
  {
   Super.PostBeginPlay();
   tex[0] = TexMan.CheckForTexture("DTPRR0",TexMan.Type_Sprite);
   tex[1] = TexMan.CheckForTexture("SPKRA0",TexMan.Type_Sprite);
   tex[2] = TexMan.CheckForTexture("SPKRC0",TexMan.Type_Sprite);
  }
  
  TextureID tex[3];
  
  States
  {
   Spawn:
    TNT1 A 0;
	TNT1 A 0
	{
	A_SpawnParticleEx
	( "", tex[2], style: STYLE_Add, flags: SPF_FULLBRIGHT|SPF_RELATIVE|SPF_ROLL,
	lifetime: random(1,7), size: random(300,500), xoff: -7, startalphaf: frandom(0.65,0.95), fadestepf: -1, sizestep: 2, startroll: random(-180,180));
	for(int i=random(1,4);i>0;i--)
	 A_SpawnParticleEx
	 ( "", tex[1], style: STYLE_Add, flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,
     lifetime: random(1,50), size: random(10,20), velx: frandom(1,4.5), vely: frandom(-4,4), velz: frandom(-4,2),
	 accelz: frandom(-0.0095,-0.0115), startalphaf: frandom(0.55,0.95), fadestepf: -1, startroll: random(-180,180) );
	}
   Go:
    TRCR A 1 Bright A_QuakeEx(3,3,3,10,0,500,"",QF_RELATIVE|QF_SCALEDOWN|QF_3D,rollintensity:0.8,rollwave:0.8);
    Loop;
   Death:
	TNT1 A 0
	{
	A_SpawnParticleEx
	( "", tex[2], style: STYLE_Add, flags: SPF_FULLBRIGHT|SPF_RELATIVE|SPF_ROLL,
	lifetime: random(1,20), size: random(200,400), yoff: 12, startalphaf: frandom(0.65,0.95), fadestepf: -1, startroll: random(-180,180));
	}
	TNT1 A 3 Light("Shadowball2");
    Stop;
  }
}

Class PM_DirectorUraniumTracer : PM_DirectorTracer
{
	Default
	{
	Speed 120;
	DamageFunction 20;
	DamageType "Railgun";
	Scale 1.5;
	+FORCERADIUSDMG
	}
	
	States
	{
	Spawn:
        TNT1 A 0;
		TNT1 A 0
		{
			A_SpawnParticleEx
			( "#d2d2d2", tex[0], style: STYLE_Normal, flags: SPF_RELATIVE|SPF_ROLL, lifetime: random(10,300),
			size: frandom(20,250), xoff: -10, velx: frandom(0,8), vely: frandom(-2,2), velz: frandom(-1,1), startalphaf: frandom(0.0,0.8),
			fadestepf: -1, sizestep: frandom(0.0,1.4), startroll: random(-180,180), rollvel: frandom(-1,1));
			A_SpawnParticleEx
			( "", tex[3], style: STYLE_Add, flags: SPF_RELATIVE|SPF_ROLL|SPF_FULLBRIGHT,
			lifetime: random(2,5), size: frandom(120,450), startalphaf: 1.0, sizestep: frandom(0.0,3),
			startroll: random(-180,180));
			A_SpawnParticleEx
			( "", tex[1], style: STYLE_Add, flags: SPF_RELATIVE|SPF_ROLL|SPF_FULLBRIGHT, lifetime: random(1,4),
			size: frandom(40,290), xoff: -22, startalphaf: 1.0, sizestep: frandom(0.0,3), startroll: random(-180,180) );
			for (int i = random(5, 15); i > 0; i--) A_SpawnParticleEx
			( "", tex[3], style: STYLE_Add, flags: SPF_RELATIVE|SPF_ROLL|SPF_FULLBRIGHT, lifetime: random(1,4),
			size: frandom(4,30), xoff: -22, velx: frandom(5, 30), vely: frandom(-10, 10), velz: frandom(-10, 10), accelz: -0.05, startalphaf: 1.0, sizestep: frandom(0.0,3), startroll: random(-180,180) );
			A_SpawnParticleEx
			( "", TexMan.CheckForTexture("LEYSO0"), style: STYLE_Add, flags: SPF_RELATIVE|SPF_ROLL|SPF_FULLBRIGHT, lifetime: random(6,10),
			size: frandom(260,550), xoff: -20, velx: frandom(5,13), startalphaf: 1.0, fadestepf: -0.002, sizestep: frandom(0.0,3), startroll: random(-180,180));
		}
	Go:
		TRCR A 1 BRIGHT A_Quake(4,4,0,100,0);
        TNT1 A 0 A_JumpIfTracerCloser(150,"Noise");
        Loop;
    Noise:
        TNT1 A 0 A_StartSound("PM/BulletWhiz",3,CHANF_DEFAULT,0.50,pitch:1.5);
    Cont:
        TRCR A 1 BRIGHT A_Quake(4,4,0,100,0);
        Loop;
	Death:
	Crash:
	XDeath:
	    TRCR A 0 A_StartSound("Tyrant/ShellExplode",volume:0.75,pitch:2);
		TNT1 A 0 A_SpawnItemEx("OrangeShockwaveBig");
		TNT1 A 0 A_SetScale(2.3);
		TNT1 A 0 A_SpawnItemEx("PM_GenericExplosionFlames",0,0,0,random(-3,3),random(-3,3),random(-2,3),0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE);
	    TNT1 A 0
	    {
		 A_Explode(30, 300, XF_NOTMISSILE);
		 for (int i = random(1, 3); i > 0; i--)
		 {
			A_SpawnItemEx("PM_BulletHit",0,0,0,frandom(60,60),frandom(-60,60),frandom(-60,60),random(-360,360),SXF_NOCHECKPOSITION,0);
			A_SpawnParticleEx("727272", TexMan.CheckForTexture("DUSTC0"), style: STYLE_Normal, flags: SPF_RELATIVE|SPF_ROLL, lifetime: random(40,70), size: frandom(1,30), zoff: random(10,60), velx: frandom(-10,10),
			vely: frandom(-10,10), velz: frandom(-5,10),  accelz: frandom(-0.1,-0.5), startalphaf: 1.0, fadestepf: 0, sizestep: -0.2, startroll: random(-180,180), rollvel: random(-4,4));
		 }
		 for (int i = random(2, 8); i > 0; i--)
			A_SpawnParticleEx("", TexMan.CheckForTexture("SPKOA0"), style: STYLE_Add, flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL, lifetime: random(40,100), size: frandom(1,15), zoff: random(10,60), velx: frandom(-15,15),
			vely: frandom(-15,15), velz: frandom(-8,15),  accelz: frandom(-0.1,-0.5), startalphaf: 1.0, fadestepf: 0, sizestep: -0.1, startroll: random(-180,180));
		 A_SpawnParticleEx("727272", TexMan.CheckForTexture("GNSMK0"), style: STYLE_Normal, flags: SPF_RELATIVE|SPF_ROLL, lifetime: random(50,500), size: frandom(60,300), velx: frandom(-1.5,1.5), vely: frandom(-1.5,1.5), velz: frandom(-0.1,0.2), startalphaf: frandom(0.4,0.6), fadestepf: -1, sizestep: frandom(0.1,3), startroll: random(-180,180), rollvel: frandom(-0.5,0.5));
		 for(int i=3;i>0;i--)
		 A_SpawnParticleEx
		 ( "#d2d2d2", tex[0], style: STYLE_Normal, flags: SPF_RELATIVE|SPF_ROLL, lifetime: random(50,120),
		 size: frandom(65,150), velx: frandom(-2,2), vely: frandom(-2,2), velz: frandom(-1,1), startalphaf: frandom(0.4,0.9),
		 fadestepf: -1, sizestep: frandom(0.0,1.4), startroll: random(-180,180), rollvel: frandom(-1,1));
	    }
        Stop;
	}
}

Class PM_DirectorAutocannonracer : PM_DirectorTracer
{
	Default
	{
	Speed 80;
	DamageFunction 20;
	DamageType "ExplosiveImpact";
	Scale 1.5;
	+FORCERADIUSDMG
	}
	
	States
	{
	Spawn:
        TNT1 A 0;
		TNT1 A 0
		{
			A_SpawnParticleEx
			( "#d2d2d2", tex[0], style: STYLE_Normal, flags: SPF_RELATIVE|SPF_ROLL, lifetime: random(10,300),
			size: frandom(20,250), xoff: -10, velx: frandom(0,8), vely: frandom(-2,2), velz: frandom(-1,1), startalphaf: frandom(0.0,0.8),
			fadestepf: -1, sizestep: frandom(0.0,1.4), startroll: random(-180,180), rollvel: frandom(-1,1));
			A_SpawnParticleEx
			( "", tex[3], style: STYLE_Add, flags: SPF_RELATIVE|SPF_ROLL|SPF_FULLBRIGHT,
			lifetime: random(2,5), size: frandom(120,450), startalphaf: 1.0, sizestep: frandom(0.0,3),
			startroll: random(-180,180));
			A_SpawnParticleEx
			( "", tex[1], style: STYLE_Add, flags: SPF_RELATIVE|SPF_ROLL|SPF_FULLBRIGHT, lifetime: random(1,4),
			size: frandom(40,290), xoff: -42, startalphaf: 1.0, sizestep: frandom(0.0,3), startroll: random(-180,180) );
			for (int i = random(5, 15); i > 0; i--) A_SpawnParticleEx
			( "", tex[3], style: STYLE_Add, flags: SPF_RELATIVE|SPF_ROLL|SPF_FULLBRIGHT, lifetime: random(1,4),
			size: frandom(4,30), xoff: -42, velx: frandom(5, 30), vely: frandom(-10, 10), velz: frandom(-10, 10), accelz: -0.05, startalphaf: 1.0, sizestep: frandom(0.0,3), startroll: random(-180,180) );
			A_SpawnParticleEx
			( "", TexMan.CheckForTexture("LEYSO0"), style: STYLE_Add, flags: SPF_RELATIVE|SPF_ROLL|SPF_FULLBRIGHT, lifetime: random(6,10),
			size: frandom(260,550), xoff: -40, velx: frandom(5,13), startalphaf: 1.0, fadestepf: -0.002, sizestep: frandom(0.0,3), startroll: random(-180,180));
		}
	Go:
		TRCR A 1 BRIGHT A_Quake(4,4,0,100,0);
        TNT1 A 0 A_JumpIfTracerCloser(150,"Noise");
        Loop;
    Noise:
        TNT1 A 0 A_StartSound("PM/BulletWhiz",3,CHANF_DEFAULT,0.50,pitch:1.5);
    Cont:
        TRCR A 1 BRIGHT A_Quake(4,4,0,100,0);
        Loop;
	Death:
	Crash:
	XDeath:
	    TRCR A 0 A_StartSound("Tyrant/ShellExplode",volume:0.75,pitch:2);
		TNT1 A 0 A_SpawnItemEx("OrangeShockwaveBig");
		TNT1 A 0 A_SetScale(2.3);
		TNT1 A 0 A_SpawnItemEx("PM_GenericExplosionFlames",0,0,0,random(-3,3),random(-3,3),random(-2,3),0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE);
	    TNT1 A 0
	    {
		 A_Explode(30, 100, XF_NOTMISSILE);
		 for (int i = random(1, 3); i > 0; i--)
		 {
			A_SpawnItemEx("PM_BulletHit",0,0,0,frandom(60,60),frandom(-60,60),frandom(-60,60),random(-360,360),SXF_NOCHECKPOSITION,0);
			A_SpawnParticleEx("727272", TexMan.CheckForTexture("DUSTC0"), style: STYLE_Normal, flags: SPF_RELATIVE|SPF_ROLL, lifetime: random(40,70), size: frandom(1,30), zoff: random(10,60), velx: frandom(-10,10),
			vely: frandom(-10,10), velz: frandom(-5,10),  accelz: frandom(-0.1,-0.5), startalphaf: 1.0, fadestepf: 0, sizestep: -0.2, startroll: random(-180,180), rollvel: random(-4,4));
		 }
		 for (int i = random(2, 8); i > 0; i--)
			A_SpawnParticleEx("", TexMan.CheckForTexture("SPKOA0"), style: STYLE_Add, flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL, lifetime: random(40,100), size: frandom(1,15), zoff: random(10,60), velx: frandom(-15,15),
			vely: frandom(-15,15), velz: frandom(-8,15),  accelz: frandom(-0.1,-0.5), startalphaf: 1.0, fadestepf: 0, sizestep: -0.1, startroll: random(-180,180));
		 A_SpawnParticleEx("727272", TexMan.CheckForTexture("GNSMK0"), style: STYLE_Normal, flags: SPF_RELATIVE|SPF_ROLL, lifetime: random(50,500), size: frandom(60,300), velx: frandom(-1.5,1.5), vely: frandom(-1.5,1.5), velz: frandom(-0.1,0.2), startalphaf: frandom(0.4,0.6), fadestepf: -1, sizestep: frandom(0.1,3), startroll: random(-180,180), rollvel: frandom(-0.5,0.5));
		 for(int i=3;i>0;i--)
		 A_SpawnParticleEx
		 ( "#d2d2d2", tex[0], style: STYLE_Normal, flags: SPF_RELATIVE|SPF_ROLL, lifetime: random(50,120),
		 size: frandom(65,150), velx: frandom(-2,2), vely: frandom(-2,2), velz: frandom(-1,1), startalphaf: frandom(0.4,0.9),
		 fadestepf: -1, sizestep: frandom(0.0,1.4), startroll: random(-180,180), rollvel: frandom(-1,1));
	    }
        Stop;
	}
}

Class PM_DirectorWarning : Actor
{
  override void PostBeginPlay()
  {
	A_SpawnParticleEx("ff2424", TexMan.CheckForTexture("RLSSA0"), STYLE_ADD, SPF_FULLBRIGHT|SPF_RELATIVE|SPF_ROLL, 1, 10, 0, frandom(-1, 1), frandom(-1, 1), frandom(-1, 1));
	Destroy();
	return;
  }
}

Class PM_DirectorControlledRock : Actor
{
	Default
	{
		Monster;
		Tag "Psychic Boulder";
		Health 256;
		+ROLLSPRITE
		+ROLLCENTER
		+NOGRAVITY
		+SHOOTABLE
		+THRUACTORS
		+THRUSPECIES
		-COUNTKILL
		Species "Mastermind";
		Radius 30;
		Height 56;
		Scale 1.65;
		StencilColor "7842f5";
		+DONTTHRUST
		+NOSPRITESHADOW
	}
	
	float rollv;
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		rollv = frandom(-5, 5);
		if (master && master.target) target = master.target;
	}
	
	override void Tick()
	{
		super.Tick();
		if (!level.isFrozen() && Health > 0)
		{
			roll += rollv;
			if (!random(0, 1)) A_SpawnParticleEx("2f1085", TexMan.CheckForTexture("GNSMK0"), STYLE_Add, SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL, random(100, 400), random(40,200), xoff: frandom(-45, 45), yoff: frandom(-45, 45), zoff: frandom(0, 40), velx: frandom(-1, 1), vely: frandom(-1, 1), velz: frandom(-.51, .51), startalphaf: frandom(0.4, 0.6), sizestep: frandom(0, 2), startroll: random(-180,180), rollvel: frandom(-4, 4));
			A_SpawnParticleEx("", TexMan.CheckForTexture("PURLA0"), style: STYLE_Add, flags: SPF_ROLL|SPF_RELATIVE|SPF_FULLBRIGHT, lifetime: random(1,25), size: frandom(1,300), xoff: frandom(-30,30), yoff: frandom(-30,30), zoff: frandom(5,40), velx: random(-1,1), vely: random(-1,1), velz: random(-1,1), startalphaf:frandom(0.1, 0.5), fadestepf: -1, sizestep: frandom(-5,5), startroll: random(-180,180), rollvel: frandom(-2,2));
		}
	}
	
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 ThrustThing(random(0,360),random(-30,30));
		R0K_ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 { vel /= 1.1; }
		Goto Look;
	Look:
		R0K_ A 10 A_Look();
		Loop;
	See:
		R0K_ AAAAAAAAAAAAAAAAAAAAA 1 A_FaceTarget();
		Goto Launch;
	Launch:
		R0K_ A 0 A_SpawnProjectile("PM_PsiRockLaunch", 20);
		Stop;
	Death:
	XDeath:
		R0K_ A 0 A_SetRenderStyle(1, STYLE_ADDSTENCIL);
		R0K_ A 0
		{
			A_SetScale(2);
			A_SpawnItemEx("OrangeShockwaveBig", flags: SXF_NOCHECKPOSITION|SXF_TRANSFERSTENCILCOL|SXF_TRANSFERRENDERSTYLE);
			for (int i = random(2, 4); i > 0; i--) A_SpawnItemEx("PM_BigFireGlobs",0,0,0,random(-3,3),random(-3,3),random(-2,3),0, flags: SXF_NOCHECKPOSITION|SXF_TRANSFERSTENCILCOL|SXF_TRANSFERRENDERSTYLE);
			for (int i = random(2, 4); i > 0; i--) A_SpawnItemEx("PM_GenericExplosionFlames",0,0,0,random(-3,3),random(-3,3),random(-2,3),0, flags: SXF_NOCHECKPOSITION|SXF_TRANSFERSTENCILCOL|SXF_TRANSFERRENDERSTYLE|SXF_TRANSFERSCALE);
			for (int i = random(10, 15); i > 0; i--) A_SpawnParticleEx("727272", TexMan.CheckForTexture("DUSTC0"), style: STYLE_Normal, flags: SPF_RELATIVE|SPF_ROLL, lifetime: random(40,70), size: frandom(1,30), zoff: random(10,60), velx: frandom(-10,10), vely: frandom(-10,10), velz: frandom(-5,10),  accelz: frandom(-0.1,-0.5), startalphaf: 1.0, fadestepf: 0, sizestep: -0.2, startroll: random(-180,180), rollvel: random(-4,4));
			for (int i = random(15, 45); i > 0; i--) A_SpawnParticleEx("", TexMan.CheckForTexture("R0K_B0"), STYLE_Normal, SPF_RELATIVE|SPF_ROLL, random(90, 140), random(5,35), xoff: random(-35, 35), yoff: frandom(-35, 35), zoff: frandom(0, 35), velx: frandom(-8, 8), vely: frandom(-8, 8), velz: frandom(0.1, 10), accelz: -0.08, startroll: random(-180,180), rollvel: frandom(-4, 4));
			A_StartSound("Director/RockSmash");
		}
		Stop;
	}
}

Class PM_PsiRockLaunch : PM_DirectorTracer
{
	Default
	{
		Scale 1.65;
		SeeSound "Husk/Throw";
		DeathSound "";
		DamageType "Normal";
		RenderStyle "Normal";
		DamageFunction (5);
		DamageType "Crush";
		Alpha 1;
		Speed 30;
		+ROLLSPRITE
		+ROLLCENTER
		+MTHRUSPECIES
		+THRUSPECIES
		Species "Mastermind";
		StencilColor "7842f5";
	}
	
	float rollv;
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		rollv = frandom(-5, 5);
		if (master && master.target) target = master.target;
	}
	
	override void Tick()
	{
		super.Tick();
		if (!level.isFrozen())
		{
			roll += rollv;
			if (!random(0, 1)) A_SpawnParticleEx("2f1085", TexMan.CheckForTexture("GNSMK0"), STYLE_Add, SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL, random(100, 400), random(40,200), xoff: frandom(-45, 45), yoff: frandom(-45, 45), zoff: frandom(0, 40), velx: frandom(-1, 1), vely: frandom(-1, 1), velz: frandom(-.51, .51), startalphaf: frandom(0.4, 0.6), sizestep: frandom(0, 2), startroll: random(-180,180), rollvel: frandom(-4, 4));
			A_SpawnParticleEx("", TexMan.CheckForTexture("PURLA0"), style: STYLE_Add, flags: SPF_ROLL|SPF_RELATIVE|SPF_FULLBRIGHT, lifetime: random(1,25), size: frandom(1,300), xoff: frandom(-30,30), yoff: frandom(-30,30), zoff: frandom(5,40), velx: random(-1,1), vely: random(-1,1), velz: random(-1,1), startalphaf:frandom(0.1, 0.5), fadestepf: -1, sizestep: frandom(-5,5), startroll: random(-180,180), rollvel: frandom(-2,2));
		}
	}
	
	States
	{
	Spawn:
		R0K_ C 1;
		Loop;
	Death:
	XDeath:
		R0K_ C 0 A_SetRenderStyle(1, STYLE_ADDSTENCIL);
		R0K_ C 0
		{
			A_Explode((45), 150);
			A_RadiusThrust(5000,350);
			A_SetScale(2);
			A_SpawnItemEx("OrangeShockwaveBig", flags: SXF_NOCHECKPOSITION|SXF_TRANSFERSTENCILCOL|SXF_TRANSFERRENDERSTYLE);
			for (int i = random(2, 4); i > 0; i--) A_SpawnItemEx("PM_BigFireGlobs",0,0,0,random(-3,3),random(-3,3),random(-2,3),0, flags: SXF_NOCHECKPOSITION|SXF_TRANSFERSTENCILCOL|SXF_TRANSFERRENDERSTYLE);
			for (int i = random(2, 4); i > 0; i--) A_SpawnItemEx("PM_GenericExplosionFlames",0,0,0,random(-3,3),random(-3,3),random(-2,3),0, flags: SXF_NOCHECKPOSITION|SXF_TRANSFERSTENCILCOL|SXF_TRANSFERRENDERSTYLE|SXF_TRANSFERSCALE);
			for (int i = random(10, 15); i > 0; i--) A_SpawnParticleEx("727272", TexMan.CheckForTexture("DUSTC0"), style: STYLE_Normal, flags: SPF_RELATIVE|SPF_ROLL, lifetime: random(40,70), size: frandom(1,30), zoff: random(10,60), velx: frandom(-10,10), vely: frandom(-10,10), velz: frandom(-5,10),  accelz: frandom(-0.1,-0.5), startalphaf: 1.0, fadestepf: 0, sizestep: -0.2, startroll: random(-180,180), rollvel: random(-4,4));
			for (int i = random(15, 45); i > 0; i--) A_SpawnParticleEx("", TexMan.CheckForTexture("R0K_B0"), STYLE_Normal, SPF_RELATIVE|SPF_ROLL, random(90, 140), random(5,35), xoff: random(-35, 35), yoff: frandom(-35, 35), zoff: frandom(0, 35), velx: frandom(-8, 8), vely: frandom(-8, 8), velz: frandom(0.1, 10), accelz: -0.08, startroll: random(-180,180), rollvel: frandom(-4, 4));
			A_StartSound("Director/RockSmash");
		}
		Stop;
	}
}

Class PM_DirectorHallucinationSummon : PM_ExaltedCultSummon
{
  Default
  {
  Speed 12;
  }
  
  States
  {
  Spawn:
   TNT1 A 0;
   TNT1 AAAAAAAAAAAA random(1,3) { vel.x += frandom(-2, 2); vel.y += frandom(-2, 2); }
  Go:
   TNT1 A 0 A_ScaleVelocity(0);
   TNT1 AAAAAAAAAAAAAAAAAAAAA 1
   {
		if (!random(0, 1)) A_SpawnParticleEx("2f1085", TexMan.CheckForTexture("GNSMK0"), STYLE_Add, SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL, random(100, 400), random(40,200), xoff: frandom(-45, 45), yoff: frandom(-45, 45), zoff: frandom(0, 40), velx: frandom(-1, 1), vely: frandom(-1, 1), velz: frandom(-.51, .51), startalphaf: frandom(0.4, 0.6), sizestep: frandom(0, 2), startroll: random(-180,180), rollvel: frandom(-4, 4));
		A_SpawnParticleEx("", TexMan.CheckForTexture("PURLA0"), style: STYLE_Add, flags: SPF_ROLL|SPF_RELATIVE|SPF_FULLBRIGHT, lifetime: random(1,25), size: frandom(1,300), xoff: frandom(-30,30), yoff: frandom(-30,30), zoff: frandom(5,40), velx: random(-1,1), vely: random(-1,1), velz: random(-1,1), startalphaf:frandom(0.1, 0.5), fadestepf: -1, sizestep: frandom(-5,5), startroll: random(-180,180), rollvel: frandom(-2,2));
		A_FaceTracer();
   }
   TNT1 A 0 A_SpawnItemEx("PM_DirectorHallucinationSpawn",zofs:10,flags:SXF_NOCHECKPOSITION);
   Stop;
  }
}

Class PM_DirectorHallucinationSpawn : RandomSpawner
{
	Default
	{
		DropItem "PM_HallucinationSquire", 255, 45;
		DropItem "PM_HallucinationFusionite", 255, 40;
		DropItem "PM_HallucinationNoble", 255, 30;
		DropItem "PM_HallucinationBruiser", 255, 10;
	}
}

mixin class PM_DirectorHologram
{
	Default
	{
		+THRUSPECIES
		+THRUACTORS
		+NOINFIGHTING
		-COUNTKILL
		Species "Psi";
		RenderStyle "AddShaded";
		SeeSound "";
		DeathSound "";
		Translation "0:255=%[0.14,0.07,0.28]:[1.29,0.55,1.89]";
		StencilColor "Purple";
		+NOBLOOD
		+NOPAIN
	}
	
	int psitimer;
	bool goodbye;
	
	override void Tick()
	{
		if (level.isFrozen()) return;
		super.Tick();
		alpha = frandom(0.2, 0.7);
		if (target && CheckSight(target)) A_SpawnItemEx("PM_GenericPhaseGhost",zofs:6,flags:SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERSTENCILCOL);
		
		psitimer--;
		if (psitimer <= 0 && !goodbye) { setStateLabel("PsiDissapear"); goodbye = true; }
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		psitimer = random(200, 350);
		if (master && master.target) target = master.target;
		PsiTele();
	}
	
	void PsiTele()
	{
		A_StartSound("PM/NormalTeleport");
		A_SpawnItemEx("OrangeShockwaveBig", flags: SXF_NOCHECKPOSITION|SXF_TRANSFERSTENCILCOL|SXF_TRANSFERRENDERSTYLE);
		for (int i = random(4, 5); i > 0; i--) A_SpawnItemEx("PM_GenericPhaseGhost",zofs:6,xvel:frandom(-5, 5),yvel:frandom(-5, 5),flags:SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERSTENCILCOL);
	}
	
	States
	{
	Spawn:
		Goto See2;
	PsiDissapear:
		#### # 30 A_FaceTarget();
		#### # 2 PsiTele();
		Stop;
	}
}

Class PM_HallucinationNoble : PM_Noble
{
	mixin PM_DirectorHologram;
	
	Default
	{
		PMMonsterBase.CodexLore "";
		Speed 0;
		Tag "Projected Noble";
		Health 250;
		Species "Mastermind";
		+THRUSPECIES
		+DONTHARMSPECIES
	}
	
	States
	{
	Spawn:
		TNT1 A 0 NoDelay { psitimer = random(200, 350); }
	Idle:
		NO1S AB 10 A_Look();
		Loop;
	See:
		NO1S A 1
		{
			A_FaceTarget();
			if (!(getAge() % random(5, 25)) && target && checkSight(target) && target.health > 0) SetStateLabel("Sentry");
		}
		Loop;
	Sentry:
		NO1S EEEEE 1 Light("Greenball4") 
		{
		A_FaceTarget();
		A_Spawnitemex("PM_GreenFireEffect",10,random(40,35),60,0,0,2);
		}
		NO1S EEE 1 Light("Greenball4")
		{
		PM_LeadTarget(15);
		A_Spawnitemex("PM_GreenFireEffect",10,random(40,35),57,0,0,2);
		}
		NO1S FFFFF 1 Light("Greenball3") 
		{
		PM_LeadTarget(15);
		A_Spawnitemex("PM_GreenFireEffect",10,random(40,35),45,0,0,2);
		}
		NO1S G 1;
		NO1S G 15 Light("Greenball3")
		{
		PM_LeadTarget(15);
		A_SpawnProjectile("PM_NobleFireball",40,0,0,CMF_AIMDIRECTION|CMF_OFFSETPITCH,pitch*1);
		A_StartSound("HellKnight/Cast",CHAN_7);
		}
		NO2S EEE 1 Light("Greenball4")
		{
		PM_LeadTarget(15);
		A_Spawnitemex("PM_GreenFireEffect",10,random(-40,-35),57,0,0,2);
		}
		NO2S FFFFF 1 Light("Greenball3") 
		{
		PM_LeadTarget(15);
		A_Spawnitemex("PM_GreenFireEffect",10,random(-40,-35),45,0,0,2);
		}
		NO1S G 1;
		NO2S G 15 Light("Greenball3")
		{
		PM_LeadTarget(15);
		A_SpawnProjectile("PM_NobleFireball",40,0,0,CMF_AIMDIRECTION|CMF_OFFSETPITCH,pitch*1);
		A_StartSound("HellKnight/Cast",CHAN_7);
		}
		Goto See;
	Death:
	XDeath:
	Crash:
		Goto PsiDissapear;
	}
}

Class PM_HallucinationFusionite : PM_Fusionite
{
	mixin PM_DirectorHologram;
	
	Default
	{
		PMMonsterBase.CodexLore "";
		Tag "Projected Fusionite";
		Health 250;
		Species "Mastermind";
		+THRUSPECIES
		+DONTHARMSPECIES
	}
	
	States
	{
	Spawn:
		TNT1 A 0 NoDelay { psitimer = random(100, 250); }
	Idle:
		FSPI AB 10 A_Look();
		Loop;
	See:
		NO1S A 1
		{
			A_FaceTarget();
			if (!(getAge() % random(5, 25)) && target && checkSight(target) && target.health > 0) SetStateLabel("Sentry");
		}
		Loop;
	See:
		TNT1 A 0 PM_AlertSound();
	Missile:
		TNT1 A 0 A_Jump(128,"Shotgun");
		FSPI G 15
		{
		A_StartSound("Fusionite/Charge");
		A_FaceTarget();
		}
		FSPI G 3 A_FaceTarget(8,8);
		TNT1 A 0 A_StartSound("GenericPlasmaFire");
		FSPI H 3 Light("GreenBall3")
		{
		for(int i=3;i>0;i--)
		A_SpawnProjectile("PM_GreenFusioniteFireFlare",22,0,0,CMF_OFFSETPITCH|CMF_AIMDIRECTION,pitch*1);
		A_SpawnProjectile("PM_FusionShot",22,0,0,CMF_OFFSETPITCH|CMF_AIMDIRECTION,pitch*1);
		}
		FSPI G 1 A_CheckSight("Death");
		TNT1 A 0 A_Jump(25,"Death");
		Goto Missile+2;
	Shotgun:
		FSPI A 9 A_FaceTarget();
		TNT1 A 0 A_StartSound("Fusionite/ScatterCharge",13);
		FSPI GGGGGG 5 Light("GreenBall2") A_FaceTarget();
		TNT1 A 0 A_StartSound("HellSoldier/ChargeReady2",14);
		FSPI GGGGG 5 Light("GreenBall2") A_FaceTarget();
		TNT1 A 0 A_JumpIf(user_numbullets < 0, "ShotgunNoAmmo");
		TNT1 A 0 A_StartSound("Fusionite/Scattershot",15);
		FSPI H 3 Light("GreenBall3")
		{
		A_FaceTarget();
		A_SpawnProjectile("PM_GreenFusioniteFlare",22,0);
		for(int i=2;i>0;i--)
		A_SpawnProjectile("PM_GreenFusioniteFireFlare",22,0);
		for(int i=5;i>0;i--)
		A_SpawnProjectile("PM_ScatterFusionShot",22,0,frandom(-12,12),CMF_OFFSETPITCH,frandom(-3,3));
		}
		FSPI G 3 A_FaceTarget();
		TNT1 A 0 A_StartSound("GenericSteam");
		FSPI GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG 1;
		Goto Death;
	Death:
	XDeath:
	Crash:
		Goto PsiDissapear;
	}
}

Class PM_HallucinationBruiser : PM_Bruiser
{
	mixin PM_DirectorHologram;
	
	Default
	{
		PMMonsterBase.CodexLore "";
		Health 600;
		Tag "Projected Bruiser";
		Species "Mastermind";
		+THRUSPECIES
		+DONTHARMSPECIES
	}
	
	States
	{
	Spawn:
		TNT1 A 0 NoDelay { psitimer = random(200, 350); }
	Idle:
		I01A A 10 A_Look();
		Loop;
	See:
	    TNT1 A 0 { bSPRITEFLIP = false; }
        I01A AABB 4 A_Chase();
		TNT1 A 0 A_Recoil(-2);
		TNT1 A 0 A_SpawnItemEx("PM_BruiserWalkFire",6,10,flags:SXF_NOCHECKPOSITION|SXF_TRANSFERRENDERSTYLE|SXF_TRANSFERSTENCILCOL);
		TNT1 A 0 A_Quake(1, 4, 0, 312);
		TNT1 A 0 A_StartSound("hoofstep",3);
		I01A CCDD 4 A_Chase();
		TNT1 A 0 A_Recoil(-2);
		TNT1 A 0 A_SpawnItemEx("PM_BruiserWalkFire",6,-10,flags:SXF_NOCHECKPOSITION|SXF_TRANSFERRENDERSTYLE|SXF_TRANSFERSTENCILCOL);
		TNT1 A 0 A_Quake(1, 4, 0, 312);
		TNT1 A 0 A_StartSound("hoofstep",3);
        Loop;
    Missile:
	Melee:
	  TNT1 A 0 A_StartSound("GenericChargeHeavy",CHAN_6);
	  TNT1 A 0 A_StartSound("Bruiser/Sight",CHAN_7);
	  I01A D 7 Light("GreenBall3") A_FaceTarget();
	  I01A IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII 1 Light("GreenBall3")
	  {
       A_SpawnItemEX("PM_LargeGreenFireEffect",12,random(45,40),70,0,0,random(1,3));
	   A_SpawnItemEX("PM_LargeGreenFireEffect",12,random(-45,-40),70,0,0,random(1,3));
	   A_FaceTarget();
	  }
	  I01A J 12 Light("GreenBall3") A_FaceTarget();
	  TNT1 A 0 A_StartSound("baron/attack");
	  I01A K 12 Light("GreenBall3")  A_SpawnProjectile("PM_BruiserMeteor",38,-5,0);
	  TNT1 A 0 A_StopSound(CHAN_6);
	  Goto Death;
	Death:
	XDeath:
	Crash:
		Goto PsiDissapear;
	}
}

Class PM_HallucinationSquire : PM_Squire
{
	mixin PM_DirectorHologram;
	
	Default
	{
		Health 250;
		Tag "Projected Squire";
		+NOFEAR
		Species "Mastermind";
		+THRUSPECIES
		+DONTHARMSPECIES
	}
	
	States
	{
	Spawn:
		TNT1 A 0 NoDelay { psitimer = random(200, 350); }
	Idle:
		BOS6 A 10 A_Look();
		Loop;
	See:
		TNT1 A 0 A_SetSpeed(12);
		BOS6 AA 3 A_Chase();
		TNT1 AA 0 A_Recoil(-0.8);
		BOS6 BB 3 A_Chase();
		TNT1 A 0 A_StartSound("Squire/Step");
		TNT1 AA 0 A_Recoil(-1.5);
		BOS6 CC 3 A_Chase();
		TNT1 AA 0 A_Recoil(-0.8);
		BOS6 DD 3 A_Chase();
		TNT1 A 0 A_StartSound("Squire/Step");
		TNT1 AA 0 A_Recoil(-1.5);
		Loop;
	Melee:
		BOS6 E 5 A_FaceTarget();
		BOS6 E 0 A_StartSound("Doom4/Other/MeleeSwing",5,1.0,false,1.1);
		BOS6 E 5 A_FaceTarget();
		BOS6 G 5 A_CustomMeleeAttack(random(10,30),"Doom4/Other/MeleeHit");
		BOS6 F 2 A_Recoil(2);
		Goto See;
	Missile:
		TNT1 A 0 A_Jump(220, "Leap");
		TNT1 A 0 A_Jump(230,"FireBall");
		Goto Leap;
	FireBall:
		BOS6 EEEEEEEEE 1 Light("Greenball4") 
		{
		A_FaceTarget();
		A_Spawnitemex("PM_GreenFireEffect",10,random(30,25),60,0,0,2);
		}
		BOS6 EEEE 1 Light("Greenball4")
		{
		A_FaceTarget();
		A_Spawnitemex("PM_GreenFireEffect",10,random(30,25),57,0,0,2);
		}
		BOS6 FFFF 1 Light("Greenball3") 
		{
		A_FaceTarget();
		A_Spawnitemex("PM_GreenFireEffect",10,random(30,25),45,0,0,2);
		}
		BOS6 G 6 Light("Greenball3")
		{
		A_FaceTarget();
		A_StartSound("HellKnight/Cast",CHAN_7);
		A_SpawnProjectile("PM_SquireFireball",40);
		}
		BOS6 G 5 Light("Greenball3")
		{
		A_FaceTarget();
		}
		Goto See;
	Leap:
	    TNT1 A 0 
	    { 
	    if(target && Distance3D(target) >= 568)
	    SetStateLabel("Fireball");
	    }
		TNT1 A 0 A_StartSound("Squire/LeapReady",13);
		BOS6 EEEEE 4  A_FaceTarget();
		BOS6 EEE 5 A_FaceTarget();
		TNT1 A 0 A_StartSound("Squire/Leap",13);
		BOS6 A 2 PM_LeapTo(target, 700, "See");
	LeapLoop:
		BOS6 FFFF 1 
		{
		if(random(1,15) == 1)
		ThrustThing(random(0,360)*256/360,2,0,0);
		A_SpawnItemEx("KnightLeapTrail",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
		}
        TNT1 A 0 A_CheckFloor("LeapEnd");
		Loop;
	LeapEnd:
		TNT1 A 0 A_StartSound("Doom4/Monsters/BaronFloorPound",CHAN_7,CHANF_OVERLAP);
		TNT1 A 0 A_Quake(4,20,0,512);
		TNT1 AAAAAAAAA 0 A_SpawnItemEx("PM_BulletShrapnelNoCheck",random(-5,5),random(-5,5),0,random(-3,3),random(-5,5),random(5,20),0,SXF_NOCHECKPOSITION);
		TNT1 AAAAA 0 A_SpawnItemEx("PM_BruiserExplosionFlareEffectLong",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
		TNT1 AAAAA 0 A_SpawnItemEx("PM_BoomSmoke",random(-1,1),random(-1,1),random(2,4),random(-1,1),random(-1,1),random(0,1),0,SXF_NOCHECKPOSITION);
		TNT1 AA 0 A_SpawnItemEx("PM_BruiserExplosionFlareSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
		TNT1 A 0 { if(target && CheckSight(target) && Distance3D(target) < 145) SetStateLabel("DoDamage"); }
		Goto ResumeLeapEnd;
	DoDamage:
		TNT1 A 0 A_BetaSkullAttack;
		Goto ResumeLeapEnd;
	ResumeLeapEnd:
		BOS6 G 1 A_Stop;
		BOS6 G 2 { psitimer -= random(10, 30); }
		Goto See; 
	Death:
	XDeath:
	Crash:
		Goto PsiDissapear;
	}
}

Class PM_DirectorResistanceGiver : Inventory
{
  Default
  {
	+INVENTORY.ALWAYSPICKUP;
	+INVENTORY.AUTOACTIVATE;
  }
  
  override bool Use(bool pickup)
  {
	if (!owner && owner.CheckInventory("PM_DirectorResistance", 1)) return false;
	if (owner.bISMONSTER && !owner.bBOSS && owner.health > 0 && owner.health <= 1000)
		owner.GiveInventory("PM_DirectorResistance", 1);
	return true;
  }
}

Class PM_DirectorResistance : PowerProtection
{
  Default
  {
	+INVENTORY.ALWAYSPICKUP;
	+INVENTORY.AUTOACTIVATE;
	Powerup.Duration -25;
	DamageFactor 0.95;
  }
  
  override void PostBeginPlay()
  {
	if (owner && owner.health > 0)
	{
		owner.A_AttachLight("Buff", DynamicLight.PulseLight, "6d32a8",  int(ceil( owner.radius )) * 1, int(ceil( owner.radius )) * 3);
		for (int i = 0; i < 360; i += random(10, 50))
		{
			owner.A_SpawnParticleEx("", TexMan.CheckForTexture("SPKPA0"), STYLE_Add, SPF_RELATIVE|SPF_ROLL|SPF_FULLBRIGHT, random(55, 110), random(5,25), 0, frandom(owner.radius, -owner.radius), frandom(-owner.radius, owner.radius), velx: frandom(-1, 1), vely: frandom(-1, 1), velz: frandom(0.1, 5), accelz: 0.08, sizestep: -.5, startroll: random(-180,180), rollvel: frandom(-4, 4));
			owner.A_SpawnParticleEx("7c2ec9", TexMan.CheckForTexture("GNSMK0"), STYLE_ADD, SPF_FULLBRIGHT|SPF_RELATIVE|SPF_ROLL, 180, 30, 0, frandom(owner.radius, -owner.radius), frandom(-owner.radius, owner.radius), frandom(0, owner.height), frandom(-0.01, 0.01) + 5, frandom(-0.01, 0.01), frandom(0.01, -0.01), frandom(-0.25, 0.25), frandom(-0.25, 0.25), frandom(-0.25, 0.25), startalphaf: 0.85
			, fadestepf: 0.0375, sizestep: 3.5, startroll: frandom(0, 360), rollvel: random(0, 1) ? 0.5 : -0.5);
		}
	}
  }
  
  override void DoEffect()
  {
	super.DoEffect();
	
	if (owner && owner.health > 0 && !level.isFrozen())
	{
		if ((level.time % random(1, 3)) == 0)
			owner.A_SpawnParticleEx("", TexMan.CheckForTexture("SPKPA0"), STYLE_Add, SPF_RELATIVE|SPF_ROLL|SPF_FULLBRIGHT, random(40, 80), random(5,25), 0, frandom(owner.radius, -owner.radius), frandom(-owner.radius, owner.radius), velx: frandom(-1, 1), vely: frandom(-1, 1), velz: frandom(0.1, 3), accelz: 0.08, sizestep: -.5, startroll: random(-180,180), rollvel: frandom(-4, 4));
	}
  }
  
  override void DetachFromOwner()
  {
	if (owner && owner.health > 0)
	{
		owner.A_StopSounds(0, 0);
		owner.A_RemoveLight("Buff");
		
		for (int i = 0; i < 360; i += random(10, 50))
		{
			owner.A_SpawnParticleEx("", TexMan.CheckForTexture("SPKPA0"), STYLE_Add, SPF_RELATIVE|SPF_ROLL|SPF_FULLBRIGHT, random(55, 110), random(5,25), frandom(owner.radius, -owner.radius), frandom(-owner.radius, owner.radius), velx: frandom(-1, 1), vely: frandom(-1, 1), velz: frandom(0.1, 5), accelz: 0.08, sizestep: -.5, startroll: random(-180,180), rollvel: frandom(-4, 4));
			owner.A_SpawnParticleEx("7c2ec9", TexMan.CheckForTexture("GNSMK0"), STYLE_ADD, SPF_FULLBRIGHT|SPF_RELATIVE|SPF_ROLL, 180, 30, 0, frandom(owner.radius, -owner.radius), frandom(-owner.radius, owner.radius), frandom(0, owner.height), frandom(-0.01, 0.01) + 5, frandom(-0.01, 0.01), frandom(0.01, -0.01), frandom(-0.25, 0.25), frandom(-0.25, 0.25), frandom(-0.25, 0.25), startalphaf: 0.85
			, fadestepf: 0.0375, sizestep: 3.5, startroll: frandom(0, 360), rollvel: random(0, 1) ? 0.5 : -0.5);
		}
	}
  }
  
  override void OwnerDied()
  {
	if (owner)
	{
		owner.A_StopSounds(0, 0);
		owner.A_RemoveLight("Buff");
		
		for (int i = 0; i < 360; i += random(10, 50))
		{
			owner.A_SpawnParticleEx("", TexMan.CheckForTexture("SPKPA0"), STYLE_Add, SPF_RELATIVE|SPF_ROLL|SPF_FULLBRIGHT, random(55, 110), random(5,25), frandom(owner.radius, -owner.radius), frandom(-owner.radius, owner.radius), velx: frandom(-1, 1), vely: frandom(-1, 1), velz: frandom(0.1, 5), accelz: 0.08, sizestep: -.5, startroll: random(-180,180), rollvel: frandom(-4, 4));
			owner.A_SpawnParticleEx("7c2ec9", TexMan.CheckForTexture("GNSMK0"), STYLE_ADD, SPF_FULLBRIGHT|SPF_RELATIVE|SPF_ROLL, 180, 30, 0, frandom(owner.radius, -owner.radius), frandom(-owner.radius, owner.radius), frandom(0, owner.height), frandom(-0.01, 0.01) + 5, frandom(-0.01, 0.01), frandom(0.01, -0.01), frandom(-0.25, 0.25), frandom(-0.25, 0.25), frandom(-0.25, 0.25), startalphaf: 0.85
			, fadestepf: 0.0375, sizestep: 3.5, startroll: frandom(0, 360), rollvel: random(0, 1) ? 0.5 : -0.5);
		}
		
		Destroy();
	}
  }
}

Class PM_DirectorMindPower : Actor
{
	Default
	{
	RenderStyle "AddShaded";
	StencilColor "7c2ec9";
	+NOINTERACTION
	-SOLID
	Scale 1.16;
	}
	
	States
	{
	Spawn:
		C28Y ABCDEFGHIJKLMNOPQ 1;
		Stop;
	}
}

Class PM_DirectorPsychicLightning : Actor
{
	Default
	{
	Translation "0:255=%[0.00,0.00,0.00]:[1.43,1.10,2.00]";
	Scale 1.25;
	RenderStyle "Add";
	Projectile;
	Speed 55;
	-SOLID
	+BRIGHT
	+SEEKERMISSILE
	+THRUACTORS
	+FLOORHUGGER
	+FLATSPRITE
	+ROLLSPRITE
	}
 
 override void PostBeginPlay()
 {
  Super.PostBeginPlay();
  timer = random(1,5);
  tex[0] = TexMan.CheckForTexture("SPKPA0",TexMan.Type_Sprite);
  tex[1] = TexMan.CheckForTexture("PURLA0",TexMan.Type_Sprite);
  tex[2] = TexMan.CheckForTexture("DUSTC0",TexMan.Type_Sprite);
 }
 
 TextureID tex[3];
 
 int timer;
 
 States
 {
  Spawn:
   TNT1 A random(3, 24) NoDelay;
   TNT1 A 0
   {
	A_ScaleVelocity(0);
	A_Stop();
	A_FadeOut(1.0,FTF_CLAMP);
   }
   TNT1 A random(15,85);
   TNT1 A 0 
   { A_StartSound("PM/WarDebrisLaunch",20, pitch: frandom(0.9, 1.2)); }
   SBLL A 1 Light("PM_DirectorPsychicLight2")
   {
    if(timer >= 50)
	SetStateLabel("Explode");
    A_FadeIn(0.095,FTF_CLAMP);
	A_SetRoll(random(0,360));
	A_QuakeEx(1,1,1,1,0,500,"",QF_RELATIVE|QF_SCALEDOWN|QF_3D,rollintensity:0.8,rollwave:0.8);
	A_SetScale(Scale.X+0.025,Scale.Y+0.025);
	timer++;
   }
   Wait;
   Explode:
    TNT1 A 0
	{
	bFLATSPRITE = false;
	bROLLSPRITE = false;
	bSPRITEFLIP = randompick(false, true);
	A_SetScale(frandom(1, 1.5),4);
	A_QuakeEx(3,3,3,10,0,900,"",QF_RELATIVE|QF_SCALEDOWN|QF_3D,rollintensity:0.8,rollwave:0.8);
	A_Explode(30,200);
	A_StartSound("Noble/BombExp",21);
	A_StartSound("Noble/BombExpFar",22);
	for(int i=3;i>0;i--)
	A_SpawnItemEx("PM_BigFireGlobs",0,0,0,random(-5,5),random(-5,5),random(-1,5),0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);
	A_SpawnProjectile("PM_DarkExpSmoke",7,0,random(0,360),2,random(0,360));
	A_SpawnParticleEx
	    ( "", tex[0], style: STYLE_Add, flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,
	    lifetime: 8, size: 600, zoff: -15, startalphaf: 1, startroll: random(-180,180) );
	for(int i=random(3,6);i>0;i--) A_SpawnParticleEx
	    ("", tex[1], style: STYLE_Add, flags: SPF_ROLL|SPF_RELATIVE|SPF_FULLBRIGHT,
	    lifetime: random(1, 30), size: frandom(1, 500), zoff: -15, velx: frandom(-3, 3), vely: frandom(-3, 3), velz: frandom(-3, 3), startalphaf: 1
		, fadestepf: -1, startroll: random(-180,180) );
	for(int i=random(3,6);i>0;i--) A_SpawnParticleEx
	    ( "727272", tex[2], style: STYLE_Normal, flags: SPF_RELATIVE|SPF_ROLL,
	    lifetime: random(40,70), size: frandom(2,35), zoff: random(10,35),
	    velx: frandom(-8,8), vely: frandom(-8,8), velz: frandom(1,12),
	    accelz: frandom(-0.1,-0.9), startalphaf: 1.0, sizestep: -0.2, startroll: random(-180,180), rollvel: random(-4,4) );
	}
	SP4_ ABCDEFG random(2, 3)
	{
		A_Explode((2),150);
		for(int i=random(3,6);i>0;i--) A_SpawnParticleEx
	    ("", tex[1], style: STYLE_Add, flags: SPF_ROLL|SPF_RELATIVE|SPF_FULLBRIGHT,
	    lifetime: random(1, 30), size: frandom(1, 500), zoff: -15, velx: frandom(-3, 3), vely: frandom(-3, 3), velz: frandom(-3, 3), startalphaf: 1
		, fadestepf: -1, startroll: random(-180,180) );
	}
	Stop;
   }
}

Class PM_DirectorSeekingLightning : Actor
{
 int timer;
 int secondtimer;
 Default
 {
 Scale 1.1;
 Speed 60;
 RenderStyle "Add";
 Projectile;
 +BRIGHT
 +SKYEXPLODE
 +SEEKERMISSILE
 +THRUACTORS
 }
 States
 {
  Spawn:
   TNT1 A 0;
   TNT1 A 1
   {
   if(timer >= 8)
   SetStateLabel("TPAndSeek");
   timer++;
   }
   Wait;
   Crash:
   XDeath:
   Death:
   TPAndSeek:
   TNT1 A 0
   {
	bFLOORHUGGER = true;
	bFLATSPRITE = true;
	bROLLSPRITE = true;
	A_SetScale(1.25,1.25);
	A_ScaleVelocity(0);
	A_FadeOut(1.0,FTF_CLAMP);
   }
   TNT1 A random(35,85);
   TNT1 A 0 A_Warp(AAPTR_TRACER,random(-80,80),random(-80,80),0,random(0,360),WARPF_NOCHECKPOSITION);
   TNT1 A 0 A_SpawnItemEx("PM_DirectorSeekedLightning");
	Stop;
   }
}

Class PM_DirectorSeekedLightning : Actor
{
	Default
	{
	Translation "0:255=%[0.00,0.00,0.00]:[1.43,1.10,2.00]";
	Scale 1.25;
	RenderStyle "Add";
	Projectile;
	Speed 55;
	-SOLID
	+BRIGHT
	+SEEKERMISSILE
	+THRUACTORS
	+FLOORHUGGER
	+FLATSPRITE
	+ROLLSPRITE
	}
 
 override void PostBeginPlay()
 {
  Super.PostBeginPlay();
  timer = random(1,5);
  tex[0] = TexMan.CheckForTexture("SPKPA0",TexMan.Type_Sprite);
  tex[1] = TexMan.CheckForTexture("PURLA0",TexMan.Type_Sprite);
  tex[2] = TexMan.CheckForTexture("DUSTC0",TexMan.Type_Sprite);
 }
 
 TextureID tex[3];
 
 int timer;
 
 States
 {
  Spawn:
   TNT1 A 0;
   TNT1 A 0
   {
	A_ScaleVelocity(0);
	A_Stop();
	A_FadeOut(1.0,FTF_CLAMP);
   }
   TNT1 A random(10,85);
   TNT1 A 0 
   { A_StartSound("PM/WarDebrisLaunch",20, pitch: frandom(0.9, 1.2)); }
   SBLL A 1 Light("PM_DirectorPsychicLight2")
   {
    if(timer >= 50)
	SetStateLabel("Explode");
    A_FadeIn(0.095,FTF_CLAMP);
	A_SetRoll(random(0,360));
	A_QuakeEx(1,1,1,1,0,500,"",QF_RELATIVE|QF_SCALEDOWN|QF_3D,rollintensity:0.8,rollwave:0.8);
	A_SetScale(Scale.X+0.025,Scale.Y+0.025);
	timer++;
   }
   Wait;
   Explode:
    TNT1 A 0
	{
	bFLATSPRITE = false;
	bROLLSPRITE = false;
	bSPRITEFLIP = randompick(false, true);
	A_SetScale(frandom(1, 1.5),4);
	A_QuakeEx(3,3,3,10,0,900,"",QF_RELATIVE|QF_SCALEDOWN|QF_3D,rollintensity:0.8,rollwave:0.8);
	A_Explode(30,200);
	A_StartSound("Noble/BombExp",21);
	A_StartSound("Noble/BombExpFar",22);
	for(int i=3;i>0;i--)
	A_SpawnItemEx("PM_BigFireGlobs",0,0,0,random(-5,5),random(-5,5),random(-1,5),0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);
	A_SpawnProjectile("PM_DarkExpSmoke",7,0,random(0,360),2,random(0,360));
	A_SpawnParticleEx
	    ( "", tex[0], style: STYLE_Add, flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,
	    lifetime: 8, size: 600, zoff: -15, startalphaf: 1, startroll: random(-180,180) );
	for(int i=random(3,6);i>0;i--) A_SpawnParticleEx
	    ("", tex[1], style: STYLE_Add, flags: SPF_ROLL|SPF_RELATIVE|SPF_FULLBRIGHT,
	    lifetime: random(1, 30), size: frandom(1, 500), zoff: -15, velx: frandom(-3, 3), vely: frandom(-3, 3), velz: frandom(-3, 3), startalphaf: 1
		, fadestepf: -1, startroll: random(-180,180) );
	for(int i=random(3,6);i>0;i--) A_SpawnParticleEx
	    ( "727272", tex[2], style: STYLE_Normal, flags: SPF_RELATIVE|SPF_ROLL,
	    lifetime: random(40,70), size: frandom(2,35), zoff: random(10,35),
	    velx: frandom(-8,8), vely: frandom(-8,8), velz: frandom(1,12),
	    accelz: frandom(-0.1,-0.9), startalphaf: 1.0, sizestep: -0.2, startroll: random(-180,180), rollvel: random(-4,4) );
	}
	SP4_ ABCDEFG random(2, 3)
	{
		A_Explode((2),150);
		for(int i=random(3,6);i>0;i--) A_SpawnParticleEx
	    ("", tex[1], style: STYLE_Add, flags: SPF_ROLL|SPF_RELATIVE|SPF_FULLBRIGHT,
	    lifetime: random(1, 30), size: frandom(1, 500), zoff: -15, velx: frandom(-3, 3), vely: frandom(-3, 3), velz: frandom(-3, 3), startalphaf: 1
		, fadestepf: -1, startroll: random(-180,180) );
	}
	Stop;
   }
}

Class PM_DirectorPsychicHeavyLightning : PM_DirectorPsychicLightning
{
	Default
	{
	Scale 1.6;
	}
 
 States
 {
  Spawn:
   TNT1 A random(3, 20) NoDelay;
   TNT1 A 0
   {
	A_ScaleVelocity(0);
	A_Stop();
	A_FadeOut(1.0,FTF_CLAMP);
   }
   TNT1 A random(15,65);
   TNT1 A 0 
   { A_StartSound("SoulReaver/Charge", attenuation: 0.35, pitch: 0.5); A_StartSound("PM/WarDebrisLaunch",20, pitch: frandom(0.6, 0.5)); A_StartSound("PM/WarDebrisLaunch",20, pitch: frandom(0.6, 0.5)); }
   SBLL A 1 Light("PM_DirectorPsychicLight2")
   {
    if(timer >= 100)
	SetStateLabel("Explode");
    A_FadeIn(0.095,FTF_CLAMP);
	A_SetRoll(random(0,360));
	for(int i=random(1,2);i>0;i--) A_SpawnParticleEx
	("", tex[1], style: STYLE_Add, flags: SPF_ROLL|SPF_RELATIVE|SPF_FULLBRIGHT,
	lifetime: random(1, 30), size: frandom(1, 300), zoff: -15, velx: frandom(-3, 3), vely: frandom(-3, 3), velz: frandom(-3, 3), startalphaf: 1
	, fadestepf: -1, startroll: random(-180,180) );
	A_SpawnParticleEx("", TexMan.CheckForTexture("SPKPA0"), STYLE_Add, SPF_RELATIVE|SPF_ROLL|SPF_FULLBRIGHT, random(55, 110), random(5,25), 0, frandom(50, -50), frandom(-50, 50), velx: frandom(-1, 1), vely: frandom(-1, 1), velz: frandom(0.1, 5), accelz: 0.08, sizestep: -.5, startroll: random(-180,180), rollvel: frandom(-4, 4));
	A_QuakeEx(1,1,1,1,0,500,"",QF_RELATIVE|QF_SCALEDOWN|QF_3D,rollintensity:0.8,rollwave:0.8);
	A_SetScale(Scale.X+0.025,Scale.Y+0.025);
	timer++;
   }
   Wait;
   Explode:
    TNT1 A 0
	{
		bFLATSPRITE = false;
		bROLLSPRITE = false;
		
		A_SetScale(2,2);
		A_QuakeEx(6,6,6,40,0,900,"",QF_RELATIVE|QF_SCALEDOWN|QF_3D,rollintensity:0.8,rollwave:0.8);
		A_Explode(60,350);
		A_StartSound("Noble/BombExp",21);
		A_StartSound("Noble/BombExpFar",22);
		A_StartSound("Director/PsychicThunder",23);
		A_StartSound("Director/PsychicTeleport",24);
		A_StartSound("Broken/VFGExp",25,volume:0.75);
		for(int i=3;i>0;i--)
		A_SpawnItemEx("PM_BigFireGlobs",0,0,0,random(-5,5),random(-5,5),random(-1,5),0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);
		A_SpawnProjectile("PM_DarkExpSmoke",7,0,random(0,360),2,random(0,360));
		A_SpawnParticleEx
			( "", tex[0], style: STYLE_Add, flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,
			lifetime: 14, size: 1000, zoff: -15, startalphaf: 1, startroll: random(-180,180) );
		for(int i=random(3,6);i>0;i--) A_SpawnParticleEx
			("", tex[1], style: STYLE_Add, flags: SPF_ROLL|SPF_RELATIVE|SPF_FULLBRIGHT,
			lifetime: random(1, 30), size: frandom(1, 500), zoff: -15, velx: frandom(-6, 6), vely: frandom(-6, 6), velz: frandom(0, 6), startalphaf: 1
			, fadestepf: -1, startroll: random(-180,180) );
		for(int i=random(5,15);i>0;i--) A_SpawnParticleEx
			( "727272", tex[2], style: STYLE_Normal, flags: SPF_RELATIVE|SPF_ROLL,
			lifetime: random(40,70), size: frandom(2,35), zoff: random(10,35),
			velx: frandom(-15,15), vely: frandom(-15,15), velz: frandom(1,12),
			accelz: frandom(-0.1,-0.9), startalphaf: 1.0, sizestep: -0.2, startroll: random(-180,180), rollvel: random(-4,4) );
		A_RadiusThrust(2000,700,RTF_NOTMISSILE|RTF_NOIMPACTDAMAGE);
		A_SpawnParticleEx
		( "", tex[0], style: STYLE_Add, flags: SPF_FULLBRIGHT|SPF_RELATIVE|SPF_ROLL,
		lifetime: 80, size: random(450,500), xoff: -7, startalphaf: frandom(0.95,1), fadestepf: -1, sizestep: 7, startroll: random(-180,180));
		for(int i=random(20,35);i>0;i--)
		 A_SpawnParticleEx
		 ( "", tex[0], style: STYLE_Add, flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,
		 lifetime: random(120,200), size: random(10,45), xoff: frandom(-20,20), yoff:frandom(-20,20), zoff:frandom(-10,10), velx: frandom(-20,20), vely: frandom(-20,20), velz: frandom(1,9),
		 accelz: frandom(-0.0095,-0.0115), startalphaf: 1, fadestepf: -1, startroll: random(-180,180) );
		
		BlockThingsIterator ti = BlockThingsIterator.Create(self, 350);
		actor a;
		
		while(ti.Next())
		{
			a = ti.thing;
			double rad = abs((350 - Distance3D(a)) / 2);
			if (a && a.Health > 0 && a.bSHOOTABLE && !a.bINVULNERABLE && !a.bDORMANT && !a.bNODAMAGE && CheckSight(a) && distance3D(a) < 350 && !a.bDONTTHRUST)
			{
				if (a != self && a.species != "Cyberdemon" && a.species != "Mastermind" && a.species != "PM_VoidElder")
				{
					a.VelFromAngle((rad / 3), self.AngleTo(a));
					a.vel.z += (rad / 6) / ((a.Mass > 600) ? 2.5 : 1);
					a.vel.z = clamp(a.vel.z, -25, 25);
				}
			}
		}
	}
	SP3_ ABCDEFGH random(4, 6)
	{
		A_Explode((2),150);
		for(int i=random(3,6);i>0;i--) A_SpawnParticleEx
	    ("", tex[1], style: STYLE_Add, flags: SPF_ROLL|SPF_RELATIVE|SPF_FULLBRIGHT,
	    lifetime: random(1, 30), size: frandom(1, 500), zoff: -15, velx: frandom(-3, 3), vely: frandom(-3, 3), velz: frandom(-3, 3), startalphaf: 1
		, fadestepf: -1, startroll: random(-180,180) );
	}
	Stop;
   }
}

Class PM_DirectorPsiDischarge : Actor
{
  int soulhspeed;
  int soulvspeed;
  int soulhdist;
  int soulvdist;
  int seekint1;
  int seekint2;
  Default
  {
    Radius 2;
    Height 2;
    Speed 10;
    DamageFunction 7;
    Renderstyle "Add";
    ALPHA 0.75;
    Scale 1;
    SeeSound "NLITE";
    DeathSound "NetherConduit/SmallZap";
    PROJECTILE;
	DamageType "Electric";
	Translation "0:255=%[0,0,0]:[1.8,0.5,2.0]";
	+SEEKERMISSILE
	}
	
  override void PostBeginPlay()

	{
	 Super.PostBeginPlay();
	 tex[0] = TexMan.CheckForTexture("SPKPA0",TexMan.Type_Sprite);
	 tex[1] = TexMan.CheckForTexture("PURLA0",TexMan.Type_Sprite);
	}

	TextureID tex[2];
	
  States
  {
  Spawn:
	TNT1 A 0 NoDelay
	 {
	  soulhspeed = random(-2,2);
	  soulvspeed = random(-2,2);
	  soulhdist = random(-3,3);
	  soulvdist = random(-3,3);
	  seekint1 = random(0,2);
	  seekint2 = random(0,10);
	 }
	TNT1 A 0 { A_ScaleVelocity(frandom(0.005,4)); }
	TNT1 A 0 A_Jump(120,"Death2");
	TNT1 A 0
	{
	  A_SpawnParticleEx("",tex[0],style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: 50,size: 180.0,xoff: -10,startalphaf: 0.35
	  ,fadestepf: -1,startroll: random(-180,180));
	  A_SpawnParticleEx("",tex[1],style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: random(2,10),size: random(60,195),xoff: -10,velx: random(-10,10),vely: random(-10,10),velz: random(-10,10),startalphaf: 0.9,startroll: random(-180,180));
	}
  Go:
	TNT1 A 0;
	TNT1 A 1
	{
	  if(random(1,20) == 1)
		SetStateLabel("WeaveReset");
	  A_SeekerMissile(seekint1,seekint2);
	  A_Weave(soulhspeed,soulvspeed,soulhdist,soulvdist);
	  A_SpawnParticleEx("",tex[1],style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: random(3,50),size: frandom(1,45),xoff: frandom(-25,5),startalphaf: frandom(0.5,0.9),sizestep: 0.3,startroll: random(-180,180),rollvel: frandom(-1,1));
	  A_SpawnParticleEx("",tex[1],style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: random(3,50),size: frandom(5,95),xoff: frandom(-25,5),startalphaf: frandom(0.5,0.9),sizestep: -0.3,startroll: random(-180,180),rollvel: frandom(-1,1));
	  A_SpawnParticleEx("",tex[0],style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT,lifetime: random(20,60),size: frandom(50,100),xoff: random(0,-45),velx: frandom(0,1),startalphaf: frandom(0.05,0.35)
	  ,fadestepf: -1,sizestep: -0.05,startroll: random(-180,180));
	}
    Loop;
   Go2:
	TNT1 A 0;
	TNT1 A 0 { A_ScaleVelocity(frandom(0.5,3)); }
   Go2Loop:
	TNT1 A 0;
	TNT1 A 1
	{
	  if(random(1,40) == 1)
		SetStateLabel("WeaveReset");
	  A_Weave(soulhspeed,soulvspeed,soulhdist,soulvdist);
	  A_SpawnParticleEx("",tex[1],style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: random(3,50),size: frandom(1,45),xoff: frandom(-25,5),startalphaf: frandom(0.5,0.9),sizestep: 0.3,startroll: random(-180,180),rollvel: frandom(-1,1));
	  A_SpawnParticleEx("",tex[1],style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: random(3,50),size: frandom(5,95),xoff: frandom(-25,5),startalphaf: frandom(0.5,0.9),sizestep: -0.3,startroll: random(-180,180),rollvel: frandom(-1,1));
	  A_SpawnParticleEx("",tex[0],style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT,lifetime: random(20,60),size: frandom(50,100),xoff: random(0,-45),velx: frandom(0,1),startalphaf: frandom(0.05,0.35)
	  ,fadestepf: -1,sizestep: -0.05,startroll: random(-180,180));
	}
    Loop;
   WeaveReset:
    TNT1 A 0
	{
	 soulhspeed = random(-2,2);
	 soulvspeed = random(-2,2);
	 soulhdist = random(-3,3);
	 soulvdist = random(-3,3);
	 seekint1 = random(0,1);
	 seekint2 = random(0,2);
	}
	TNT1 A 0 A_Jump(100,"Go","Go3");
	Goto Go2;
  Go3:
	TNT1 A 0 A_ChangeVelocity(0,random(-1,1),random(-1,1));
	TNT1 A 1
	{
	  if(random(1,30) == 1)
		SetStateLabel("WeaveReset");
	  A_SpawnParticleEx("",tex[1],style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: random(3,50),size: frandom(1,45),xoff: frandom(-25,5),startalphaf: frandom(0.5,0.9),sizestep: 0.3,startroll: random(-180,180),rollvel: frandom(-1,1));
	  A_SpawnParticleEx("",tex[1],style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: random(3,50),size: frandom(5,95),xoff: frandom(-25,5),startalphaf: frandom(0.5,0.9),sizestep: -0.3,startroll: random(-180,180),rollvel: frandom(-1,1));
	  A_SpawnParticleEx("",tex[0],style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT,lifetime: random(20,60),size: frandom(50,100),xoff: random(0,-45),velx: frandom(0,1),startalphaf: frandom(0.05,0.35)
	  ,fadestepf: -1,sizestep: -0.05,startroll: random(-180,180));
	}
	Loop;
  Death:
    TNT1 A 0 A_StopSound(CHAN_6);
	TNT1 AA 0 { A_SpawnParticleEx("",tex[1],style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: random(5,30),size: random(20,195),startalphaf: 0.9,startroll: random(-180,180)); }
    NLIT ABC 1 Bright;
	NLIT DEFG 1 Bright;
	Stop;
   Death2:
	TNT1 A 0;
    Stop;
  }
}

Class PM_DirectorPsiChaser : Actor
{
  int timer;
  Default
  {
    Radius 8;
    Height 6;
    Speed 10;
    DamageFunction 50;
    RenderStyle "Add";
    Alpha 0.85;
	Scale 0.45;
    SeeSound "Exalt/SuperBall";
	Decal "DoomImpScorch";
    DeathSound "";
	BounceType "Hexen";
    Projectile;
	Translation "0:255=%[0,0,0]:[1.8,0.5,2.0]";
	DamageType "Electric";
	+SEEKERMISSILE
	+THRUACTORS
  }
  
	override void Tick()
	{
		if (level.isFrozen()) return;
		super.Tick();
		
		if ((level.maptime % 1) == 0)
		{
		 A_SpawnParticleEx("",TexMan.CheckForTexture("PURLA0"),style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: random(5,75),size: frandom(20,130),xoff: random(-7,0),yoff: random(-5,5),zoff: random(-5,5),velx: frandom(-0.5,1),vely: frandom(-0.5,0.5),velz: frandom(-0.5,0.5),startalphaf: 0.75
		 ,fadestepf: -1,sizestep: -2,startroll: random(-180,180));
		 A_SpawnParticleEx("",TexMan.CheckForTexture("PURLA0"),style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: random(1,6),size: frandom(5,100),xoff: random(-10,10),yoff: random(-10,10),zoff: random(-10,10),velx: frandom(-1,1),vely: frandom(-1,1),velz: frandom(-1,1),startalphaf: frandom(0.5,0.9),startroll: random(-180,180),rollvel: frandom(-20,20));
		 A_SpawnParticleEx("",TexMan.CheckForTexture("SPKPA0"),style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: random(5,30),size: frandom(90,100),xoff: random(-1,1),yoff: random(-1,1),zoff: random(-1,1),velx: frandom(-0.2,0.2),vely: frandom(-0.2,0.2),velz: frandom(-0.2,0.2),startalphaf: 0.85
		 ,fadestepf: -1,sizestep: -5,startroll: random(-180,180));
         A_SpawnParticleEx("",TexMan.CheckForTexture("SPKPA0"),style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: 1,size: frandom(100,200),xoff: -10,startalphaf: 0.55,startroll: random(-180,180));
		 A_SpawnParticleEx("d500ff",TexMan.CheckForTexture("GNSMK0"),style: STYLE_Add,flags: SPF_ROLL|SPF_RELATIVE|SPF_FULLBRIGHT,lifetime: 4,size: 34.0,xoff: -10,startalphaf: 1.0
		 ,fadestepf: -1,sizestep: -7,startroll: random(-180,180));
		}
	}

  States
  {
  Spawn:
    TNT1 A 0;
	TNT1 A 0 { timer = 0; }
    TNT1 A 0 A_StartSound("NetherConduit/HomingLoop",CHAN_6,CHANF_LOOPING,0.45,pitch:0.55);
	TNT1 A 0 A_StartSound("Plasmatron/MortarLoop",CHAN_7,CHANF_LOOPING,0.65,pitch:0.85);
	TNT1 A 0
	{
	 A_SpawnParticleEx("",TexMan.CheckForTexture("SPKPA0"),style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: 200,size: 480.0,xoff: -10,startalphaf: 0.98
	 ,fadestepf: 0.1,startroll: random(-180,180));
	 }
  Go:
    SPKO SSSSS 1 Bright
	{
	 if(timer > 350)
	  SetStateLabel("Death");
	 if(random(1,7) == 1)
	  A_SpawnParticleEx("",TexMan.CheckForTexture("PURLA0"),style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: random(1,6),size: frandom(15,300),velx: frandom(-4,4),vely: frandom(-4,4),velz: frandom(-4,4),startalphaf: frandom(0.5,0.9),startroll: random(-180,180),rollvel: frandom(-20,20));
	  A_SeekerMissile(1,2,SMF_PRECISE);
	 timer++;
	}
	SPKO S 1 Bright A_Explode(8,80,XF_NOTMISSILE|XF_NOSPLASH);
    Loop;
  Death:
    TNT1 A 0 A_StopSound(CHAN_6);
	TNT1 A 0 A_StopSound(CHAN_7);
	TNT1 A 0 A_RadiusThrust(5000,300,RTF_NOTMISSILE|RTF_NOIMPACTDAMAGE);
	TNT1 A 0 A_StartSound("Broken/VFGExp",CHAN_6,CHANF_OVERLAP,0.65);
	TNT1 A 0 Radius_Quake(2,35,0,500,0);
	TNT1 A 0 A_SpawnItemEx("PM_BlueShock",0,0,0);
	TNT1 AA 0 A_SpawnItemEx("PM_WretchedBallFlare",0,0,0);
	TNT1 AAA 0 A_SpawnItemEx("PM_BlueLongFlare",0,0,0);
	TNT1 AAAA 0 A_SpawnItemEx("NetherShockFlare",0,0,0);
	TNT1 AAAAA 0 A_SpawnProjectile("PM_BlueShock",2,0,random(0,360),CMF_OFFSETPITCH,random(0,360));
	TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAA 0 { A_SpawnParticleEx("",TexMan.CheckForTexture("PURLA0"),style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: random(4,20),size: frandom(30,500),velx: frandom(-10,10),vely: frandom(-10,10),velz: frandom(-10,10),startalphaf: frandom(0.8,0.9),startroll: random(-180,180),rollvel: frandom(-20,20) ); }
	TNT1 A 0 { A_SpawnParticleEx("",TexMan.CheckForTexture("SPKPA0"),style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: 400,size: 580.0,xoff: -10,startalphaf: 1
	,fadestepf: 0.1,startroll: random(-180,180)); }
    SPKO SSSSSSS 2
	{
	 A_FadeOut(0.08);
	 A_SetScale(Scale.X+0.25);
	 A_SpawnParticleEx("",TexMan.CheckForTexture("PURLA0"),style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: random(1,6),size: frandom(15,500),velx: frandom(-8,8),vely: frandom(-8,8),velz: frandom(-8,8),startalphaf: frandom(0.5,0.9),startroll: random(-180,180),rollvel: frandom(-20,20));
	}
    Stop;
  }
}


Class PM_SmallPsiOrbs : Actor
{
  int user_phspeed;
  int user_pvspeed;
  int user_phdist;
  int user_pvdist;
  Default
  {
    Radius 6;
    Height 6;
    Speed 16;
    DamageFunction 30;
    Renderstyle "Add";
    ALPHA 0.75;
    Scale 0.36;
    SeeSound "NetherConduit/ThunderOrb";
    DeathSound "NetherConduit/HomingExp";
	Decal "DoomImpScorch";
    PROJECTILE;
	Translation "0:255=%[0,0,0]:[1.8,0.5,2.0]";
	DamageType "Electric";
    //+RIPPER
	+SEEKERMISSILE
  }
  
	override void Tick()
	{
		if (level.isFrozen()) return;
		super.Tick();
		
		if ((level.maptime % 2) == 0)
		{
		 A_SpawnParticleEx("d500ff",TexMan.CheckForTexture("SPKPA0"),style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: random(10,70),size: frandom(0.2,15),xoff: random(-7,0),yoff: random(-5,5),zoff: random(-5,5),velx: frandom(-0.6,0.6),vely: frandom(-0.6,0.6),velz: frandom(-0.6,1),startalphaf: 1.0
		 ,fadestepf: -1,sizestep: -0.2,startroll: random(-180,180));
		 A_SpawnParticleEx("",TexMan.CheckForTexture("PURLA0"),style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: random(5,75),size: frandom(30,75),xoff: random(-7,0),yoff: random(-1,1),zoff: random(-1,1),velx: frandom(-0.5,1),vely: frandom(-0.5,0.5),velz: frandom(-0.5,0.5),startalphaf: 0.75
		 ,fadestepf: -1,sizestep: -2,startroll: random(-180,180));
     A_SpawnParticleEx("",TexMan.CheckForTexture("SPKPA0"),style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: 2,size: 130.0,xoff: -10,startalphaf: 0.6
	 ,fadestepf: -1,startroll: random(-180,180));
		 A_SpawnParticleEx("d500ff",TexMan.CheckForTexture("GNSMK0"),style: STYLE_Add,flags: SPF_ROLL|SPF_RELATIVE|SPF_FULLBRIGHT,lifetime: 10,size: 52.0,xoff: -10,startalphaf: 0.9
		 ,fadestepf: -1,sizestep: -4,startroll: random(-180,180));
		}
	}

  States
  {
  Spawn:
	TNT1 A 0 NoDelay
	{
	 user_phspeed = random(-4,4);
	 user_pvspeed = random(-4,4);
	 user_phdist = random(-2,2);
	 user_pvdist = random(-2,2);
	 A_StartSound("NetherConduit/HomingLoop",CHAN_6,CHANF_LOOPING,0.25);
	}
	TNT1 A 0 { A_SpawnParticleEx("",TexMan.CheckForTexture("SPKPA0"),style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: 50,size: 180.0,xoff: -10,startalphaf: 0.98
	,fadestepf: -1,startroll: random(-180,180)); }
  Go:
    SPKO SS 1 Bright
	{
	 A_SeekerMissile(1,1,SMF_PRECISE);
	 A_SpawnParticleEx("",TexMan.CheckForTexture("PURLA0"),style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: random(2,6),size: frandom(25,85),velx: frandom(-4,4),vely: frandom(-4,4),velz: frandom(-4,4),startalphaf: frandom(0.5,0.9),startroll: random(-180,180),rollvel: frandom(-20,20));
	}
	TNT1 A 0 A_Weave(user_phspeed,user_pvspeed,user_phdist,user_pvdist);
    SPKO SS 1 Bright
	{
	 A_SeekerMissile(1,1,SMF_PRECISE);
	 A_SpawnParticleEx("",TexMan.CheckForTexture("PURLA0"),style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: random(2,6),size: frandom(25,85),velx: frandom(-4,4),vely: frandom(-4,4),velz: frandom(-4,4),startalphaf: frandom(0.5,0.9),startroll: random(-180,180), rollvel: frandom(-20,20));
	}
	TNT1 A 0 A_Weave(user_phspeed,user_pvspeed,user_phdist,user_pvdist);
    loop;
  Death:
    TNT1 A 0 A_StopSound(CHAN_6);
	TNT1 AAAAAAAA 0 { A_SpawnParticleEx("",TexMan.CheckForTexture("PURLA0"),style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: random(2,10),size: random(120,295),velx: random(-6,6),vely: random(-6,6),velz: random(-6,6),startalphaf: 0.9,startroll: random(-180,180)); }
    NLIT ABC 2 Bright;
	NLIT DEFG 2 Bright;
    Stop;
  }
}