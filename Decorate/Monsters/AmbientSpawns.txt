
class PM_InitialAmbientSpawner : EventHandler
	{
	override void WorldLoaded(WorldEvent e)
		{
		// skip this if we're in deathmatch, or loading a save game
		if (deathmatch || e.IsReopen)
			return;
		else
			let fodder = Actor.Spawn("PM_AmbientSpawnerNumbers",(0,0,0));
		}
}

class PM_AmbientSpawnerNumbers : Actor
{
	default
		{
		Health 2000;
		Radius 10;
		Height 44;
		Mass 1000;
		Speed 10;
		PainChance 50;
		Monster;
		+FLOORCLIP
		+THRUACTORS
		+DONTGIB
		+NOCLIP
		-COUNTKILL
		-SHOOTABLE
	}
	States
	{
	Spawn:
		TNT1 A 0;
		//TNT1 A 1 A_SpawnItemEx("PM_AmbientSpawner",0,0,0,random(-100,100),random(-100,100),0,random(0,360),SXF_NOCHECKPOSITION);
		Stop;
	}
}

Class PM_AmbientSpawner : Actor
{
  Default
	{
	Speed 50;
	Radius 24;
    Height 56;
	Mass 40;
	+THRUACTORS
	+NOCLIP
	-SHOOTABLE
	MONSTER;
	-COUNTKILL
	TeleFogSourceType "";
	TeleFogDestType "";
	}
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 1 A_SetAngle(random(1,360));
		TNT1 A 0 A_Recoil(random(-50,-200));
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 A_Wander();
		TNT1 A 0 A_CheckFloor("FirstCheck");
		Goto Spawn;
	FirstCheck:
		TNT1 A 0 A_JumpIf(CallACS("IsThisSky") == 1, "TryLoop");
		//TNT1 A 0 A_ChangeFlag("NOCLIP",False);
                TNT1 A 0 {bNOCLIP = false;}
		TNT1 A 1 A_ChangeVelocity(0,0,0,CVF_REPLACE);
		TNT1 A 1;
		TNT1 A 0
		{
			if (level.IsPointInLevel(pos))
				return A_Jump(256,"SpawnAttempt");
			else
				return A_Jump(256,"GoBack");
		}
	SpawnAttempt:
		TNT1 A 0;
		TNT1 A 1 A_ChangeVelocity(0,0,0,CVF_REPLACE);
		TNT1 A 0 A_JumpIfCloser(random(100,600),"TryLoop");
		TNT1 A 0 A_CheckSight("Create");
		Goto TryLoop;
	 GoBack:
		//TNT1 A 0 A_ChangeFlag("NOCLIP",True);
                TNT1 A 0 {bNOCLIP = true;}
		TNT1 A 0 A_Jump(100,"TryLoop");
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 A_Chase();
		Goto FirstCheck;
	TryLoop:
		//TNT1 A 0 A_ChangeFlag("NOCLIP",True);
                TNT1 A 0 {bNOCLIP = true;}
		TNT1 A 1 A_SetAngle(random(1,360));
		TNT1 A 0 A_Recoil(random(-50,-200));
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1
		{
		A_Wander();
		}
		//TNT1 A 0 A_Jump(1,"Die");
		TNT1 A 0 A_Jump(250,"FirstCheck");
		TNT1 A 5;
		Goto TryLoop;
	Create:
		//TNT1 A 0 A_ChangeFlag("NOCLIP",false);
                TNT1 A 0 {bNOCLIP = false;}
		TNT1 A 1
		{
		if (TestMobjLocation())
			return A_Jump(256,"Create2");
		else
			return A_Jump(256,"TryLoop");
		}
		Goto Spawn;
	Create2:
		TNT1 A 0 A_SpawnItemEx("PM_HorrorPassiveSpawn",0,0,0,0,0,0,random(0,360),0,0);
		Stop;
	Die:
		TNT1 A 0;
		Stop;
	}
}

// a simple data class used to contain a position
// arrays don't support vectors for some reason
class DropperPoint {
	vector3 pos;
}

class MonsterDropper : EventHandler {
	bool doSpawn;
	int spawnDelay;

	// set up the handler to spawn
	override void WorldLoaded(WorldEvent e) {
		// skip everything if we're on the titlemap, in deathmatch, or loading a save
		if (gameState == GS_TITLELEVEL || deathmatch || e.IsReopen)
			return;

		doSpawn = true;
		spawnDelay = 1;
	}

	// handle the spawning here
	override void WorldTick() {
		// an hero if we ain't spawning
		if (!doSpawn) {
			// make sure that we aren't breaking something first
			if (!bDESTROYED)
				Destroy();
			return;
		}

		// wait until our queue
		if (spawnDelay-- > 0)
			return;

		// we'll be destroyed next tic since we'll have served our purpose by then
		doSpawn = false;

		// this is where we store references to our spawn points
		array<DropperPoint> dropperPoints;

		// iterate through the list of Actors on the map
		actor mobj;
		let it = ThinkerIterator.Create();		
		while(mobj = Actor(it.Next())) {
			// filter out players and non-monstrous things, like barrels or lamps
			if (mobj is "PlayerPawn" || !mobj.bISMONSTER)
				continue;
			if (mobj.bFLOAT)
				continue;
			// make an instance of DropperPoint and set the relevant data
			let newPoint = New("DropperPoint");
				newPoint.pos = mobj.pos;

			// add it to the end of the list
			dropperPoints.Push(newPoint);
		}
		
		// let's not waste processing time if there aren't any valid spawn points
		if (dropperPoints.Size() <= 0)
			return;
		CVar foddersetting = CVar.FindCVar('projectmalice_fodderdivider');
		// take the total monster number, divide it by 4
		// multiplication is faster than division
		double extraMonsters = level.total_monsters * frandom(0,(foddersetting.GetFloat()));
		if(pmd_world_extra_mon) console.printf("[PM]: Number of extra monsters: %i.", extraMonsters);

		// time to spawn the monsters!
		for(int i = 0; i < extraMonsters; i++) {
			// grab a random DropperPoint, we do Size() - 1 because otherwise the index goes out of bounds.
			let dropPoint = dropperPoints[random(0, dropperPoints.Size() - 1)];
			// spawn a Horrorspawn at that DropperPoint
			let act = Actor.Spawn("PM_HorrorPassiveSpawn", dropPoint.pos);
				// randomize his angle so they don't all face west
				act.angle = random(0, 8) * 45;
				
			//console.printf("[DROPPER]: Spawning %s at %f, %f, %f!",
				//act.GetClassName(), act.pos.x, act.pos.y, act.pos.z);
				
			// all our DropperPoints will get garbage collected
			// they don't Think anyway so it's not like they'd affect performance lol
		}		
	}
	}