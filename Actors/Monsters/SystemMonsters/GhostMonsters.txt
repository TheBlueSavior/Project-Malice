// Rally token: used to nudge nearby ghosts to join an attack.
class PM_GhostAttackStim : Inventory
{
	Default { Inventory.MaxAmount 1; +INVENTORY.UNDROPPABLE; }
	States { Spawn: TNT1 A 0; Stop; }
}

// One-shot whisperer spawned near the player during haunt actions.
class PM_GhostWhisperer : Actor
{
	Default { +NOBLOCKMAP; +NOGRAVITY; RenderStyle "None"; }
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 A_StartSound("PM/GhostWhisper",35,volume:frandom(0.0,0.4),attenuation:frandom(0.4,1.2),pitch:frandom(0.5,1.2));
		TNT1 A 20;
		Stop;
	}
}

// Placeholder token for cold-breath proximity. Detect on player to render breath/apply chill.
class PM_ColdBreathToken : Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.ALWAYSPICKUP;
	}
	States
	{
	Spawn:
		TNT1 A 35; // short-lived
		Stop;
	}
}

class PM_GhostImp : DoomImp
{
	Default
	{
		Health 120; //Double original actor's amount
		Alpha 0.0;
		Species "PMGhost";
		RenderStyle "Stencil";
		SeeSound "";
		ActiveSound "";
		Speed 8;
		-COUNTKILL;
		-SHOOTABLE;
		+THRUACTORS;
		+DONTSPLASH;
		+NOBLOOD;
		+NOPAIN
		+NOINFIGHTING
		+DONTHARMSPECIES
	}
	int    PMG_AttackTics;
	double PMG_SignalRadius;
	bool   PMG_InAttack;

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		PMG_SignalRadius  = 1536;
		PMG_InAttack      = false;
	}

	// ---- Helpers (normal member funcs; called from code blocks) --------------
	void PMGhost_Debug(string msg)
	{
		if (PM_GHOST_DEBUG) Console.Printf("[PM_GhostImp] %s", msg);
	}

	void PMGhost_BeginHaunt()
	{
		bNoClip     = true;   // noclip for rest of life once haunting
		bShootable  = false;
		bThruActors = true;
		A_SetRenderStyle(0.0,STYLE_TranslucentStencil); // fully invisible
	}

	void PMGhost_BeginAttack()
	{
		PMG_InAttack   = true;
		bShootable     = true;
		A_SetRenderStyle(1.0,STYLE_TranslucentStencil); // solid black silhouette
		A_RadiusGive("PM_GhostAttackStim", PMG_SignalRadius, RGF_MONSTERS, 1);
		PMGhost_Debug("BeginAttack + Rally");
	}

	void PMGhost_EndAttack()
	{
		PMG_InAttack = false;
		bShootable   = false;
		A_SetRenderStyle(0.0,STYLE_TranslucentStencil);
		PMGhost_Debug("EndAttack");
	}

	bool PMGhost_AcquireAnyPlayer()
	{
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (!playeringame[i]) continue;
			PlayerInfo pi = players[i];
			PlayerPawn pp = pi.mo;
			if (pp != null && pp.health > 0 && pi.playerstate != PST_DEAD)
			{
				target = pp;
				return true;
			}
		}
		return false;
	}

	// ---- STATES ---------------------------------------------------------------
	states
	{
	// Spawns completely invisible; hearing → Finding, sight → Haunt
	Spawn:
		TNT1 A 0
		{
			bNoClip     = false;   // noclip begins once haunting
			bShootable  = false;
			bThruActors = true;
			A_SetRenderStyle(STYLE_None, 1.0);
		}
		TNT1 A 3 A_LookEx(LOF_NOSIGHTCHECK, 0, 0, 0, 360, "Finding"); // sound-only → Finding
		TNT1 A 3 A_LookEx(LOF_NOSOUNDCHECK, 0, 0, 0, 360, "Haunt");     // sight-only  → Haunt
		Loop;

	// If anything forces us to See, just go haunt logic immediately
	See:
		Goto Haunt;

	// Silent pursuit of the noise source until we actually see a target
	Finding:
		TNT1 A 0 A_JumpIf(target == null || (target.player && target.player.playerstate == PST_DEAD), "Spawn");
		TNT1 A 3 A_Chase(null, null);       // disable melee/missile jumps explicitly
		TNT1 A 0 A_JumpIfTargetInLOS("Haunt");
		Loop;

	// Main haunt loop: invisible, noclipping; wander/idle, do rare haunt actions, or attack rarely
	Haunt:
		TNT1 A 0 { PMGhost_BeginHaunt(); }
	HauntLoop:
		// Reacquire any living player; harmless if none (prevents crashes/OOB drift)
		TNT1 A 0 { PMGhost_AcquireAnyPlayer(); }

		// Ally rally preempts
		TNT1 A 0
		{
			let stim = FindInventory("PM_GhostAttackStim");
			if (stim) { stim.Destroy(); SetStateLabel("BeginAttack"); }
		}

		// Rarely decide to attack on our own
		TNT1 A 0 A_Jump(2, "BeginAttack");

		// Occasional haunt action (creepy sound / brief manifest / cold breath)
		TNT1 A 0
		{
			if (Random(0,31) < 8) // ~1/4 chance this pass
			{
				int r = Random(0, 2);
				if (r == 0) // whisper near random nearby offset
				{
					A_SpawnItemEx("PM_GhostWhisperer",random(-128,128),random(-128,128),0,0,0,0);
					PMGhost_Debug("HauntAction: Whisper");
				}
				else if (r == 1) // brief manifest
				{
					SetStateLabel("HauntManifest");
				}
				else // cold breath token
				{
					A_RadiusGive("PM_ColdBreathToken", 192, RGF_PLAYERS, 1);
					PMGhost_Debug("HauntAction: ColdBreath");
				}
			}
		}

		// Drift vs hover bias
		TNT1 A 0 A_Jump(128, "HauntWander");
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 3;                              // brief hover
		TNT1 A 0 { bNOGRAVITY = false; }
		Goto HauntLoop;

	HauntWander:
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 2 A_Wander();                      // drift aimlessly
		TNT1 A 0 A_JumpIfTargetInLOS("HauntLoop");
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 A_Chase(null, null);
		Goto HauntLoop;

	// Defensive stubs so any stray chase-attack attempt never faults
	Melee:
		Goto HauntLoop;

	Missile:
		Goto HauntLoop;

	// Brief “manifest” as a black silhouette then return to haunt loop
	HauntManifest:
		TNT1 A 0 A_SetRenderStyle(1.0,STYLE_TranslucentStencil);
		CH5R AAAAAA 1 A_SetScale(frandom(0.95,1.05),frandom(0.95,1.05));                            // any imp frame works; silhouette only
		TNT1 A 0 A_SetRenderStyle(0.0,STYLE_TranslucentStencil);
		Goto HauntLoop;

	// Enter visible, shootable attack silhouette (still noclipping)
	BeginAttack:
		TNT1 A 0 { PMGhost_BeginAttack(); }
		TNT1 A 0 A_SetHealth(120);
		TNT1 A 0 A_StartSound("PM/GhostImp",36,volume:frandom(0.1,1),attenuation:frandom(0.4,1),pitch:frandom(0.5,1.2));
		Goto StartFly;

	// --- Ghost Imp Attack (replaced with custom sequence) ---
	Attack:
		TNT1 A 0 A_SetSpeed(6);
		TNT1 A 0 A_ChangeLinkFlags(false,FLAG_NO_CHANGE);
		TNT1 A 0 { bNoClip = true; bThruActors = false; bShootable = true; bVulnerable = true; bSolid = true; bNoInteraction = false; bCorpse = false; }
		CH5R AAABBBCCCDDD 1
		{
		A_SetScale(frandom(0.95,1.05),frandom(0.95,1.05));
		A_SetRenderStyle(frandom(0,1),STYLE_TranslucentStencil);
		A_Chase("StartFly","AttackRanged");
		}
		TNT1 A 0 A_Jump(20,"EndAttack");
		Loop;
	AttackWander:
		TNT1 A 0;
		TNT1 A 0 A_SetSpeed(10);
		TNT1 A 0 A_ChangeLinkFlags(false,FLAG_NO_CHANGE);
		TNT1 A 0 { bNoClip = true; bThruActors = false; bShootable = true; bVulnerable = true; bSolid = true; bNoInteraction = false; bCorpse = false; }
		TNT1 A 0 A_CheckSight("AttackOutSight");
		CH5R AABBCCDDAABBCCDD 1
		{
		A_SetScale(frandom(0.95,1.05),frandom(0.95,1.05));
		A_SetRenderStyle(frandom(0,1),STYLE_TranslucentStencil);
		A_SpawnParticleEx("000000",TexMan.CheckForTexture("GNSMK0"),style: STYLE_Normal,flags: SPF_ROLL|SPF_RELATIVE,lifetime: random(10,30),size: frandom(55,110),xoff: frandom(-8,8),yoff: frandom(-8,8),zoff: frandom(0,50),velx: frandom(-1,1),vely: frandom(-1,1),velz: frandom(-1,1),startalphaf: 0.1
			,fadestepf: -1,sizestep: frandom(1,4.4),startroll: random(-180,180));
		A_SpawnParticleEx("000000",TexMan.CheckForTexture("GNSMK0"),style: STYLE_Normal,flags: SPF_ROLL|SPF_RELATIVE,lifetime: random(20,70),size: frandom(50,100),xoff: frandom(-8,8),yoff: frandom(-8,8),zoff: frandom(0,50),velx: frandom(-1,1),vely: frandom(-1,1),velz: frandom(-1,1),startalphaf: 0.3
			,fadestepf: -1,sizestep: frandom(1,4.4),startroll: random(-180,180));
		A_Wander();
		}
		TNT1 A 0 A_Jump(128,"AttackRangedWander");
		TNT1 A 0 A_Jump(20,"EndAttack");
		Goto AttackWander;
	AttackOutSight:
		TNT1 A 0;
		TNT1 A 0 A_Jump(256,"StartFly","Attack");
		Goto Attack;
	AttackRanged:
		TNT1 A 0 A_Jump(100,"AttackRangedWander");
		CH5R EEEEEEEEEEEEEFFFFFF 1
		{
		A_SetScale(frandom(0.98,1.02),frandom(0.98,1.02));
		A_SetRenderStyle(1,STYLE_TranslucentStencil);
		A_FaceTarget();
		}
		CH5R G 8
		{
		A_SetScale(frandom(0.98,1.02),frandom(0.98,1.02));
		A_SetRenderStyle(1,STYLE_TranslucentStencil);
		A_CustomMissile("PM_GhostImpBall", 32, 0, 0);
		}
		CH5R FFFFEEEEA 1
		{
		A_SetScale(frandom(0.98,1.02),frandom(0.98,1.02));
		A_SetRenderStyle(1,STYLE_TranslucentStencil);
		A_FaceTarget();
		}
		Goto Attack;
	AttackRangedWander:
		CH5R EEEEEEEEEEEEEFFFFFF 1
		{
		A_SetScale(frandom(0.98,1.02),frandom(0.98,1.02));
		A_SetRenderStyle(1,STYLE_TranslucentStencil);
		A_FaceTarget();
		}
		CH5R G 8
		{
		A_SetScale(frandom(0.98,1.02),frandom(0.98,1.02));
		A_SetRenderStyle(1,STYLE_TranslucentStencil);
		A_CustomMissile("PM_GhostImpBall", 32, 0, 0);
		}
		CH5R FFFFEEEEA 1
		{
		A_SetScale(frandom(0.98,1.02),frandom(0.98,1.02));
		A_SetRenderStyle(1,STYLE_TranslucentStencil);
		A_FaceTarget();
		}
		Goto AttackWander;
	StartFly:
			TNT1 A 1 A_FaceTarget();
			TNT1 A 0 { bNOGRAVITY = true; }
			TNT1 A 0 ThrustThing(random(0,360),random(0,16));
			TNT1 A 0 ThrustThingZ(0,random(20,70),0,1);
			TNT1 AAAAAAAAAAAAAAAA 1
			{
			A_SpawnParticleEx("000000",TexMan.CheckForTexture("GNSMK0"),style: STYLE_Normal,flags: SPF_ROLL|SPF_RELATIVE,lifetime: random(10,30),size: frandom(20,70),xoff: frandom(-8,8),yoff: frandom(-8,8),zoff: frandom(0,16),velx: frandom(-1,1),vely: frandom(-1,1),velz: frandom(-1,1),startalphaf: 0.4
			,fadestepf: -1,sizestep: frandom(1,4.4),startroll: random(-180,180));
			A_SpawnItemEx("PM_GenericPhaseGhost",0,0,0,0,0,0,0,SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERSCALE|SXF_TRANSFERRENDERSTYLE);
			}
	FlyUp:
			TNT1 A 0 ThrustThingZ(0,random(0,45),1,1);
			TNT1 A 0 A_StartSound("SoulReaver/Amb1",31,CHANF_LOOPING,volume:0.9,attenuation:1.1,pitch:1.3);
	Flying:
			TNT1 A 1
			{
			 A_SpawnParticleEx("000000",TexMan.CheckForTexture("GNSMK0"),style: STYLE_Normal,flags: SPF_ROLL|SPF_RELATIVE,lifetime: random(10,30),size: frandom(55,110),xoff: frandom(-8,8),yoff: frandom(-8,8),zoff: frandom(0,16),velx: frandom(-1,1),vely: frandom(-1,1),velz: frandom(-1,1),startalphaf: 0.5
			,fadestepf: -1,sizestep: frandom(1,4.4),startroll: random(-180,180));
			 A_SpawnParticleEx("000000",TexMan.CheckForTexture("GNSMK0"),style: STYLE_Normal,flags: SPF_ROLL|SPF_RELATIVE,lifetime: random(20,70),size: frandom(50,100),xoff: frandom(-8,8),yoff: frandom(-8,8),zoff: frandom(0,16),velx: frandom(-1,1),vely: frandom(-1,1),velz: frandom(-1,1),startalphaf: 0.4
			,fadestepf: -1,sizestep: frandom(1,4.4),startroll: random(-180,180));
			}
			TNT1 A 0 A_Jump(3,"FlyingChaseLoop");
			TNT1 A 0 A_Jump(10,"FlyingVelocityChange");
			TNT1 A 0 A_Jump(1,"FlyingLand");
			TNT1 A 0 A_CheckFloor("FlyingLand");
			Loop;
	FlyingChaseLoop:
			TNT1 A 0 A_CheckFloor("FlyingBounce");
			TNT1 A 1
			{
		     A_Recoil(-1);
			 A_FaceTarget();
			 A_SpawnParticleEx("000000",TexMan.CheckForTexture("GNSMK0"),style: STYLE_Normal,flags: SPF_ROLL|SPF_RELATIVE,lifetime: random(10,30),size: frandom(55,110),xoff: frandom(-8,8),yoff: frandom(-8,8),zoff: frandom(0,16),velx: frandom(-1,1),vely: frandom(-1,1),velz: frandom(-1,1),startalphaf: 0.5
			,fadestepf: -1,sizestep: frandom(1,4.4),startroll: random(-180,180));
			 A_SpawnParticleEx("000000",TexMan.CheckForTexture("GNSMK0"),style: STYLE_Normal,flags: SPF_ROLL|SPF_RELATIVE,lifetime: random(20,70),size: frandom(50,100),xoff: frandom(-8,8),yoff: frandom(-8,8),zoff: frandom(0,16),velx: frandom(-1,1),vely: frandom(-1,1),velz: frandom(-1,1),startalphaf: 0.4
			,fadestepf: -1,sizestep: frandom(1,4.4),startroll: random(-180,180));
			}
			TNT1 A 0 A_JumpIfCloser(300,"FlyingLand");
			TNT1 A 0 A_Jump(1,"Flying");
			TNT1 A 0 A_Jump(1,"FlyingLand");
			TNT1 A 0 A_JumpIfHigherOrLower("FlyingRaiseAlt","FlyingLowerAlt");
			Loop;
	FlyingBounce:
			TNT1 A 0 A_Jump(120,"FlyingLand");
			TNT1 A 0 ThrustThingZ(0,25,0,1);
			Goto Flying;
	FlyingLowerAlt:
			TNT1 A 0 ThrustThingZ(0,1,1,1);
			Goto FlyingChaseLoop;
	FlyingRaiseAlt:
			TNT1 A 0 ThrustThingZ(0,1,0,1);
			Goto FlyingChaseLoop;
	FlyingVelocityChange:
			TNT1 A 0 A_ChangeVelocity(random(-15,15),random(-15,15),random(-2,2));
			TNT1 A 0 ThrustThingZ(0,random(0,15),random(0,1),1);
			Goto Flying;
	FlyingLand:
			TNT1 A 0 A_ChangeVelocity(random(-5,5),random(-5,5),0);
			TNT1 A 0 ThrustThingZ(0,70,1,1);
	FlyingLandLoop:
			TNT1 A 0 { bNOGRAVITY = false; }
			TNT1 A 0 A_CheckFloor("FlyingLanded");
			TNT1 A 1
			{
			A_SpawnParticleEx("000000",TexMan.CheckForTexture("GNSMK0"),style: STYLE_Normal,flags: SPF_ROLL|SPF_RELATIVE,lifetime: random(10,30),size: frandom(55,110),xoff: frandom(-8,8),yoff: frandom(-8,8),zoff: frandom(0,16),velx: frandom(-1,1),vely: frandom(-1,1),velz: frandom(-1,1),startalphaf: 0.5
			,fadestepf: -1,sizestep: frandom(1,4.4),startroll: random(-180,180));
			 A_SpawnParticleEx("000000",TexMan.CheckForTexture("GNSMK0"),style: STYLE_Normal,flags: SPF_ROLL|SPF_RELATIVE,lifetime: random(20,70),size: frandom(50,100),xoff: frandom(-8,8),yoff: frandom(-8,8),zoff: frandom(0,16),velx: frandom(-1,1),vely: frandom(-1,1),velz: frandom(-1,1),startalphaf: 0.4
			,fadestepf: -1,sizestep: frandom(1,4.4),startroll: random(-180,180));
			}
			TNT1 A 0 A_Jump(1,"FlyingLanded");
			Loop;
	FlyingLanded:
			TNT1 A 0 { bNOGRAVITY = false; }
			TNT1 A 0 A_StopSound(31);
			TNT1 AAAAAAAAAAAAAAA 0
			{
			A_SpawnParticleEx
			(   
			"000000",
			TexMan.CheckForTexture("GNSMK0"),
			style: STYLE_Normal,
			flags: SPF_ROLL|SPF_RELATIVE,
			lifetime: random(70,130),
			size: frandom(15,95),
			angle: 0,
			xoff: frandom(-8,8),
			yoff: frandom(-8,8),
			zoff: frandom(1,4),
			velx: frandom(-3,3),
			vely: frandom(-3,3),
			velz: frandom(-1,1),
			startalphaf: frandom(0.2,0.5),
			fadestepf: -1,
			sizestep: frandom(1,4.5),
			startroll: random(-180,180),
			rollvel: frandom(-2,2),
			rollacc: 0
			);
			}
			TNT1 A 0 A_FaceTarget();
			Goto Attack;

	EndAttack:
		TNT1 A 0 { PMGhost_EndAttack(); }
		Goto Haunt;

	// Fake-death flee & recover (short wander) then resume haunt
	Flee:
		TNT1 A 0;
		TNT1 A 0 A_StartSound("DemonicSprite/Flee",35,volume:frandom(0.6,1),attenuation:frandom(0.4,1),pitch:frandom(0.5,1.2));
		TNT1 A 0 ThrustThing(random(0,360),random(0,16));
		TNT1 A 0 ThrustThingZ(0,random(20,70),0,1);
		TNT1 AAAAAAAAAAAAAAAA 1
			{
			A_SpawnParticleEx("000000",TexMan.CheckForTexture("GNSMK0"),style: STYLE_Normal,flags: SPF_ROLL|SPF_RELATIVE,lifetime: random(10,30),size: frandom(20,70),xoff: frandom(-8,8),yoff: frandom(-8,8),zoff: frandom(0,16),velx: frandom(-1,1),vely: frandom(-1,1),velz: frandom(-1,1),startalphaf: 0.4
			,fadestepf: -1,sizestep: frandom(1,4.4),startroll: random(-180,180));
			A_SpawnItemEx("PM_GenericPhaseGhost",0,0,0,0,0,0,0,SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERSCALE|SXF_TRANSFERRENDERSTYLE);
			}
		TNT1 A 0 A_Remove(AAPTR_DEFAULT, RMVF_EVERYTHING);
		Stop;
	
	// Real death: brief silhouette hold then remove
	Death:
		TNT1 A 0;
		TNT1 A 0 A_Jump(128,"Flee");
		TNT1 A 0 { bShootable = false; A_SetRenderStyle(0.5,STYLE_TranslucentStencil); }
		TNT1 A 0 A_StartSound("DemonicSprite/Flee",35,volume:frandom(0.6,1),attenuation:frandom(0.4,1),pitch:frandom(0.5,1.2));
		TNT1 A 0 A_SetSpeed(16);
		CH5R ABCDABCDABCDABCDABCDABCD 1
		{
		A_Wander();
		A_SpawnParticleEx("000000",TexMan.CheckForTexture("GNSMK0"),style: STYLE_Normal,flags: SPF_ROLL|SPF_RELATIVE,lifetime: random(10,30),size: frandom(20,70),xoff: frandom(-8,8),yoff: frandom(-8,8),zoff: frandom(0,50),velx: frandom(-1,1),vely: frandom(-1,1),velz: frandom(-1,1),startalphaf: 0.4
			,fadestepf: -1,sizestep: frandom(1,4.4),startroll: random(-180,180));
		}
		TNT1 A 0 A_Remove(AAPTR_DEFAULT, RMVF_EVERYTHING);
		Stop;

	XDeath:
		Goto Death;
	}
}

class PM_GhostImpBall : Actor
{
Default
{
  Speed 15;
  FastSpeed 25;
  DamageFunction (random(10,15));
  DamageType "Void";
  Radius 5;
  Height 5;
  Scale 0.4;
  SeeSound "";
  DeathSound "";
  -THRUSPECIES
  -Clientsideonly
  -DONTHARMSPECIES
  -THRUACTORS
  Renderstyle "Subtract";
  BounceType "None";
  PROJECTILE;
   }
   void PossSpriteSmoke()
	{
		A_SpawnParticleEx
	    (   
		 "000000",
		 TexMan.CheckForTexture("GNSMK0"),
		 style: STYLE_Normal,
		 flags: SPF_ROLL|SPF_RELATIVE,
		 lifetime: random(5,15),
		 size: frandom(12,25),
		 xoff: frandom(-8,-1),
		 yoff: frandom(-5,5),
		 zoff: frandom(-5,5),
		 velx: frandom(-0.2,0.2),
		 vely: frandom(-0.2,0.2),
		 velz: frandom(-0.2,0.2),
		 startalphaf: frandom(0.8,1),
		 fadestepf: -1,
		 sizestep: frandom(0.2,1.5),
		 startroll: random(-180,180)
	    );
		A_SpawnParticleEx
	    (   
		 "000000",
		 TexMan.CheckForTexture("GNSMK0"),
		 style: STYLE_Normal,
		 flags: SPF_ROLL|SPF_RELATIVE,
		 lifetime: random(3,10),
		 size: frandom(10,50),
		 xoff: frandom(-8,-1),
		 yoff: frandom(-5,5),
		 zoff: frandom(-5,5),
		 velx: frandom(-0.2,0.2),
		 vely: frandom(-0.2,0.2),
		 velz: frandom(-0.2,0.2),
		 startalphaf: frandom(0.8,1),
		 fadestepf: -1,
		 sizestep: frandom(0.2,1.5),
		 startroll: random(-180,180)
	    );
  }
  States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 A_StartSound("Paranormal/EvilDrone",34,CHANF_LOOPING,volume:0.4,pitch:1.2);
	Go:
		SPKW EEE 1
	    {
	    PossSpriteSmoke();
		A_Weave(random(-3,3), random(-3,3), random(0,3), random(0,2));
	    }
		Loop;
	Death:
		TNT1 A 1;
		TNT1 AAAAAA 0
		{
		A_SpawnParticleEx
	    (   
		 "000000",
		 TexMan.CheckForTexture("GNSMK0"),
		 style: STYLE_Normal,
		 flags: SPF_ROLL|SPF_RELATIVE,
		 lifetime: random(10,30),
		 size: frandom(10,95),
		 xoff: frandom(0,0),
		 yoff: frandom(0,0),
		 zoff: frandom(0,0),
		 velx: frandom(-1,1),
		 vely: frandom(-1,1),
		 velz: frandom(-1,1),
		 startalphaf: frandom(0.8,1),
		 fadestepf: -1,
		 sizestep: frandom(0.2,1.5),
		 startroll: random(-180,180)
		 );
		 }
		TNT1 A 0 A_StartSound("Abhor/SoulExp",37,volume:0.2,attenuation:1.3,pitch:frandom(0.6,1));
		Stop;
	}
}

class PM_GhostDemon : Demon
{
	Default
	{
		Health 300; //Double original actor's amount
		Alpha 0.0;
		Species "PMGhost";
		RenderStyle "Stencil";
		SeeSound "";
		ActiveSound "";
		AttackSound "PM/GhostPinkyMelee";
		MeleeRange 70;
		MeleeDamage 5;
		Speed 8;
		-COUNTKILL;
		-SHOOTABLE;
		+THRUACTORS;
		+DONTSPLASH;
		+NOBLOOD;
		+NOPAIN
		+NOINFIGHTING
		+DONTHARMSPECIES
	}
	int    PMG_AttackTics;
	double PMG_SignalRadius;
	bool   PMG_InAttack;

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		PMG_SignalRadius  = 1536;
		PMG_InAttack      = false;
	}

	// ---- Helpers (normal member funcs; called from code blocks) --------------
	void PMGhost_Debug(string msg)
	{
		if (PM_GHOST_DEBUG) Console.Printf("[PM_GhostImp] %s", msg);
	}

	void PMGhost_BeginHaunt()
	{
		bNoClip     = true;   // noclip for rest of life once haunting
		bShootable  = false;
		bThruActors = true;
		A_SetRenderStyle(0.0,STYLE_TranslucentStencil); // fully invisible
	}

	void PMGhost_BeginAttack()
	{
		PMG_InAttack   = true;
		bShootable     = true;
		A_SetRenderStyle(1.0,STYLE_TranslucentStencil); // solid black silhouette
		A_RadiusGive("PM_GhostAttackStim", PMG_SignalRadius, RGF_MONSTERS, 1);
		PMGhost_Debug("BeginAttack + Rally");
	}

	void PMGhost_EndAttack()
	{
		PMG_InAttack = false;
		bShootable   = false;
		A_SetRenderStyle(0.0,STYLE_TranslucentStencil);
		PMGhost_Debug("EndAttack");
	}

	bool PMGhost_AcquireAnyPlayer()
	{
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (!playeringame[i]) continue;
			PlayerInfo pi = players[i];
			PlayerPawn pp = pi.mo;
			if (pp != null && pp.health > 0 && pi.playerstate != PST_DEAD)
			{
				target = pp;
				return true;
			}
		}
		return false;
	}

	// ---- STATES ---------------------------------------------------------------
	states
	{
	// Spawns completely invisible; hearing → Finding, sight → Haunt
	Spawn:
		TNT1 A 0
		{
			bNoClip     = false;   // noclip begins once haunting
			bShootable  = false;
			bThruActors = true;
			A_SetRenderStyle(STYLE_None, 1.0);
		}
		TNT1 A 3 A_LookEx(LOF_NOSIGHTCHECK, 0, 0, 0, 360, "Finding"); // sound-only → Finding
		TNT1 A 3 A_LookEx(LOF_NOSOUNDCHECK, 0, 0, 0, 360, "Haunt");     // sight-only  → Haunt
		Loop;

	// If anything forces us to See, just go haunt logic immediately
	See:
		Goto Haunt;

	// Silent pursuit of the noise source until we actually see a target
	Finding:
		TNT1 A 0 A_JumpIf(target == null || (target.player && target.player.playerstate == PST_DEAD), "Spawn");
		TNT1 A 3 A_Chase(null, null);       // disable melee/missile jumps explicitly
		TNT1 A 0 A_JumpIfTargetInLOS("Haunt");
		Loop;

	// Main haunt loop: invisible, noclipping; wander/idle, do rare haunt actions, or attack rarely
	Haunt:
		TNT1 A 0 { PMGhost_BeginHaunt(); }
	HauntLoop:
		// Reacquire any living player; harmless if none (prevents crashes/OOB drift)
		TNT1 A 0 { PMGhost_AcquireAnyPlayer(); }

		// Ally rally preempts
		TNT1 A 0
		{
			let stim = FindInventory("PM_GhostAttackStim");
			if (stim) { stim.Destroy(); SetStateLabel("BeginAttack"); }
		}

		// Rarely decide to attack on our own
		TNT1 A 0 A_Jump(2, "BeginAttack");

		// Occasional haunt action (creepy sound / brief manifest / cold breath)
		TNT1 A 0
		{
			if (Random(0,31) < 8) // ~1/4 chance this pass
			{
				int r = Random(0, 2);
				if (r == 0) // whisper near random nearby offset
				{
					A_SpawnItemEx("PM_GhostWhisperer",random(-128,128),random(-128,128),0,0,0,0);
					PMGhost_Debug("HauntAction: Whisper");
				}
				else if (r == 1) // brief manifest
				{
					SetStateLabel("HauntManifest");
				}
				else // cold breath token
				{
					A_RadiusGive("PM_ColdBreathToken", 192, RGF_PLAYERS, 1);
					PMGhost_Debug("HauntAction: ColdBreath");
				}
			}
		}

		// Drift vs hover bias
		TNT1 A 0 A_Jump(128, "HauntWander");
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 3;                              // brief hover
		TNT1 A 0 { bNOGRAVITY = false; }
		Goto HauntLoop;

	HauntWander:
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 2 A_Wander();                      // drift aimlessly
		TNT1 A 0 A_JumpIfTargetInLOS("HauntLoop");
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 A_Chase(null, null);
		Goto HauntLoop;

	// Defensive stubs so any stray chase-attack attempt never faults
	Melee:
		TNT1 A 0 A_JumpIfCloser(52,"Bite");
		SAR2 A 7 A_FaceTarget();
		SAR2 E 4 A_FaceTarget();
		TNT1 A 0 ThrustThingZ(0,20,0,1);
		TNT1 A 0 A_Recoil(-7);
		SAR2 FFBBB 1;
		SAR2 GGG 4 A_SpawnProjectile("PM_MeleeHitbox",40,0,0,2);
		TNT1 A 0 A_SpawnProjectile("PM_MeleeHitbox",5,0,0,2);
		Goto Attack;
	Bite:
		TNT1 A 0 A_CustomMeleeAttack(meleesound:"",misssound:"");
		SAR2 E 10 A_FaceTarget();
		SAR2 F 8 A_FaceTarget();
		SAR2 G 8 A_SpawnProjectile("PM_MeleeHitbox",5,0,0,2);
		Goto Attack;

	Missile:
		Goto HauntLoop;

	// Brief “manifest” as a black silhouette then return to haunt loop
	HauntManifest:
		TNT1 A 0 A_SetRenderStyle(1.0,STYLE_TranslucentStencil);
		SAR2 AAAAAA 1 A_SetScale(frandom(0.95,1.05),frandom(0.95,1.05));                            // any imp frame works; silhouette only
		TNT1 A 0 A_SetRenderStyle(0.0,STYLE_TranslucentStencil);
		Goto HauntLoop;

	// Enter visible, shootable attack silhouette (still noclipping)
	BeginAttack:
		TNT1 A 0 { PMGhost_BeginAttack(); }
		TNT1 A 0 A_SetHealth(300);
		TNT1 A 0 A_StartSound("PM/GhostPinky",36,volume:frandom(0.2,1),attenuation:frandom(0.5,1.1),pitch:frandom(0.7,1.2));
		Goto StartFly;

	// --- Ghost Imp Attack (replaced with custom sequence) ---
	Attack:
		TNT1 A 0 A_SetSpeed(7);
		TNT1 A 0 A_ChangeLinkFlags(false,FLAG_NO_CHANGE);
		TNT1 A 0 { bNoClip = true; bThruActors = false; bShootable = true; bVulnerable = true; bSolid = true; bNoInteraction = false; bCorpse = false; }
		SAR2 AAABBBCCCDDD 1
		{
		bShootable = true;
		bVulnerable = true;
		bSolid = true;
		A_SetScale(frandom(0.95,1.05),frandom(0.95,1.05));
		A_SetRenderStyle(frandom(0,1),STYLE_TranslucentStencil);
		A_Chase("Melee",null);
		}
		TNT1 A 0 A_Jump(50,"AttackWander");
		TNT1 A 0 A_Jump(20,"EndAttack");
		Loop;
	AttackWander:
		TNT1 A 0;
		TNT1 A 0 A_ChangeLinkFlags(false,FLAG_NO_CHANGE);
		TNT1 A 0 { bNoClip = true; bThruActors = false; bShootable = true; bVulnerable = true; bSolid = true; bNoInteraction = false; bCorpse = false; }
		TNT1 A 0 A_SetSpeed(10);
		TNT1 A 0 A_CheckSight("AttackOutSight");
		SAR2 AABBCCDDAABBCCDD 1
		{
		bShootable = true;
		bVulnerable = true;
		bSolid = true;
		A_SetScale(frandom(0.95,1.05),frandom(0.95,1.05));
		A_SetRenderStyle(frandom(0,1),STYLE_TranslucentStencil);
		A_SpawnParticleEx("000000",TexMan.CheckForTexture("GNSMK0"),style: STYLE_Normal,flags: SPF_ROLL|SPF_RELATIVE,lifetime: random(10,30),size: frandom(55,110),xoff: frandom(-8,8),yoff: frandom(-8,8),zoff: frandom(0,50),velx: frandom(-1,1),vely: frandom(-1,1),velz: frandom(-1,1),startalphaf: 0.1
			,fadestepf: -1,sizestep: frandom(1,4.4),startroll: random(-180,180));
		A_SpawnParticleEx("000000",TexMan.CheckForTexture("GNSMK0"),style: STYLE_Normal,flags: SPF_ROLL|SPF_RELATIVE,lifetime: random(20,70),size: frandom(50,100),xoff: frandom(-8,8),yoff: frandom(-8,8),zoff: frandom(0,50),velx: frandom(-1,1),vely: frandom(-1,1),velz: frandom(-1,1),startalphaf: 0.3
			,fadestepf: -1,sizestep: frandom(1,4.4),startroll: random(-180,180));
		A_Wander();
		}
		TNT1 A 0 A_Jump(128,"AttackRangedWander","Attack");
		TNT1 A 0 A_Jump(20,"EndAttack");
		Goto AttackWander;
	AttackOutSight:
		TNT1 A 0;
		TNT1 A 0 A_Jump(256,"StartFly","Attack");
		Goto Attack;
	AttackRangedWander:
		TNT1 A 0 A_Jump(128,"Attack");
	ChargeReady:
		TNT1 A 0;
		TNT1 A 0 A_JumpIfCloser(200,"Attack");
		TNT1 A 0 A_StartSound("PM/GhostPinkyCharge",34,attenuation:frandom(0.6,1));
		TNT1 A 0 A_SetRenderStyle(1.0,STYLE_TranslucentStencil);
		SAR2 AAAA 5 A_FaceTarget();
		TNT1 A 0 A_StartSound("GenericChargeHeavy",37,attenuation:0.6);
		TNT1 A 0 A_Recoil(-8);
	Charging: 
	   TNT1 A 0;
	   TNT1 A 0 A_SetSpeed(15);
	   TNT1 A 0 A_StartSound("PM/ChargingStomp",36,CHANF_OVERLAP,0.6,pitch:frandom(0.9,1));
	   TNT1 A 0 A_Quake(2, 24, 0, 200, 0);
       SAR2 AA 1
	   {
	   A_SpawnItemEx("PM_GenericPhaseGhost",-8, flags: SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERSCALE|SXF_TRANSFERRENDERSTYLE|SXF_TRANSFERSTENCILCOL);
	   A_SpawnProjectile("PM_WarPigMeleeHitbox",18,0,0,CMF_AIMDIRECTION);
	   A_FaceTarget(3,1);
	   A_Recoil(-2);
	   A_SpawnParticleEx
	    ( "727272", TexMan.CheckForTexture("DUSTC0"), style: STYLE_Normal, flags: SPF_RELATIVE|SPF_ROLL,
	    lifetime: random(40,70), size: frandom(2,15), xoff: random(-5,5), yoff: frandom(-25,25), zoff: random(10,35),
	    velx: frandom(-5,5), vely: frandom(-5,5), velz: frandom(3,5),
	    accelz: frandom(-0.3,-0.6), startalphaf: 1.0, sizestep: -0.3, startroll: random(-180,180), rollvel: random(-4,4));
	   A_SpawnParticleEx
		( "8a8a8a", TexMan.CheckForTexture("GNSMK0"),
		style: STYLE_Normal, flags: SPF_RELATIVE|SPF_ROLL, lifetime: random(50,120),
		size: frandom(50,80), xoff: -10, yoff: random(-25,25), zoff: random(0,5),
		velx: frandom(1,1), vely: frandom(-1,1), velz: frandom(0,1), startalphaf: frandom(0.3,0.7), fadestepf: -1,
		sizestep: 0.2, startroll: random(-180,180));
	   }
	   TNT1 A 0 A_JumpIf(sqrt(vel.x * vel.x + vel.y * vel.y) < 3, "ChargeImpact");
	   SAR2 BB 1
	   {
	   A_SpawnItemEx("PM_GenericPhaseGhost",-8, flags: SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERSCALE|SXF_TRANSFERRENDERSTYLE|SXF_TRANSFERSTENCILCOL);
	   A_SpawnProjectile("PM_WarPigMeleeHitbox",18,0,0,CMF_AIMDIRECTION);
	   A_FaceTarget(3,1);
	   A_Recoil(-2);
	   A_SpawnParticleEx
	    ( "727272", TexMan.CheckForTexture("DUSTC0"), style: STYLE_Normal, flags: SPF_RELATIVE|SPF_ROLL,
	    lifetime: random(40,70), size: frandom(2,15), xoff: random(-5,5), yoff: frandom(-25,25), zoff: random(10,35),
	    velx: frandom(-5,5), vely: frandom(-5,5), velz: frandom(3,5),
	    accelz: frandom(-0.3,-0.6), startalphaf: 1.0, sizestep: -0.3, startroll: random(-180,180), rollvel: random(-4,4));
	    A_SpawnParticleEx
		( "8a8a8a", TexMan.CheckForTexture("GNSMK0"),
		style: STYLE_Normal, flags: SPF_RELATIVE|SPF_ROLL, lifetime: random(50,120),
		size: frandom(50,80), xoff: -10, yoff: random(-25,25), zoff: random(0,5),
		velx: frandom(1,1), vely: frandom(-1,1), velz: frandom(0,1), startalphaf: frandom(0.3,0.7), fadestepf: -1,
		sizestep: 0.2, startroll: random(-180,180));
	   }
	   TNT1 A 0 A_JumpIf(sqrt(vel.x * vel.x + vel.y * vel.y) < 3, "ChargeImpact");
	   TNT1 A 0 A_StartSound("PM/ChargingStomp",36,CHANF_OVERLAP,0.6,pitch:frandom(0.9,1.1));
	   TNT1 A 0 A_Quake(2, 24, 0, 200, 0);
       SAR2 CC 1
	   {
	   A_SpawnItemEx("PM_GenericPhaseGhost",-8, flags: SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERSCALE|SXF_TRANSFERRENDERSTYLE|SXF_TRANSFERSTENCILCOL);
	   A_SpawnProjectile("PM_WarPigMeleeHitbox",18,0,0,CMF_AIMDIRECTION);
	   A_FaceTarget(3,1);
	   A_Recoil(-2);
	   A_SpawnParticleEx
	    ( "727272", TexMan.CheckForTexture("DUSTC0"), style: STYLE_Normal, flags: SPF_RELATIVE|SPF_ROLL,
	    lifetime: random(40,70), size: frandom(2,15), xoff: random(-5,5), yoff: frandom(-25,25), zoff: random(10,35),
	    velx: frandom(-5,5), vely: frandom(-5,5), velz: frandom(3,5),
	    accelz: frandom(-0.3,-0.6), startalphaf: 1.0, sizestep: -0.3, startroll: random(-180,180), rollvel: random(-4,4));
	   A_SpawnParticleEx
		( "8a8a8a", TexMan.CheckForTexture("GNSMK0"),
		style: STYLE_Normal, flags: SPF_RELATIVE|SPF_ROLL, lifetime: random(50,120),
		size: frandom(50,80), xoff: -10, yoff: random(-25,25), zoff: random(0,5),
		velx: frandom(1,1), vely: frandom(-1,1), velz: frandom(0,1), startalphaf: frandom(0.3,0.7), fadestepf: -1,
		sizestep: 0.2, startroll: random(-180,180));
	   }
	   TNT1 A 0 A_JumpIf(sqrt(vel.x * vel.x + vel.y * vel.y) < 3, "ChargeImpact");
	   SAR2 DD 1
	   {
	   A_SpawnItemEx("PM_GenericPhaseGhost",-8, flags: SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERSCALE|SXF_TRANSFERRENDERSTYLE|SXF_TRANSFERSTENCILCOL);
	   A_SpawnProjectile("PM_WarPigMeleeHitbox",18,0,0,CMF_AIMDIRECTION);
	   A_FaceTarget(3,1);
	   A_Recoil(-2);
	   A_SpawnParticleEx
	    ( "727272", TexMan.CheckForTexture("DUSTC0"), style: STYLE_Normal, flags: SPF_RELATIVE|SPF_ROLL,
	    lifetime: random(40,70), size: frandom(2,15), xoff: random(-5,5), yoff: frandom(-25,25), zoff: random(10,35),
	    velx: frandom(-5,5), vely: frandom(-5,5), velz: frandom(3,5),
	    accelz: frandom(-0.3,-0.6), startalphaf: 1.0, sizestep: -0.3, startroll: random(-180,180), rollvel: random(-4,4));
	   A_SpawnParticleEx
	    ( "727272", TexMan.CheckForTexture("GNSMK0"), style: STYLE_Normal, flags: SPF_RELATIVE|SPF_ROLL,
	    lifetime: random(40,70), size: frandom(2,15), xoff: random(-5,5), yoff: frandom(-25,25), zoff: random(10,35),
	    velx: frandom(-5,5), vely: frandom(-5,5), velz: frandom(3,5),
	    accelz: frandom(-0.3,-0.6), startalphaf: 1.0, sizestep: -0.3, startroll: random(-180,180), rollvel: random(-4,4));
	   }
	   TNT1 A 0 A_JumpIf(sqrt(vel.x * vel.x + vel.y * vel.y) < 3, "ChargeImpact");
	   TNT1 A 0 A_Jump(50,"Attack");
       Loop;
	ChargeImpact:
		TNT1 A 0;
		TNT1 A 0 A_Quake(10, 34, 0, 200);
		TNT1 AAAAAAAAAAAAAA 0
		{
		A_SpawnParticleEx
	    ( "727272", TexMan.CheckForTexture("DUSTC0"), style: STYLE_Normal, flags: SPF_RELATIVE|SPF_ROLL,
	    lifetime: random(60,90), size: frandom(6,25), xoff: random(5,10), yoff: frandom(-10,10), zoff: random(20,50),
	    velx: frandom(-4,4), vely: frandom(-10,10), velz: frandom(3,10),
	    accelz: frandom(-0.1,-0.6), startalphaf: 1.0, startroll: random(-180,180), rollvel: random(-4,4));
		A_SpawnParticleEx
	    ( "8F8F8F", TexMan.CheckForTexture("GNSMK0"), style: STYLE_Normal, flags: SPF_RELATIVE|SPF_ROLL,
	    lifetime: random(80,140), size: frandom(15,45), xoff: random(5,10), yoff: frandom(-10,10), zoff: random(20,50),
	    velx: frandom(-1,1), vely: frandom(-2,2), velz: frandom(-2,2), startalphaf: frandom(0.4,1),
		sizestep: random(1,6), startroll: random(-180,180), rollvel: random(-4,4));
	    }
		TNT1 AAA 0 A_SpawnProjectile("PM_WarPigMeleeHitbox",18,0,0,CMF_AIMDIRECTION);
		TNT1 A 0 A_RadiusThrust(4000,200,RTF_NOIMPACTDAMAGE);
		TNT1 A 0 A_StartSound("PM/ChargeImpact",39,attenuation:0.6);
        SAR2 H 45;
		Goto AttackWander;
	StartFly:
			TNT1 A 1 A_FaceTarget();
			TNT1 A 0 { bNOGRAVITY = true; }
			TNT1 A 0 ThrustThing(random(0,360),random(0,16));
			TNT1 A 0 ThrustThingZ(0,random(20,70),0,1);
			TNT1 AAAAAAAAAAAAAAAA 1
			{
			A_SpawnParticleEx("000000",TexMan.CheckForTexture("GNSMK0"),style: STYLE_Normal,flags: SPF_ROLL|SPF_RELATIVE,lifetime: random(10,30),size: frandom(20,70),xoff: frandom(-8,8),yoff: frandom(-8,8),zoff: frandom(0,16),velx: frandom(-1,1),vely: frandom(-1,1),velz: frandom(-1,1),startalphaf: 0.4
			,fadestepf: -1,sizestep: frandom(1,4.4),startroll: random(-180,180));
			A_SpawnItemEx("PM_GenericPhaseGhost",0,0,0,0,0,0,0,SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERSCALE|SXF_TRANSFERRENDERSTYLE);
			}
	FlyUp:
			TNT1 A 0 ThrustThingZ(0,random(0,45),1,1);
			TNT1 A 0 A_StartSound("SoulReaver/Amb1",31,CHANF_LOOPING,volume:0.9,attenuation:1.1,pitch:1.3);
	Flying:
			TNT1 A 1
			{
			 A_SpawnParticleEx("000000",TexMan.CheckForTexture("GNSMK0"),style: STYLE_Normal,flags: SPF_ROLL|SPF_RELATIVE,lifetime: random(10,30),size: frandom(55,110),xoff: frandom(-8,8),yoff: frandom(-8,8),zoff: frandom(0,16),velx: frandom(-1,1),vely: frandom(-1,1),velz: frandom(-1,1),startalphaf: 0.5
			,fadestepf: -1,sizestep: frandom(1,4.4),startroll: random(-180,180));
			 A_SpawnParticleEx("000000",TexMan.CheckForTexture("GNSMK0"),style: STYLE_Normal,flags: SPF_ROLL|SPF_RELATIVE,lifetime: random(20,70),size: frandom(50,100),xoff: frandom(-8,8),yoff: frandom(-8,8),zoff: frandom(0,16),velx: frandom(-1,1),vely: frandom(-1,1),velz: frandom(-1,1),startalphaf: 0.4
			,fadestepf: -1,sizestep: frandom(1,4.4),startroll: random(-180,180));
			}
			TNT1 A 0 A_Jump(3,"FlyingChaseLoop");
			TNT1 A 0 A_Jump(10,"FlyingVelocityChange");
			TNT1 A 0 A_Jump(1,"FlyingLand");
			TNT1 A 0 A_CheckFloor("FlyingLand");
			Loop;
	FlyingChaseLoop:
			TNT1 A 0 A_CheckFloor("FlyingBounce");
			TNT1 A 1
			{
		     A_Recoil(-1);
			 A_FaceTarget();
			 A_SpawnParticleEx("000000",TexMan.CheckForTexture("GNSMK0"),style: STYLE_Normal,flags: SPF_ROLL|SPF_RELATIVE,lifetime: random(10,30),size: frandom(55,110),xoff: frandom(-8,8),yoff: frandom(-8,8),zoff: frandom(0,16),velx: frandom(-1,1),vely: frandom(-1,1),velz: frandom(-1,1),startalphaf: 0.5
			,fadestepf: -1,sizestep: frandom(1,4.4),startroll: random(-180,180));
			 A_SpawnParticleEx("000000",TexMan.CheckForTexture("GNSMK0"),style: STYLE_Normal,flags: SPF_ROLL|SPF_RELATIVE,lifetime: random(20,70),size: frandom(50,100),xoff: frandom(-8,8),yoff: frandom(-8,8),zoff: frandom(0,16),velx: frandom(-1,1),vely: frandom(-1,1),velz: frandom(-1,1),startalphaf: 0.4
			,fadestepf: -1,sizestep: frandom(1,4.4),startroll: random(-180,180));
			}
			TNT1 A 0 A_JumpIfCloser(300,"FlyingLand");
			TNT1 A 0 A_Jump(1,"Flying");
			TNT1 A 0 A_Jump(1,"FlyingLand");
			TNT1 A 0 A_JumpIfHigherOrLower("FlyingRaiseAlt","FlyingLowerAlt");
			Loop;
	FlyingBounce:
			TNT1 A 0 A_Jump(120,"FlyingLand");
			TNT1 A 0 ThrustThingZ(0,25,0,1);
			Goto Flying;
	FlyingLowerAlt:
			TNT1 A 0 ThrustThingZ(0,1,1,1);
			Goto FlyingChaseLoop;
	FlyingRaiseAlt:
			TNT1 A 0 ThrustThingZ(0,1,0,1);
			Goto FlyingChaseLoop;
	FlyingVelocityChange:
			TNT1 A 0 A_ChangeVelocity(random(-15,15),random(-15,15),random(-2,2));
			TNT1 A 0 ThrustThingZ(0,random(0,15),random(0,1),1);
			Goto Flying;
	FlyingLand:
			TNT1 A 0 A_ChangeVelocity(random(-5,5),random(-5,5),0);
			TNT1 A 0 ThrustThingZ(0,70,1,1);
	FlyingLandLoop:
			TNT1 A 0 { bNOGRAVITY = false; }
			TNT1 A 0 A_CheckFloor("FlyingLanded");
			TNT1 A 1
			{
			A_SpawnParticleEx("000000",TexMan.CheckForTexture("GNSMK0"),style: STYLE_Normal,flags: SPF_ROLL|SPF_RELATIVE,lifetime: random(10,30),size: frandom(55,110),xoff: frandom(-8,8),yoff: frandom(-8,8),zoff: frandom(0,16),velx: frandom(-1,1),vely: frandom(-1,1),velz: frandom(-1,1),startalphaf: 0.5
			,fadestepf: -1,sizestep: frandom(1,4.4),startroll: random(-180,180));
			 A_SpawnParticleEx("000000",TexMan.CheckForTexture("GNSMK0"),style: STYLE_Normal,flags: SPF_ROLL|SPF_RELATIVE,lifetime: random(20,70),size: frandom(50,100),xoff: frandom(-8,8),yoff: frandom(-8,8),zoff: frandom(0,16),velx: frandom(-1,1),vely: frandom(-1,1),velz: frandom(-1,1),startalphaf: 0.4
			,fadestepf: -1,sizestep: frandom(1,4.4),startroll: random(-180,180));
			}
			TNT1 A 0 A_Jump(1,"FlyingLanded");
			Loop;
	FlyingLanded:
			TNT1 A 0 { bNOGRAVITY = false; }
			TNT1 A 0 A_StopSound(31);
			TNT1 AAAAAAAAAAAAAAA 0
			{
			A_SpawnParticleEx
			(   
			"000000",
			TexMan.CheckForTexture("GNSMK0"),
			style: STYLE_Normal,
			flags: SPF_ROLL|SPF_RELATIVE,
			lifetime: random(70,130),
			size: frandom(15,95),
			angle: 0,
			xoff: frandom(-8,8),
			yoff: frandom(-8,8),
			zoff: frandom(1,4),
			velx: frandom(-3,3),
			vely: frandom(-3,3),
			velz: frandom(-1,1),
			startalphaf: frandom(0.2,0.5),
			fadestepf: -1,
			sizestep: frandom(1,4.5),
			startroll: random(-180,180),
			rollvel: frandom(-2,2),
			rollacc: 0
			);
			}
			TNT1 A 0 A_FaceTarget();
			Goto Attack;

	EndAttack:
		TNT1 A 0 { PMGhost_EndAttack(); }
		Goto Haunt;

	Flee:
		TNT1 A 0;
		TNT1 A 0 A_StartSound("DemonicSprite/Flee",35,volume:frandom(0.6,1),attenuation:frandom(0.4,1),pitch:frandom(0.5,1.2));
		TNT1 A 0 ThrustThing(random(0,360),random(0,16));
		TNT1 A 0 ThrustThingZ(0,random(20,70),0,1);
		TNT1 AAAAAAAAAAAAAAAA 1
			{
			A_SpawnParticleEx("000000",TexMan.CheckForTexture("GNSMK0"),style: STYLE_Normal,flags: SPF_ROLL|SPF_RELATIVE,lifetime: random(10,30),size: frandom(20,70),xoff: frandom(-8,8),yoff: frandom(-8,8),zoff: frandom(0,16),velx: frandom(-1,1),vely: frandom(-1,1),velz: frandom(-1,1),startalphaf: 0.4
			,fadestepf: -1,sizestep: frandom(1,4.4),startroll: random(-180,180));
			A_SpawnItemEx("PM_GenericPhaseGhost",0,0,0,0,0,0,0,SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERSCALE|SXF_TRANSFERRENDERSTYLE);
			}
		TNT1 A 0 A_Remove(AAPTR_DEFAULT, RMVF_EVERYTHING);
		Stop;
	
	Death:
		TNT1 A 0;
		TNT1 A 0 A_StopSound(37);
		TNT1 A 0 A_Jump(128,"Flee");
		TNT1 A 0 { bShootable = false; A_SetRenderStyle(0.5,STYLE_TranslucentStencil); }
		TNT1 A 0 A_StartSound("DemonicSprite/Flee",35,volume:frandom(0.6,1),attenuation:frandom(0.4,1),pitch:frandom(0.5,1.2));
		TNT1 A 0 A_SetSpeed(16);
		SAR2 ABCDABCDABCDABCDABCDABCD 1
		{
		A_Wander();
		A_SpawnParticleEx("000000",TexMan.CheckForTexture("GNSMK0"),style: STYLE_Normal,flags: SPF_ROLL|SPF_RELATIVE,lifetime: random(10,30),size: frandom(20,70),xoff: frandom(-8,8),yoff: frandom(-8,8),zoff: frandom(0,50),velx: frandom(-1,1),vely: frandom(-1,1),velz: frandom(-1,1),startalphaf: 0.4
			,fadestepf: -1,sizestep: frandom(1,4.4),startroll: random(-180,180));
		}
		TNT1 A 0 A_Remove(AAPTR_DEFAULT, RMVF_EVERYTHING);
		Stop;

	XDeath:
		Goto Death;
	}
}

class PM_GhostSpectre : Spectre
{
    Default
    {
        RenderStyle "Stencil";
        Alpha 1.0;
        Species "PMGhost";
        +DONTSPLASH;
        +NOBLOOD;
		-COUNTKILL;
    }
}

class PM_GhostCacodemon : Cacodemon
{
    Default
    {
        RenderStyle "Stencil";
        Alpha 1.0;
        Species "PMGhost";
        +DONTSPLASH;
        +NOBLOOD;
		-COUNTKILL;
    }
}

class PM_GhostHellKnight : HellKnight
{
    Default
    {
        RenderStyle "Stencil";
        Alpha 1.0;
        Species "PMGhost";
        +DONTSPLASH;
        +NOBLOOD;
		-COUNTKILL;
    }
}

class PM_GhostBaron : BaronOfHell
{
    Default
    {
        RenderStyle "Stencil";
        Alpha 1.0;
        Species "PMGhost";
        +DONTSPLASH;
        +NOBLOOD;
		-COUNTKILL;
    }
}

class PM_GhostRevenant : Revenant
{
    Default
    {
        RenderStyle "Stencil";
        Alpha 1.0;
        Species "PMGhost";
        +DONTSPLASH;
        +NOBLOOD;
		-COUNTKILL;
    }
}

class PM_GhostArachnotron : Arachnotron
{
    Default
    {
        RenderStyle "Stencil";
        Alpha 1.0;
        Species "PMGhost";
        +DONTSPLASH;
        +NOBLOOD;
		-COUNTKILL;
    }
}

// Mancubus internal class name is "Fatso"
class PM_GhostMancubus : Fatso
{
    Default
    {
        RenderStyle "Stencil";
        Alpha 1.0;
        Species "PMGhost";
        +DONTSPLASH;
        +NOBLOOD;
		-COUNTKILL;
    }
}

class PM_GhostPainElemental : PainElemental
{
    Default
    {
        RenderStyle "Stencil";
        Alpha 1.0;
        Species "PMGhost";
        +DONTSPLASH;
        +NOBLOOD;
		-COUNTKILL;
    }
}

class PM_GhostArchvile : Archvile
{
    Default
    {
        RenderStyle "Stencil";
        Alpha 1.0;
        Species "PMGhost";
        +DONTSPLASH;
        +NOBLOOD;
		-COUNTKILL;
    }
}

class PM_GhostLostSoul : LostSoul
{
    Default
    {
        RenderStyle "Stencil";
        Alpha 1.0;
        Species "PMGhost";
        +DONTSPLASH;
        +NOBLOOD;
		-COUNTKILL;
    }
}
